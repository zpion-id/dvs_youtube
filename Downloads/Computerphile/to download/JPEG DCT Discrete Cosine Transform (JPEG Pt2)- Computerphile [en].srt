1
0:00:00,030 --> 0:00:02,040
in the last video we talked about with

2
0:00:02,040 --> 0:00:04,110
the beginnings of JPEGs so what do we do

3
0:00:04,110 --> 0:00:05,490
at the beginning of the process to start

4
0:00:05,490 --> 0:00:06,960
preparing for the discrete cosine

5
0:00:06,960 --> 0:00:09,360
transform which is really how the lossy

6
0:00:09,360 --> 0:00:11,570
compression happens within a JPEG

7
0:00:11,570 --> 0:00:15,299
compressed file so we start with our RGB

8
0:00:15,299 --> 0:00:17,340
image we convert that into the ycbcr

9
0:00:17,340 --> 0:00:19,020
color space which separates for

10
0:00:19,020 --> 0:00:20,910
luminance and the chrominance and then

11
0:00:20,910 --> 0:00:22,560
we can down sample the chrominance if we

12
0:00:22,560 --> 0:00:24,300
want and we can kind of get away with

13
0:00:24,300 --> 0:00:26,310
quite a bit of down sampling there but

14
0:00:26,310 --> 0:00:27,869
people won't be able to see the next

15
0:00:27,869 --> 0:00:31,730
step is the discrete cosine transform

16
0:00:31,730 --> 0:00:34,320
before we start talking about how images

17
0:00:34,320 --> 0:00:35,760
are compressed using discrete cosine

18
0:00:35,760 --> 0:00:38,040
transform it's much better just to start

19
0:00:38,040 --> 0:00:39,780
with a simple example of what a discrete

20
0:00:39,780 --> 0:00:41,579
cosine transform is and how it works a

21
0:00:41,579 --> 0:00:43,260
cosine function for anyone that isn't

22
0:00:43,260 --> 0:00:45,030
familiar with it is a function that goes

23
0:00:45,030 --> 0:00:47,760
between 1 and minus 1 what we tend to do

24
0:00:47,760 --> 0:00:50,039
on this on this x-axis is go from naught

25
0:00:50,039 --> 0:00:53,910
to PI to 2 pi this is in radians those

26
0:00:53,910 --> 0:00:56,039
of you familiar with degrees this is 180

27
0:00:56,039 --> 0:00:59,129
degrees at pi and 360 degrees at 2pi and

28
0:00:59,129 --> 0:01:01,170
the cosine wave looks like this so it's

29
0:01:01,170 --> 0:01:05,189
1 at 0 and then at pi it goes down to

30
0:01:05,189 --> 0:01:08,670
minus 1 and when it goes back up to 1 at

31
0:01:08,670 --> 0:01:10,439
2pi and it just goes on and on like this

32
0:01:10,439 --> 0:01:12,479
up and down if you increase the waiver

33
0:01:12,479 --> 0:01:14,610
to discrete cosine transform works is we

34
0:01:14,610 --> 0:01:16,320
take some data in this case our image

35
0:01:16,320 --> 0:01:19,140
data and we try and represent it as the

36
0:01:19,140 --> 0:01:21,119
sum of lots of these waves which doesn't

37
0:01:21,119 --> 0:01:22,170
make a lot of sense until you start

38
0:01:22,170 --> 0:01:23,430
drawing them out so let's imagine that

39
0:01:23,430 --> 0:01:25,740
we've got this cosine wave here which is

40
0:01:25,740 --> 0:01:27,630
our standard frequency cosine wave and

41
0:01:27,630 --> 0:01:29,579
then we've got another cosine wave which

42
0:01:29,579 --> 0:01:31,710
is a much higher frequency so that will

43
0:01:31,710 --> 0:01:34,320
be come down a bit faster go up a bit

44
0:01:34,320 --> 0:01:36,540
faster come down a bit faster and go a

45
0:01:36,540 --> 0:01:38,909
bit faster like this ok so now we have

46
0:01:38,909 --> 0:01:41,490
two waves if we add them together what

47
0:01:41,490 --> 0:01:43,920
we get is a sort of another wave which

48
0:01:43,920 --> 0:01:45,840
is a combination of the two so if we

49
0:01:45,840 --> 0:01:47,850
draw it in here in this dashed line we

50
0:01:47,850 --> 0:01:50,159
can see halfway between these two waves

51
0:01:50,159 --> 0:01:53,009
is like this and then kind of like this

52
0:01:53,009 --> 0:01:54,780
and you can see that we've created

53
0:01:54,780 --> 0:01:56,850
another more complex shaped wave by

54
0:01:56,850 --> 0:02:00,240
adding these two together now as we

55
0:02:00,240 --> 0:02:02,520
increase the number of cosines we can

56
0:02:02,520 --> 0:02:04,439
increase the number of possible shapes

57
0:02:04,439 --> 0:02:06,719
of ways that we can produce in practice

58
0:02:06,719 --> 0:02:08,280
if we added these two ways together we'd

59
0:02:08,280 --> 0:02:09,660
have a way that was much taller than the

60
0:02:09,660 --> 0:02:12,150
input so here it would be 2 not 1 so

61
0:02:12,150 --> 0:02:13,500
what in fact we do is we way

62
0:02:13,500 --> 0:02:15,480
both of these and so we take an average

63
0:02:15,480 --> 0:02:17,130
so both of these are weighted in this

64
0:02:17,130 --> 0:02:19,620
case as a 1/2 and so this is essentially

65
0:02:19,620 --> 0:02:21,330
the average of both of them we could

66
0:02:21,330 --> 0:02:23,730
also change the weighting of these so we

67
0:02:23,730 --> 0:02:25,320
could have it was mostly this

68
0:02:25,320 --> 0:02
high-frequency one but only a little bit

69
0:02 --> 0:02:28,890
of this low-frequency one and we'd have

70
0:02:28,890 --> 0:02:30,510
a different shaped wave coming out the

71
0:02:30,510 --> 0:02:33,570
end so each wave represents a small

72
0:02:33,570 --> 0:02:36,030
constituent of the the output and the

73
0:02:36,030 --> 0:02:37,590
higher the frequency of the wave the

74
0:02:37,590 --> 0:02:39,540
higher frequency part of the signal

75
0:02:39,540 --> 0:02:40,740
we're dealing with so if we look at my

76
0:02:40,740 --> 0:02:42,540
my jumper here there's a low frequency

77
0:02:42,540 --> 0:02:44,670
change from this black table to a

78
0:02:44,670 --> 0:02:46,530
brightness right over my jumper to

79
0:02:46,530 --> 0:02:48,390
darktable again and as much higher

80
0:02:48,390 --> 0:02:50,550
frequency changes on my jumper where we

81
0:02:50,550 --> 0:02:52,530
go up and down within sort of the woolen

82
0:02:52,530 --> 0:02:53,940
knit and it's the same kind of principle

83
0:02:53,940 --> 0:02:56,370
we're arguing in JPEG that we can get

84
0:02:56,370 --> 0:02:57,690
rid of some of the higher frequency

85
0:02:57,690 --> 0:03:00,180
signals and the general gist of the

86
0:03:00,180 --> 0:03:02,340
image will still be there so this is

87
0:03:02,340 --> 0:03:04,320
just a one-dimensional discrete cosine

88
0:03:04,320 --> 0:03:06,060
transform with only two components the

89
0:03:06,060 --> 0:03:08,730
way that the the mathematics works is if

90
0:03:08,730 --> 0:03:11,459
we have a signal that's 8 long then we

91
0:03:11,459 --> 0:03:13,350
find that we can represent it using 8

92
0:03:13,350 --> 0:03:15,480
cosine waves of different frequencies

93
0:03:15,480 --> 0:03:18,420
and the same is true of an image what we

94
0:03:18,420 --> 0:03:21,030
do in JPEG is we split each image into 8

95
0:03:21,030 --> 0:03:23,130
by 8 pixel groups and each of those

96
0:03:23,130 --> 0:03:25,530
pixel groups is separately encoded with

97
0:03:25,530 --> 0:03:27,570
its own discrete cosine transform each

98
0:03:27,570 --> 0:03:29,519
of those 8 by 8 pixel groups can be

99
0:03:29,519 --> 0:03:32,880
exactly replicated by 64 so 8 by 8

100
0:03:32,880 --> 0:03:36,209
cosine waves this actually shows the 64

101
0:03:36,209 --> 0:03:40,170
base cosine waves that produce any image

102
0:03:40,170 --> 0:03:42,420
we might like to do in 8 by 8 pixels

103
0:03:42,420 --> 0:03:44,280
this particular component here is

104
0:03:44,280 --> 0:03:47,250
essentially flat okay so if you had only

105
0:03:47,250 --> 0:03:48,930
this component and that was all that

106
0:03:48,930 --> 0:03:51,090
contributed to your final output your

107
0:03:51,090 --> 0:03:53,280
image would look like that okay if you

108
0:03:53,280 --> 0:03:54,780
had only this one your image would go

109
0:03:54,780 --> 0:03:56,790
white and then it would dip down and go

110
0:03:56,790 --> 0:03:58,170
black and you can see that the frequency

111
0:03:58,170 --> 0:04:00,420
is increasing as we go along here this

112
0:04:00,420 --> 0:04:02,220
is in the X direction and then in the Y

113
0:04:02,220 --> 0:04:04,049
direction the frequency is increasing

114
0:04:04,049 --> 0:04:07,110
down here so this is a cosine wave and

115
0:04:07,110 --> 0:04:09,239
this is a higher frequency cosine wave

116
0:04:09,239 --> 0:04:11,130
down here as we increase the frequency

117
0:04:11,130 --> 0:04:12,720
in both directions we get a kind of

118
0:04:12,720 --> 0:04:14,130
checkerboard pattern if this is a high

119
0:04:14,130 --> 0:04:16,620
frequency information that we're

120
0:04:16,620 --> 0:04:19,950
encoding in these regions so these are

121
0:04:19,950 --> 0:04:22,890
v60 for cosine functions that can be

122
0:04:22,890 --> 0:04:26,030
combined to make any 8x8 image

123
0:04:26,030 --> 0:04:28,160
it is only in one channel so let's say

124
0:04:28,160 --> 0:04:30,590
just you luminance or just CR for

125
0:04:30,590 --> 0:04:33,170
example if we had half of this wave and

126
0:04:33,170 --> 0:04:35,540
half of this wave then what you get is a

127
0:04:35,540 --> 0:04:37,490
square of image that was generally

128
0:04:37,490 --> 0:04:39,350
brighter on the left with a little bit

129
0:04:39,350 --> 0:04
of light on the right hand side because

130
0:04 --> 0:04:42,860
you've samba two together to create any

131
0:04:42,860 --> 0:04:45,170
kind of 8x8 image what we need to do is

132
0:04:45,170 --> 0:04:47,150
have a combination of all of these at

133
0:04:47,150 --> 0:04:49,490
the same time each of these is weighted

134
0:04:49,490 --> 0:04:51,320
based on something called a coefficient

135
0:04:51,320 --> 0:04:52,820
which represents is a number

136
0:04:52,820 --> 0:04:54,710
representing the contribution of each of

137
0:04:54,710 --> 0:04:57,890
these individual blocks to the whole so

138
0:04:57,890 --> 0:04:59,270
for example if the contribution of this

139
0:04:59,270 --> 0:05:01,430
one is zero then there is no part of

140
0:05:01,430 --> 0:05:03,800
this cosine wave in the in the 8x8 image

141
0:05:03,800 --> 0:05:05,360
that we're looking at if it's a naught

142
0:05:05,360 --> 0:05:08,419
point one and this one's ten then this

143
0:05:08,419 --> 0:05:09,950
is obviously got a hundred fold less

144
0:05:09,950 --> 0:05:12,050
impact on your output image than this

145
0:05:12,050 --> 0:05:13,820
one and what we do with discrete cosine

146
0:05:13,820 --> 0:05:16,010
transform is basically calculate the

147
0:05:16,010 --> 0:05:17,690
coefficients for these waves putting

148
0:05:17,690 --> 0:05:19,430
this discrete cosine transform aside for

149
0:05:19,430 --> 0:05:21,560
a minute if we just look at an example

150
0:05:21,560 --> 0:05:23,990
image so this is a small crop section of

151
0:05:23,990 --> 0:05:25,960
our flower image this is the Y component

152
0:05:25,960 --> 0:05:28,910
so it's just every value from naught to

153
0:05:28,910 --> 0:05:32,240
255 how intense is the pixel so you can

154
0:05:32,240 --> 0:05:33,830
see this is not a hugely interesting

155
0:05:33,830 --> 0:05:35,930
piece of image it's kind of gray with a

156
0:05:35,930 --> 0:05:37,550
little bit of brighter region down here

157
0:05:37,550 --> 0:05:39,979
what we want to try and do is calculate

158
0:05:39,979 --> 0:05:41,419
the contribution of each of our cosine

159
0:05:41,419 --> 0:05:44,419
waves to this image which bits of cosine

160
0:05:44,419 --> 0:05:46,880
do we need that add together to create

161
0:05:46,880 --> 0:05:48,650
an image that looks exactly like this so

162
0:05:48,650 --> 0:05:50,440
to start with what we need to do is

163
0:05:50,440 --> 0:05:52,610
Center all of these values which are

164
0:05:52,610 --> 0:05:54,560
currently centered around 128 because

165
0:05:54,560 --> 0:05:56,870
they're from naught to 255 we sent all

166
0:05:56,870 --> 0:05:58,250
these values around zero because

167
0:05:58,250 --> 0:06:00,860
remember a cosine wave goes from 1 to

168
0:06:00,860 --> 0:06:03,950
minus 1 not from 1 to naught so we take

169
0:06:03,950 --> 0:06:07,010
away 128 of every value and we get our

170
0:06:07,010 --> 0:06:08,570
shifted block like this so this is the

171
0:06:08,570 --> 0:06:10,940
exact same image but this time now

172
0:06:10,940 --> 0:06:12,979
centered around 0 and now we can use

173
0:06:12,979 --> 0:06:15,410
this in the discrete cosine transform to

174
0:06:15,410 --> 0:06:17,360
calculate our coefficients we apply the

175
0:06:17,360 --> 0:06:19,520
it's actually discrete cosine transform

176
0:06:19,520 --> 0:06:21,890
number 2 which is the ones always using

177
0:06:21,890 --> 0:06:25,040
jpg and what that does is calculate the

178
0:06:25,040 --> 0:06:27,050
contribution of each of our cosine waves

179
0:06:27,050 --> 0:06:29,240
that when added together will create

180
0:06:29,240 --> 0:06:31,310
this image exactly right which of these

181
0:06:31,310 --> 0:06:33,260
blocks when multiplied by their

182
0:06:33,260 --> 0:06:34,820
coefficients to tell us how much of each

183
0:06:34,820 --> 0:06:37,310
one we use will add together to create

184
0:06:37,310 --> 0:06:39,439
this exact image so it might be a bit of

185
0:06:39,439 --> 0:06:42,019
a bit of this yeah a lot of that yeah

186
0:06:42,019 --> 0:06:43,759
and none of this one exactly and so

187
0:06:43,759 --> 0:06:45,919
you'll find that all of these will have

188
0:06:45,919 --> 0:06:47,360
some impact on the image it's almost

189
0:06:47,360 --> 0:06:48,679
certain unless the image is completely

190
0:06:48,679 --> 0:06:50,269
flat one of the nice things about JPEG

191
0:06:50,269 --> 0:06:52,129
is these low frequency ones will have a

192
0:06:52,129 --> 0:06:53,239
much bigger effect from the high

193
0:06:53,239 --> 0:06:55,399
frequency data and we also see them

194
0:06:55,399 --> 0:06:57,860
better so that's how we we compress JPEG

195
0:06:57,860 --> 0:07:00,709
so we calculate our DCT two coefficients

196
0:07:00,709 --> 0:07:02,209
and that gives us some slightly

197
0:07:02,209 --> 0:07:05,599
arbitrary values between minus 1024 and

198
0:07:05,599 --> 0:07:07,849
plus 1024 but that's not too much of a

199
0:07:07,849 --> 0:07:09,559
big problem and what we have each of

200
0:07:09,559 --> 0:07:11,449
these represents the weight or the

201
0:07:11,449 --> 0:07:13,459
amount of each of our cosine wave so if

202
0:07:13,459 --> 0:07:15,409
we put this next to here we can say that

203
0:07:15,409 --> 0:07:18,110
if we take this cosine and multiply it

204
0:07:18,110 --> 0:07:20,389
by minus 370 and add it to this one

205
0:07:20,389 --> 0:07:21,889
multiplied by twenty nine point seven

206
0:07:21,889 --> 0:07:23,809
and so on and we do it for all of them

207
0:07:23,809 --> 0:07:25,999
the added sum will be our original image

208
0:07:25,999 --> 0:07:29,419
back again usually this top left

209
0:07:29,419 --> 0:07:30,919
coefficient is much bigger than the

210
0:07:30,919 --> 0:07:32,300
others because this is because it's a

211
0:07:32,300 --> 0:07:33,559
flat and it's actually flat and not a

212
0:07:33,559 --> 0:07:35,329
cosine wave represents the general

213
0:07:35,329 --> 0:07:37,369
intensity of that particular image block

214
0:07:37,369 --> 0:07:38,989
so this is called our direct current

215
0:07:38,989 --> 0:07:41,149
coefficient or DC coefficient all of the

216
0:07:41,149 --> 0:07:42,459
others are alternating current AC

217
0:07:42,459 --> 0:07:45,439
coefficients in practice usually the DC

218
0:07:45,439 --> 0:07:47,089
coefficients are stored separately but

219
0:07:47,089 --> 0:07:48,319
we you know we won't we won't dwell on

220
0:07:48,319 --> 0:07:49,909
that too much the really important

221
0:07:49,909 --> 0:07:51,469
aspect of JPEG that you need you want to

222
0:07:51,469 --> 0:07:52,729
understand is that these coefficients

223
0:07:52,729 --> 0:07:55,219
are often very very small and these ones

224
0:07:55,219 --> 0:07:56,990
are very very big and what that tells us

225
0:07:56,990 --> 0:07:59,479
is that the high frequency cosine waves

226
0:07:59,479 --> 0:08:01,279
don't really contribute very much to the

227
0:08:01,279 --> 0:08:03,289
image for example this one is zero which

228
0:08:03,289 --> 0:08:05,269
means that this cosine wave here is

229
0:08:05,269 --> 0:08:07,039
having no effect on the image at all the

230
0:08:07,039 --> 0:08:08,809
image is essentially not a checkerboard

231
0:08:08,809 --> 0:08:11,360
in any way these ones compared to these

232
0:08:11,360 --> 0:08:13,069
big coefficients here are incredibly

233
0:08:13,069 --> 0:08:15,379
small as well and have very subtle

234
0:08:15,379 --> 0:08:17,509
effects on the actual output pixel data

235
0:08:17,509 --> 0:08:19,309
I mean these weights are so small but if

236
0:08:19,309 --> 0:08:21,319
you took these away the image will be

237
0:08:21,319 --> 0:08:23,569
almost identical and yet we could just

238
0:08:23,569 --> 0:08:25,039
take them away and save all that space

239
0:08:25,039 --> 0:08:27,469
so that's how we do it for next step

240
0:08:27,469 --> 0:08:28,909
after calculating our discrete cosine

241
0:08:28,909 --> 0:08:31,999
transform coefficients is basically try

242
0:08:31,999 --> 0:08:33,319
and remove the ones we don't want we

243
0:08:33,319 --> 0:08:35,539
call the process of removing the high

244
0:08:35,539 --> 0:08:38,240
frequency data quantization hopefully

245
0:08:38,240 --> 0:08:39,199
it'd be easier if I show you a

246
0:08:39,199 --> 0:08:41,419
quantization table this is the standard

247
0:08:41,419 --> 0:08:43,550
JPEG quantization table that represents

248
0:08:43,550 --> 0:08:46,220
a quality of fifty percent so in a JPEG

249
0:08:46,220 --> 0:08:48,470
standard different compressors like the

250
0:08:48,470 --> 0:08:49,880
one used in Photoshop will use different

251
0:08:49,880 --> 0:08:50,830
quantization

252
0:08:50,830 --> 0:08:53,200
depending on how they feel and also what

253
0:08:53,200 --> 0:08:54,970
level of quality you set it out and what

254
0:08:54,970 --> 0:08:58,630
we do is we divide every one of our

255
0:08:58,630 --> 0:09:00,510
coefficients by the corresponding

256
0:09:00,510 --> 0:09:02,980
quantization value and then round to the

257
0:09:02,980 --> 0:09:04,450
nearest integer okay

258
0:09:04,450 --> 0:09:06,040
and you can see already but these ones

259
0:09:06,040 --> 0:09:08,110
are much bigger than these ones so what

260
0:09:08,110 --> 0:09:09,430
essentially happens is these get scaled

261
0:09:09,430 --> 0:09:11,410
by a huge amount usually too close to

262
0:09:11,410 --> 0:09:13,450
zero and then get removed by being set

263
0:09:13,450 --> 0:09:14,620
to zero when we round to the nearest

264
0:09:14,620 --> 0:09:18,610
integer so for example 370 divided by 16

265
0:09:18,610 --> 0:09:22,570
is roughly 23 or minus 23 and the actual

266
0:09:22,570 --> 0:09:25,240
quantized output is this and you can see

267
0:09:25,240 --> 0:09:27,550
but almost all of it's now zero so this

268
0:09:27,550 --> 0:09:29,260
coefficient now no longer has an effect

269
0:09:29,260 --> 0:09:30,700
nor does this one or this one the only

270
0:09:30,700 --> 0:09:32,800
ones that have any effect on our image

271
0:09:32,800 --> 0:09:36,310
are these 9 here and essentially the

272
0:09:36,310 --> 0:09:39,610
argument that we're making is that with

273
0:09:39,610 --> 0:09:42,130
just these 9 we can get pretty much the

274
0:09:42,130 --> 0:09:43,510
exact same image back he won't be

275
0:09:43,510 --> 0:09:44,950
exactly the same that a couple of pixels

276
0:09:44,950 --> 0:09:46,690
will be maybe an intensity level up or

277
0:09:46,690 --> 0:09:49,329
down but when viewed at a normal image

278
0:09:49,329 --> 0:09:51,160
range you know let's say a photograph or

279
0:09:51,160 --> 0:09:52,630
on a monitor it'll look exactly the same

280
0:09:52,630 --> 0:09:55,060
to us so what we then finally do when we

281
0:09:55,060 --> 0:09:56,920
want to output this information into our

282
0:09:56,920 --> 0:09:59,290
file is we essentially list all these in

283
0:09:59,290 --> 0:10:01,149
a long line we then use a Huffman

284
0:10:01,149 --> 0:10:03,550
encoding which for the Belfort is

285
0:10:03,550 --> 0:10:05,920
covered in a video to further compress

286
0:10:05,920 --> 0:10:08,290
this data the way that we serialize this

287
0:10:08,290 --> 0:10:10,390
into our file is in a zigzag fashion so

288
0:10:10,390 --> 0:10:13,300
we start with minus 23 then we go minus

289
0:10:13,300 --> 0:10:16,570
2 minus 21 so we're going up and down up

290
0:10:16,570 --> 0:10:22,089
and down 6 4 0 0 2 1 and so on and the

291
0:10:22,089 --> 0:10:23,829
important thing about this is by doing

292
0:10:23,829 --> 0:10:25,750
this we're going to get a huge list of

293
0:10:25,750 --> 0:10:27,880
noughts all in a row and that is very

294
0:10:27,880 --> 0:10:30,279
easily compressed by Huffman encoding so

295
0:10:30,279 --> 0:10:32,050
we take this table we do this for every

296
0:10:32,050 --> 0:10:34,660
8 by 8 block in our image we vent

297
0:10:34,660 --> 0:10:36,520
serialize them out into a long line and

298
0:10:36,520 --> 0:10:38,110
we use Huffman encoding to shrink them

299
0:10:38,110 --> 0:10:39,730
right down and that's what goes into our

300
0:10:39,730 --> 0:10:42,520
jpg and in all other aspects of JPEG a

301
0:10:42,520 --> 0:10:43,750
really sort of minor format

302
0:10:43,750 --> 0:10:45,399
considerations that's the core of how

303
0:10:45,399 --> 0:10:47,649
the compression works to decompress the

304
0:10:47,649 --> 0:10:49,720
image let's imagine that we've we send

305
0:10:49,720 --> 0:10:51,070
our jpg to someone and they're decode

306
0:10:51,070 --> 0:10:52,810
was trying to read it what we have to do

307
0:10:52,810 --> 0:10:54,310
is the exact opposite of this approach

308
0:10:54,310 --> 0:10:57,760
so we begin by multiplying each of these

309
0:10:57,760 --> 0:11:00,490
values by our quantization table so this

310
0:11:00,490 --> 0:11:02,260
is the same quantization table it's

311
0:11:02,260 --> 0:11:03,910
stored inside the JPEG so we know which

312
0:11:03,910 --> 0:11:04,750
one they you

313
0:11:04,750 --> 0:11:05,680
because if you use a different one on

314
0:11:05,680 --> 0:11:06,760
the way out you're going to ruin your

315
0:11:06,760 --> 0:11:08,320
image so we multiply each of these

316
0:11:08,320 --> 0:11:10,900
values by the specific value in the

317
0:11:10,900 --> 0:11:13,270
quantization table and we get the

318
0:11:13,270 --> 0:11:14,920
coefficients and you can see that

319
0:11:14,920 --> 0:11:16,390
because most of them are nought most of

320
0:11:16,390 --> 0:11:18,100
them on the other side will also not so

321
0:11:18,100 --> 0:11:20,350
none of these are going to contribute to

322
0:11:20,350 --> 0:11:22,390
our image anymore then in reverse we use

323
0:11:22,390 --> 0:11:24,040
discrete cosine transform number three

324
0:11:24,040 --> 0:11:27,100
which is usually just call be the

325
0:11:27,100 --> 0:11:28,420
inverse discrete cosine transform

326
0:11:28,420 --> 0:11:30,250
because it's generally used to inverse

327
0:11:30,250 --> 0:11:31,600
what we did for discrete cosine

328
0:11:31,600 --> 0:11:33,370
transform two and that gives us our

329
0:11:33,370 --> 0:11:35,530
shifted block back again which of course

330
0:11:35,530 --> 0:11:38,380
we then add 198 to every value and we

331
0:11:38,380 --> 0:11:40,600
have our output block and there it is so

332
0:11:40,600 --> 0:11:42,670
that's the complete JPEG compression

333
0:11:42,670 --> 0:11:44,950
using discrete cosine transform if we

334
0:11:44,950 --> 0:11:46,720
look at our input block and our output

335
0:11:46,720 --> 0:11:50,050
block next to each other so there we go

336
0:11:50,050 --> 0:11:52,090
we can see that there are some changes

337
0:11:52,090 --> 0:11:53,380
in these values but it's actually pretty

338
0:11:53,380 --> 0:11:55,120
close these are sort of change of

339
0:11:55,120 --> 0:11:56,530
Krista's gone up a few intensity levels

340
0:11:56,530 --> 0:11:58,150
this is the same this has gone down for

341
0:11:58,150 --> 0:12:00,790
but these are for naught to 255 no one's

342
0:12:00,790 --> 0:12:02,980
going to see that kind of difference and

343
0:12:02,980 --> 0:12:05,170
this is a 50% so you can do a lot less

344
0:12:05,170 --> 0:12:07,900
than this if you have your JPEG quality

345
0:12:07,900 --> 0:12:09,820
set higher and smaller values in your

346
0:12:09,820 --> 0:12:11,890
quantization table so in the JPEG

347
0:12:11,890 --> 0:12:13,960
standard this is the quantization table

348
0:12:13,960 --> 0:12:15,490
they give you this is actually the

349
0:12:15,490 --> 0:12:17,920
quantization table for luminosity not

350
0:12:17,920 --> 0:12:19,210
for chrominance they have a different

351
0:12:19,210 --> 0:12:20,950
one for chromatids which is much has

352
0:12:20,950 --> 0:12:23,500
much higher penalties on the high

353
0:12:23,500 --> 0:12:25,840
frequency because if high frequency data

354
0:12:25,840 --> 0:12:27,490
is not very important in gray it's even

355
0:12:27,490 --> 0:12:29,350
less important given that we don't see

356
0:12:29,350 --> 0:12:31,060
color that well one thing you can do to

357
0:12:31,060 --> 0:12:33,820
immediately increase the quality of oval

358
0:12:33,820 --> 0:12:35,860
JPEG compression day is preserve as much

359
0:12:35,860 --> 0:12:38,080
image as possible is to have all of

360
0:12:38,080 --> 0:12:39,790
these values in a quantization table if

361
0:12:39,790 --> 0:12:42,610
we divide all of these values by 2 then

362
0:12:42,610 --> 0:12:43,720
essentially everything is being scaled

363
0:12:43,720 --> 0:12:45,730
by less all of these high frequency

364
0:12:45,730 --> 0:12:47,320
coefficients won't necessarily be

365
0:12:47,320 --> 0:12:48,820
rounded to 0 they might be rounded to

366
0:12:48,820 --> 0:12:50,110
one or two and they'll still have a

367
0:12:50,110 --> 0:12:51,370
little bit of an effect on the other

368
0:12:51,370 --> 0:12:53,110
hand if we increase the values in these

369
0:12:53,110 --> 0:12:54,700
quantization tables we're essentially

370
0:12:54,700 --> 0:12
operating a lower JPEG quality setting

371
0:12 --> 0:12:59,770
this is the approach that the JPEG

372
0:12:59,770 --> 0:13:02,740
standard uses in other software they may

373
0:13:02,740 --> 0:13:05,110
have their own quantization tables in

374
0:13:05,110 --> 0:13:07,030
fact as far as I know Photoshop I think

375
0:13:07,030 --> 0:13:09,010
they have 12 quality settings and they

376
0:13:09,010 --> 0:13:10,330
have different quantization tables for

377
0:13:10,330 --> 0:13:11,920
most of both settings and different

378
0:13:11,920 --> 0:13:14,110
sampling frequencies so lots of

379
0:13:14,110 --> 0:13:15,070
different things that they've decided

380
0:13:15,070 --> 0:13:17,410
make for pretty good scale bar but a

381
0:13:17,410 --> 0:13:17,860
user

382
0:13:17,860 --> 0:13:20,350
News and all of those settings are then

383
0:13:20,350 --> 0:13:22,149
stored in the header of the file yeah

384
0:13:22,149 --> 0:13:23,680
between these parties you'll get a small

385
0:13:23,680 --> 0:13:24,910
block that says these are the

386
0:13:24,910 --> 0:13:26,620
quantization tables and Huffman coding

387
0:13:26,620 --> 0:13:29,140
tables that we used so that everyone can

388
0:13:29,140 --> 0:13:31,209
reverse that process if you don't know

389
0:13:31,209 --> 0:13:33,010
what the quantization table was you

390
0:13:33,010 --> 0:13:34,540
might be multiplying your encoded

391
0:13:34,540 --> 0:13:36,310
coefficients by different values and get

392
0:13:36,310 --> 0:13:37,510
something completely different out at

393
0:13:37,510 --> 0:13:37,839
the end

394
0:13:37,839 --> 0:13:39,579
what will it be just different colors it

395
0:13:39,579 --> 0:13:40,600
could be a completely different image

396
0:13:40,600 --> 0:13:42,399
you've divided by certain numbers you

397
0:13:42,399 --> 0:13:43,810
need to multiply again by those numbers

398
0:13:43,810 --> 0:13:45,250
to inverse the process otherwise you

399
0:13:45,250 --> 0:13:47,110
might get nonsense back out so going

400
0:13:47,110 --> 0:13:49,269
back to the original diagram that I drew

401
0:13:49,269 --> 0:13:52,329
this is sort of the overview of JPEG we

402
0:13:52,329 --> 0:13:54,010
start with our image we've transformed

403
0:13:54,010 --> 0:13:56,920
our color and then our DCT essentially

404
0:13:56,920 --> 0:13:58,690
removes the high frequency information

405
0:13:58,690 --> 0:14:00,730
in our image so if we've got an image

406
0:14:00,730 --> 0:14:02,070
where lots of high frequency information

407
0:14:02,070 --> 0:14:04,329
high frequency pixel changes are

408
0:14:04,329 --> 0:14:06,160
happening that might get significantly

409
0:14:06,160 --> 0:14:07,600
compressed but it might also look worse

410
0:14:07,600 --> 0:14:10,209
okay but if but in most photographs

411
0:14:10,209 --> 0:14:12,579
certainly over an 8 by 8 image block you

412
0:14:12,579 --> 0:14:13,779
won't be finding that much higher

413
0:14:13,779 --> 0:14:15,760
frequency information and so we can

414
0:14:15,760 --> 0:14:17,800
quite safely get rid of a lot of it we

415
0:14:17,800 --> 0:14:19,839
calculate our DCT coefficients we

416
0:14:19,839 --> 0:14:21,220
quantize them to remove the high

417
0:14:21,220 --> 0:14:23,079
frequency ones and then we use Huffman

418
0:14:23,079 --> 0:14:25,149
encoding to compress that into a

419
0:14:25,149 --> 0:14:27,100
manageable small stream that we put into

420
0:14:27,100 --> 0:14:28,779
our JPEG file and then the reverse of

421
0:14:28,779 --> 0:14:31,240
that process is exactly that we decode

422
0:14:31,240 --> 0:14:33,640
the Huffman tables the Huffman encoding

423
0:14:33,640 --> 0:14:37,149
we unquantifiable all our values in the

424
0:14:37,149 --> 0:14:39,190
quantization table and then we apply the

425
0:14:39,190 --> 0:14:41,800
inverse dct to obtain our block back and

426
0:14:41,800 --> 0:14:43,690
we do this for every little 8x8 image in

427
0:14:43,690 --> 0:14:46,540
our in our picture if our image isn't a

428
0:14:46,540 --> 0:14:49,180
multiple of 8 then we have to add some

429
0:14:49,180 --> 0:14:50,980
padding bytes at the end to make it work

430
0:14:50,980 --> 0:14:52,660
usually we could duplicate the ones near

431
0:14:52,660 --> 0:14:54,220
the edge so but it kind of has this

432
0:14:54,220 --> 0:14:56,709
coherent or you might do something a

433
0:14:56,709 --> 0:15:00,970
little bit smarter text violates our

434
0:15:00,970 --> 0:15:03,010
assumptions that high frequency

435
0:15:03,010 --> 0:15:04,570
information doesn't contribute a lot to

436
0:15:04,570 --> 0:15:06,370
the image so this is a small 8 by 8

437
0:15:06,370 --> 0:15:08,680
image this is in a sent text this is V

438
0:15:08,680 --> 0:15:10,600
computer file see it's little triangular

439
0:15:10,600 --> 0:15:12,810
brackets


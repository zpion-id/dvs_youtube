1
0:00:00,240 --> 0:00:02,560
linux is a popular operating system for

2
0:00:02,560 --> 0:00:04,560
server administration because it's

3
0:00:04,560 --> 0:00:06,960
secure stable and flexible in this

4
0:00:06,960 --> 0:00:09,679
course sean powers from cbt nuggets will

5
0:00:09,679 --> 0:00:11,759
detail every part of configuring

6
0:00:11,759 --> 0:00:14,639
monitoring and supporting a server setup

7
0:00:14,639 --> 0:00:16,880
that runs the linux operating system

8
0:00:16,880 --> 0:00:18,320
this course will teach you everything

9
0:00:18,320 --> 0:00:20,080
you need to know to configure linux

10
0:00:20,080 --> 0:00:22,480
servers including the boot process

11
0:00:22,480 --> 0:00:24,640
kernel modules network connection

12
0:00:24,640 --> 0:00:28,080
parameters localization groups and more

13
0:00:28,080 --> 0:00:31,550
let's get started

14
0:00:31,550 --> 0:00:34,320
[Music]

15
0:00:34,320 --> 0:00:36,960
bios and uefi are two tools that

16
0:00:36,960 --> 0:00:39,600
basically do the same sort of thing but

17
0:00:39,600 --> 0:00:42,079
they can be a little bit confusing when

18
0:00:42,079 --> 0:00:44,640
it comes to how do you know which one to

19
0:00:44,640 --> 0:00:46,800
use on a computer and and do i need to

20
0:00:46,800 --> 0:00:49,280
support one or the other or both or the

21
0:00:49,280 --> 0:00:51,680
nice thing is you usually either have

22
0:00:51,680 --> 0:00:55,360
bios or uefi now bios is an older

23
0:00:55,360 --> 0:00:57,760
program it just stands for basic input

24
0:00:57,760 --> 0:01:00,879
output system whereas uefi is the new

25
0:01:00,879 --> 0:01:02,640
kit on the block and this stands for

26
0:01:02,640 --> 0:01:05,519
unified extensible firmware interface

27
0:01:05,519 --> 0:01:07,920
which sounds confusing but really it's

28
0:01:07,920 --> 0:01:10,640
just the the way that we can interact

29
0:01:10,640 --> 0:01:12,560
between the hardware and the operating

30
0:01:12,560 --> 0:01:15,439
system now let's say that we have two

31
0:01:15,439 --> 0:01:17,040
different vehicles now these are two

32
0:01:17,040 --> 0:01:19,920
obviously very very different vehicles

33
0:01:19,920 --> 0:01:22,080
one of them is a sports car and one of

34
0:01:22,080 --> 0:01:24,720
them is an awesome yellow volkswagen

35
0:01:24,720 --> 0:01:27,119
beetle i actually have a volkswagen

36
0:01:27,119 --> 0:01:29,119
beetle that's yellow like this and it's

37
0:01:29,119 --> 0:01:30,079
awesome

38
0:01:30,079 --> 0:01:31,520
but nonetheless you could be a sports

39
0:01:31,520 --> 0:01:33,680
car person either way even though

40
0:01:33,680 --> 0:01:35,920
they're ridiculously different vehicles

41
0:01:35,920 --> 0:01
they both have some common interfaces

42
0:01 --> 0:01:40,400
right they're both going to have brake

43
0:01:40,400 --> 0:01:42,640
pedals they're both going to have

44
0:01:42,640 --> 0:01:44,240
steering wheels

45
0:01:44,240 --> 0:01
they're both going to have windshields

46
0:01 --> 0:01:48,479
and those interfaces are fairly common

47
0:01:48,479 --> 0:01:51,360
across all vehicles now the brakes in

48
0:01:51,360 --> 0:01:52,799
the underlying system are going to be

49
0:01:52,799 --> 0:01:54,560
different this sports car probably has

50
0:01:54,560 --> 0:01:56,799
really nice disc brakes whereas these

51
0:01:56,799 --> 0:01:59,600
old volkswagens have drum brakes now

52
0:01:59,600 --> 0:02:00,799
drum brakes aren't as good but the

53
0:02:00,799 --> 0:02:03,520
interface itself is very very similar

54
0:02:03,520 --> 0:02:05,759
you push the brake pedal and you stop

55
0:02:05,759 --> 0:02:09,520
and that's kind of what bios and uefi

56
0:02:09,520 --> 0:02:11,280
are they're interfaces between the

57
0:02:11,280 --> 0:02:13,920
hardware and the operating system itself

58
0:02:13,920 --> 0:02:15,680
now they do work a little bit

59
0:02:15,680 --> 0:02:17,599
differently so here we have our hard

60
0:02:17,599 --> 0:02:20,720
drive on our system now using bios like

61
0:02:20,720 --> 0:02:23,200
the old method of booting a computer you

62
0:02:23,200 --> 0:02:26,480
would have like the very first sector on

63
0:02:26,480 --> 0:02:28,720
the hard drive would be the boot sector

64
0:02:28,720 --> 0:02:30,720
and that's where the mbr the master boot

65
0:02:30,720 --> 0:02:33,040
record would live and then that would

66
0:02:33,040 --> 0:02:35,200
tell the computer where the partitions

67
0:02:35,200 --> 0:02:37,360
are and you point it to where to boot

68
0:02:37,360 --> 0:02:39,040
now there's a lot of limitations with

69
0:02:39,040 --> 0:02:41,120
bios you could only have

70
0:02:41,120 --> 0:02:43,840
four partitions using the bios and mbr

71
0:02:43,840 --> 0:02:46,080
combination there are some hacks to get

72
0:02:46,080 --> 0:02:47,519
around that you know they would take a

73
0:02:47,519 --> 0:02:49,280
partition and do extended partitions

74
0:02:49,280 --> 0:02:50,959
inside that but that's a whole nother

75
0:02:50,959 --> 0:02:52,879
nugget still there was this limitation

76
0:02:52,879 --> 0:02:55,519
also a limitation of size with the drive

77
0:02:55,519 --> 0:02:58,239
how much this boot sector or this master

78
0:02:58,239 --> 0:02:59,920
boot record can actually reference it

79
0:02:59,920 --> 0:03:01,840
can be a small amount like two terabytes

80
0:03:01,840 --> 0:03:05,440
instead of exabytes of data and so uefi

81
0:03:05,440 --> 0:03:08,480
is a replacement for the bios technology

82
0:03:08,480 --> 0:03:11,040
and rather than just have the single

83
0:03:11,040 --> 0:03:12,879
boot sector what it does is there's an

84
0:03:12,879 --> 0:03:14,800
entire partition

85
0:03:14,800 --> 0:03:18,159
on the system and that partition is

86
0:03:18,159 --> 0:03:20,239
where all of the boot code is for

87
0:03:20,239 --> 0:03
whatever operating systems might be on

88
0:03 --> 0:03:23,200
the computer so rather than just the

89
0:03:23,200 --> 0:03:24,959
boot sector pointing to

90
0:03:24,959 --> 0:03:26,400
you know the rest of the hard drive this

91
0:03:26,400 --> 0:03:27,760
is an actual

92
0:03:27,760 --> 0:03:29,920
specialized partition

93
0:03:29,920 --> 0:03:32,400
on the computer and that's where the

94
0:03:32,400 --> 0:03:35,440
uefi code is stored also it uses a

95
0:03:35,440 --> 0:03:37,040
different partition scheme so you can

96
0:03:37,040 --> 0:03:39,360
have tons and tons of partitions and it

97
0:03:39,360 --> 0:03:41,280
can address a much larger hard drive

98
0:03:41,280 --> 0:03:42,799
there's also other things like secure

99
0:03:42,799 --> 0:03:45,360
boot that uefi supports that bios

100
0:03:45,360 --> 0:03:48,400
doesn't basically just know that uefi is

101
0:03:48,400 --> 0:03:51,599
the replacement for bios it replaces the

102
0:03:51,599 --> 0:03
functionality of connecting the hardware

103
0:03 --> 0:03:56,720
to the software of the operating system

104
0:03:56,720 --> 0:03:58,319
now the good news is if you have a

105
0:03:58,319 --> 0:04:00,400
computer that's older or even some new

106
0:04:00,400 --> 0:04:02,879
ones so come with bios you can still get

107
0:04:02,879 --> 0:04:04,879
around a lot of the limitations because

108
0:04:04,879 --> 0:04:06,560
there are hacks that will let you use

109
0:04:06,560 --> 0:04:08,640
really big hard drives or hacks that

110
0:04:08,640 --> 0:04:10,400
will allow you to do some of the things

111
0:04:10,400 --> 0:04:12,080
that you can't normally do out of the

112
0:04:12,080 --> 0:04:14,640
box but most computers now are coming

113
0:04:14,640 --> 0:04:18,479
with uefi and from a from an installer

114
0:04:18,479 --> 0:04:20,079
point of view there's very little you

115
0:04:20,079 --> 0:04:22,320
have to do because the operating system

116
0:04:22,320 --> 0:04:24,639
is going to say okay i was booted using

117
0:04:24,639 --> 0:04:26,800
uefi so i'm going to create a partition

118
0:04:26,800 --> 0:04:28,880
a uefi partition and i'm going to put

119
0:04:28,880 --> 0:04:31,600
all the boot code in there so from your

120
0:04:31,600 --> 0:04:33,600
standpoint from the end user or the

121
0:04:33,600 --> 0:04:35,759
installer standpoint there's very little

122
0:04:35,759 --> 0:04
difference but under the hood a lot of

123
0:04 --> 0:04:40,080
new cool stuff is going on and that's

124
0:04:40,080 --> 0:04:42,240
why uefi is kind of the way of the

125
0:04:42,240 --> 0:04:43,919
future

126
0:04:43,919 --> 0:04:46,400
remember when you were a kid and in the

127
0:04:46,400 --> 0:04:48,320
doctor's waiting room there were these

128
0:04:48,320 --> 0:04:50,800
magazines and one of the games inside

129
0:04:50,800 --> 0:04:53,600
the magazines was that you had to find

130
0:04:53,600 --> 0:04:55,759
the difference in one of a bunch of

131
0:04:55,759 --> 0:04:57,680
similar looking

132
0:04:57,680 --> 0:04:59,440
figures like for example here are what

133
0:04:59,440 --> 0:05:02,400
do i have nine different jokers and one

134
0:05:02,400 --> 0:05:04,400
of them is a little different now it's

135
0:05:04,400 --> 0:05:06,160
not terribly difficult to see which one

136
0:05:06,160 --> 0:05:07,680
is different here if you watched while

137
0:05:07,680 --> 0:05:10,240
they appeared this one has a tiny little

138
0:05:10,240 --> 0:05
spot right there on his shirt that's

139
0:05 --> 0:05:14,160
different than all the others so we've

140
0:05:14,160 --> 0:05:15,680
been able to identify it but you can see

141
0:05:15,680 --> 0:05:18,639
they're very very very very similar well

142
0:05:18,639 --> 0:05:21,759
the same thing is true about grub

143
0:05:21,759 --> 0:05:24,320
and grub 2 which of course is the next

144
0:05:24,320 --> 0:05:26,479
iteration of grub now grub stands for

145
0:05:26,479 --> 0:05:28,800
grand unified boot loader but really

146
0:05:28,800 --> 0:05:30,560
it's just the way that the computer

147
0:05:30,560 --> 0:05:33,360
transitions from bios or uefi booting up

148
0:05:33,360 --> 0:05:35,759
conditions into the actual operating

149
0:05:35,759 --> 0:05:37,680
system itself it's what tells the

150
0:05:37,680 --> 0:05:39,680
computer okay where's my partitions and

151
0:05:39,680 --> 0:05:41,840
stuff like that it's very easy to

152
0:05:41,840 --> 0:05:44,160
confuse which is which on your system

153
0:05:44,160 --> 0:05:46,160
which seems silly but it can be very

154
0:05:46,160 --> 0:05:48,320
very embarrassing when you sit down at a

155
0:05:48,320 --> 0:05:50,880
system you're like okay so is this

156
0:05:50,880 --> 0:05:54,080
running grub or grub 2 because they do

157
0:05:54,080 --> 0:05
the same thing right they both boot the

158
0:05 --> 0:05:58,639
computer but they do have some minor

159
0:05:58,639 --> 0:06:01,520
nuanced differences grub of course is

160
0:06:01,520 --> 0:06:03,199
older you probably guess that by it not

161
0:06:03,199 --> 0:06:05,600
having a 2 at the end of its name but

162
0:06:05,600 --> 0:06:07,840
grub is often called grub legacy because

163
0:06:07,840 --> 0:06:10,400
it is older but it's still on a few

164
0:06:10,400 --> 0:06:12,160
operating systems not many but a few i

165
0:06:12,160 --> 0:06:14,880
think slackware still uses grub legacy

166
0:06:14,880 --> 0:06:17,039
now the biggest and easiest way to

167
0:06:17,039 --> 0:06:19,199
figure out if you're dealing with grub

168
0:06:19,199 --> 0:06
or grub 2 on your system is to look

169
0:06 --> 0:06:26,400
inside the boot grub folder and if you

170
0:06:26,400 --> 0:06:27,680
see

171
0:06:27,680 --> 0:06:29,759
menu.lst

172
0:06:29,759 --> 0:06:32,960
or grub.com that means you're running

173
0:06:32,960 --> 0:06:35,919
grub legacy because grub 2 does not have

174
0:06:35,919 --> 0:06:38,479
those configuration files grub 2 has

175
0:06:38,479 --> 0:06:41,680
this configuration file grub.cfg

176
0:06:41,680 --> 0:06:44,120
now it's easy to confuse

177
0:06:44,120 --> 0:06:46,639
cfg.com so i always just look for

178
0:06:46,639 --> 0:06
menu.lst if that exists you're on grub

179
0:06 --> 0:06:52,319
legacy now the thing about grub is it's

180
0:06:52,319 --> 0:06:54,479
kind of difficult to modify it was uh

181
0:06:54,479 --> 0:06:57,039
it's very easy for automated systems

182
0:06:57,039 --> 0:06:58,400
like when you install a new kernel to

183
0:06:58,400 --> 0:07:00,080
figure out how to put how to you know

184
0:07:00,080 --> 0:07:02,160
update the menu and update the boot code

185
0:07:02,160 --> 0:07:03,680
but it's really difficult for the end

186
0:07:03,680 --> 0:07:06,240
user to modify that stuff and the boot

187
0:07:06,240 --> 0:07:08,240
menu usually when it's booting up it

188
0:07:08,240 --> 0:07:09,680
says you know press something in 10

189
0:07:09,680 --> 0:07:11,280
seconds in order to

190
0:07:11,280 --> 0:07:12,960
change the way it boots so this usually

191
0:07:12,960 --> 0:07:15,039
just appears for you and you can see it

192
0:07:15,039 --> 0:07:16,400
now grub 2

193
0:07:16,400 --> 0:07:18,560
is a lot more customizable in fact if

194
0:07:18,560 --> 0:07:21,199
you go into the etc default grub file

195
0:07:21,199 --> 0:07:23,199
this is a configuration file that's easy

196
0:07:23,199 --> 0:07:25,360
to read and it's going to allow you to

197
0:07:25,360 --> 0:07:26,960
change the way that it looks when it

198
0:07:26,960 --> 0:07:28,880
boots up now grub2 also has a ton of

199
0:07:28,880 --> 0:07:31,199
other cool features it can boot from an

200
0:07:31,199 --> 0:07:34,319
iso file from a usb disk it can name or

201
0:07:34,319 --> 0:07
it can identify hard drives based on

202
0:07 --> 0:07:38,800
their uuid or their device like dev sda

203
0:07:38,800 --> 0:07:41,120
so it's a lot more advanced than grub

204
0:07:41,120 --> 0:07:43,360
one but one of the you know the

205
0:07:43,360 --> 0:07:45,120
advancements that's also a frustration

206
0:07:45,120 --> 0:07:46,800
is that boot menu that i talked about

207
0:07:46,800 --> 0:07:49,360
that comes up with grub it's hidden with

208
0:07:49,360 --> 0:07:51,360
grub 2. so it just goes right to the

209
0:07:51,360 --> 0:07:53,440
login screen you never see anything from

210
0:07:53,440 --> 0:07:55,440
grub 2. and if you don't know this

211
0:07:55,440 --> 0:07:57,360
little trick it can be a real bugger to

212
0:07:57,360 --> 0:07:59,120
get into that menu if you want to change

213
0:07:59,120 --> 0:08:01,120
something during boot so be sure to just

214
0:08:01,120 --> 0:08:02,400
hold down the shift key when the

215
0:08:02,400 --> 0:08:04,479
computer is booting up and then boom all

216
0:08:04,479 --> 0:08:06,560
of a sudden you're going to get into the

217
0:08:06,560 --> 0:08:09,680
grub 2 interactive menu that you can

218
0:08:09,680 --> 0:08:11,840
change boot code things on the fly it's

219
0:08:11,840 --> 0:08:13,280
really really cool i'll show you what i

220
0:08:13,280 --> 0:08:15,199
mean but it's not difficult once you

221
0:08:15,199 --> 0:08
know if you have grub or grub 2 grub 2

222
0:08 --> 0:08:19,520
which allows you to do a lot more

223
0:08:19,520 --> 0:08:21,599
configuration stuff now i'm here on an

224
0:08:21,599 --> 0:08:24,960
ubuntu system this has grub 2 and if we

225
0:08:24,960 --> 0:08:27,440
were to look at let's just look at it

226
0:08:27,440 --> 0:08:29,520
etc default

227
0:08:29,520 --> 0:08:31,199
grub we're going to see this is just a

228
0:08:31,199 --> 0:08:33,120
configuration file we can change these

229
0:08:33,120 --> 0:08:35,519
things once you make a change you do

230
0:08:35,519 --> 0:08:37,279
have to do sudo

231
0:08:37,279 --> 0:08:40,560
update grub you do that it's going to

232
0:08:40,560 --> 0:08:42,959
update the boot code inside the boot

233
0:08:42,959 --> 0:08:44,800
folder and if we look in that boot

234
0:08:44,800 --> 0:08:47,440
folder so go into boot

235
0:08:47,440 --> 0:08:50,880
grub type ls i look at that grub dot cfg

236
0:08:50,880 --> 0:08:53,120
there's no menu.lst so we know that this

237
0:08:53,120 --> 0:08:55,440
is grub 2. so that's how you manage

238
0:08:55,440 --> 0:08:57,120
things in grub 2. i'll show you really

239
0:08:57,120 --> 0:08:58,880
quickly before we end this is a computer

240
0:08:58,880 --> 0:09:00,720
that's turned off if i start this

241
0:09:00,720 --> 0:09:03,200
computer and hold down the shift key as

242
0:09:03,200 --> 0:09:05,279
long as i hold down the shift key boom

243
0:09:05,279 --> 0:09:06,880
we get this menu but if i don't hold

244
0:09:06,880 --> 0:09:08,959
that we don't see any menu

245
0:09:08,959 --> 0:09:11,279
for us to interact with grub at all now

246
0:09:11,279 --> 0:09:13,680
figuring out if you have grub or grub 2

247
0:09:13,680 --> 0:09:15,200
can be a little bit challenging if you

248
0:09:15,200 --> 0:09:16,720
don't know that simple trick to look for

249
0:09:16,720 --> 0:09:20,080
menu.lst but they both do the same thing

250
0:09:20,080 --> 0:09:22,080
they tell the computer how to boot up

251
0:09:22,080 --> 0:09:23,279
and how to mount its different

252
0:09:23,279 --> 0:09:25,519
partitions it's just that grub 2 is

253
0:09:25,519 --> 0:09:27,360
definitely an advancement it's more

254
0:09:27,360 --> 0:09:29,839
configurable it does more things and

255
0:09:29,839 --> 0:09:31,839
it's easier for the end user to manage i

256
0:09:31,839 --> 0:09:33,360
hope this has been informative for you

257
0:09:33,360 --> 0:09:35,279
and i'd like to thank you for viewing

258
0:09:35,279 --> 0:09:38,240
linux is so flexible it can boot from an

259
0:09:38,240 --> 0:09:40,480
incredible number of

260
0:09:40,480 --> 0:09:42,959
methods or sources now there are several

261
0:09:42,959 --> 0:09:44,320
different things we need to understand

262
0:09:44,320 --> 0:09:46,399
about the boot processes like is it

263
0:09:46,399 --> 0:09
hardware based or is it software based

264
0:09 --> 0:09:49,120
and i'll tell you what i mean about that

265
0:09:49,120 --> 0:09:50,959
in a minute but there are just this

266
0:09:50,959 --> 0:09
multitude of ways that a linux system

267
0:09 --> 0:09
can boot it can boot over pxe or pixie

268
0:09 --> 0:09:57,519
boot if you haven't seen that it's just

269
0:09:57,519 --> 0:09:58,800
the coolest thing ever it's when it

270
0:09:58,800 --> 0:10:00,959
boots up completely over the network we

271
0:10:00,959 --> 0:10:03,920
can boot from usb from cd ipixi is a

272
0:10:03,920 --> 0:10:05,760
more advanced version of pixi i'll talk

273
0:10:05,760 --> 0:10:07,920
about that too and then iso images just

274
0:10:07,920 --> 0:10:10,079
like the dot iso file you can actually

275
0:10:10,079 --> 0:10:12,240
make a grub 2 entry that will boot

276
0:10:12,240 --> 0:10:14,480
directly from the iso even though you

277
0:10:14,480 --> 0:10:16,720
don't have it burned to a disk or to a

278
0:10:16,720 --> 0:10:18,880
usb drive it can live on your system and

279
0:10:18,880 --> 0:10:21,040
you can have a grub menu item that boots

280
0:10:21,040 --> 0:10:23,360
directly to that iso image it's really

281
0:10:23,360 --> 0:10:25,120
flexible what it can do but that

282
0:10:25,120 --> 0:10:26,959
hardware software thing i wanted to talk

283
0:10:26,959 --> 0:10:28,959
about because where the boot process is

284
0:10:28,959 --> 0:10:31,040
taking place is really important some of

285
0:10:31,040 --> 0:10:33,600
it is linux specific some of it is not

286
0:10:33,600 --> 0:10:34,720
so first of all let's talk about the

287
0:10:34,720 --> 0:10:36,640
hardware things now when i say hardware

288
0:10:36,640 --> 0:10:39,120
i mean the bios or the uefi the part

289
0:10:39,120 --> 0:10:41,360
that takes place before linux is ever

290
0:10:41,360 --> 0:10:43,839
introduced and pxe is one of those

291
0:10:43,839 --> 0:10:44,720
things

292
0:10:44,720 --> 0:10:47,440
pxc which stands for pre-boot execution

293
0:10:47,440 --> 0:10:50,640
environment is the way that the hardware

294
0:10:50,640 --> 0:10:53,120
says okay i don't see a hard drive or

295
0:10:53,120 --> 0:10:54,720
i'm not set up to use a hard drive so

296
0:10:54,720 --> 0:10:56,959
i'm going to query the network and it

297
0:10:56,959 --> 0:11:00,079
just queries a dhcp server and the dhcp

298
0:11:00,079 --> 0:11:03,600
server responds with not only an ip

299
0:11:03,600 --> 0:11:05,519
address which is what dhcp servers

300
0:11:05,519 --> 0:11:08,399
normally do but also a boot file and a

301
0:11:08,399 --> 0:11:11,519
tftp location a tftp server is just a

302
0:11:11,519 --> 0:11:14,160
place you can store files on a network

303
0:11:14,160 --> 0:11:16,399
and then basically the computer then

304
0:11:16,399 --> 0:11:18,160
downloads that

305
0:11:18,160 --> 0:11:20,959
image that boot image from the tftp

306
0:11:20,959 --> 0:11:22,399
server and that's where linux comes into

307
0:11:22,399 --> 0:11:25,279
play that kernel or that boot file is

308
0:11:25,279 --> 0:11:27,519
the linux kernel so it downloads it off

309
0:11:27,519 --> 0:11
the internet or off the internet um off

310
0:11 --> 0:11:33,120
of your local network and then it puts

311
0:11:33,120 --> 0:11:35,360
it in memory and boots itself from there

312
0:11:35,360 --> 0:11:38,560
so pxe starts as just a hardware thing

313
0:11:38,560 --> 0:11:40,560
and then turns into a software there's

314
0:11:40,560 --> 0:11:43,920
also ipxc which is very similar but

315
0:11:43,920 --> 0:11:46,800
instead of using tftp to download that

316
0:11:46,800 --> 0:11
thing it allows you to use http which is

317
0:11 --> 0:11:52,160
faster and usually more reliable than

318
0:11:52,160 --> 0:11:54,560
the old-fashioned tftp but it's very

319
0:11:54,560 --> 0:11:57,040
similar in concept ipxc if your computer

320
0:11:57,040 --> 0:11:59,760
supports it then usb this is also right

321
0:11:59,760 --> 0:12:01,519
on the hardware now the hardware

322
0:12:01,519 --> 0:12:04,160
determines exactly how to boot from the

323
0:12:04,160 --> 0:12:07,040
usb but on the usb itself is where the

324
0:12:07,040 --> 0:12:09,760
linux code is right so the hardware

325
0:12:09,760 --> 0:12:11,680
knows that it can boot from usb same

326
0:12:11,680 --> 0:12:13,680
thing with cd and to be quite honest

327
0:12:13,680 --> 0:12:15,839
same thing with a hard drive right the

328
0:12:15,839 --> 0:12:18,320
hard drive is booted too because the

329
0:12:18,320 --> 0:12:20,320
computer itself understands how to do

330
0:12:20,320 --> 0:12:22,639
that but when under linux comes into

331
0:12:22,639 --> 0:12:24,399
play we'll say the software side of

332
0:12:24,399 --> 0:12:25,440
things

333
0:12:25,440 --> 0:12:28,399
this is once it loads into linux linux

334
0:12:28,399 --> 0:12:31,200
does some things on its own like the iso

335
0:12:31,200 --> 0:12:33,839
booting with grub 2 that's after linux

336
0:12:33,839 --> 0:12:35,680
starts right or after grub starts it

337
0:12:35,680 --> 0:12:38,240
says okay i'm in grub now what are we

338
0:12:38,240 --> 0:12:40,320
going to do we're going to either mount

339
0:12:40,320 --> 0:12:42,560
a partition or we're going to look at

340
0:12:42,560 --> 0:12:45,680
this iso file and actually use that as

341
0:12:45,680 --> 0:12:47,519
our operating system just like it was

342
0:12:47,519 --> 0:12:50,160
burned to a cd so some of this stuff is

343
0:12:50,160 --> 0:12:52,079
software this is where you like select a

344
0:12:52,079 --> 0:12:54,079
kernel this is where you can have mem

345
0:12:54,079 --> 0:12:56,480
test so a lot of the stuff is done in

346
0:12:56,480 --> 0:12:58,880
software but most things actually all

347
0:12:58,880 --> 0:13:00,240
things have to start in the hardware

348
0:13:00,240 --> 0:13:02,079
otherwise you're never going to you know

349
0:13:02,079 --> 0:13:03,200
get to the point where the software

350
0:13:03,200 --> 0:13:05,200
takes control but it's important to know

351
0:13:05,200 --> 0:13:06,800
that pxe

352
0:13:06,800 --> 0:13:09,920
ipxc these are not linux specific boot

353
0:13:09,920 --> 0:13:11,440
methods these are boot methods the

354
0:13:11,440 --> 0:13:13,440
computer supports that linux also

355
0:13:13,440 --> 0:13:15,600
supports in that they can provide the

356
0:13:15,600 --> 0:13:17,279
boot file so i don't want you to confuse

357
0:13:17,279 --> 0:13:19,760
pxe network booting with something

358
0:13:19,760 --> 0:13:22,399
specific to linux same with usb and cd

359
0:13:22,399 --> 0:13:25,680
we can boot windows from usb or cds

360
0:13:25,680 --> 0:13:27,200
and it works you know because the

361
0:13:27,200 --> 0:13:29,360
hardware supports it if i'm honest

362
0:13:29,360 --> 0:13:31,360
probably the most fun way to boot a

363
0:13:31,360 --> 0:13:34,079
computer is using pxe only because

364
0:13:34,079 --> 0:13:35,760
there's no media right it just boots

365
0:13:35,760 --> 0:13:37,680
directly off the network and for some

366
0:13:37,680 --> 0:13:39,839
reason that's just really awesome to to

367
0:13:39,839 --> 0:13:42,240
be a part of it's really awesome to see

368
0:13:42,240 --> 0:13:44,240
but there are multiple ways that you can

369
0:13:44,240 --> 0:13:46,160
boot linux and it's important to know

370
0:13:46,160 --> 0:13:48,160
that they're all there it's okay if you

371
0:13:48,160 --> 0:13:50,320
don't know exactly how to you know boot

372
0:13:50,320 --> 0:13:53,120
from an iso file using grub 2. anybody's

373
0:13:53,120 --> 0:13:54,880
going to have to google the specifics of

374
0:13:54,880 --> 0:13:56,880
that in order to make it work but

375
0:13:56,880 --> 0:13:58,800
knowing all these different processes

376
0:13:58,800 --> 0:14:01,279
exist for booting a computer that's

377
0:14:01,279 --> 0:14:03,279
vital because that will help you learn

378
0:14:03,279 --> 0:14:05,040
and help you troubleshoot when you run

379
0:14:05,040 --> 0:14:06,800
into a booting issue when it comes to

380
0:14:06,800 --> 0:14:09,600
actually booting the linux kernel there

381
0:14:09,600 --> 0:14:12,160
are a lot of problems that need to be

382
0:14:12,160 --> 0:14:14,240
solved and it's sometimes sort of like a

383
0:14:14,240 --> 0:14:16,320
chicken and an egg scenario you have to

384
0:14:16,320 --> 0:14:18,320
do one thing but you can't do that thing

385
0:14:18,320 --> 0:14:19,760
until the other thing is done and what

386
0:14:19,760 --> 0:14:21,760
do you do first and how do you do it

387
0:14:21,760 --> 0:14:23,680
it can be really confusing but basically

388
0:14:23,680 --> 0:14:25,680
we want to get the full kernel with all

389
0:14:25,680 --> 0:14
of its modules running so the boot

390
0:14 --> 0:14:31,279
process is very complicated and it might

391
0:14:31,279 --> 0:14:33,600
seem over complicated but the issue is

392
0:14:33,600 --> 0:14:36,079
to try to get the kernel running and

393
0:14:36,079 --> 0:14:39,120
then allow it to access the modules that

394
0:14:39,120 --> 0:14:41,600
are stored on the hard drive on your

395
0:14:41,600 --> 0:14:44,320
system and it ends up being like i said

396
0:14:44,320 --> 0:14:47,120
fairly complicated and if i'm honest

397
0:14:47,120 --> 0:14:48,480
i've been a

398
0:14:48,480 --> 0:14:50,720
system administrator for over 20 years

399
0:14:50,720 --> 0:14:53,360
i've passed lots of certification tests

400
0:14:53,360 --> 0:14:55,120
and i have never

401
0:14:55,120 --> 0:14:57,600
fully understood every step of the

402
0:14:57,600 --> 0:14:59,360
process of booting the kernel so you're

403
0:14:59,360 --> 0:15:02,560
gonna be like the king of the next nerdy

404
0:15:02,560 --> 0:15:04,560
party that you go to uh because you're

405
0:15:04,560 --> 0:15
gonna go to you're gonna know all the

406
0:15 --> 0:15:08,240
trivial pursuit answers when it comes to

407
0:15:08,240 --> 0:15:10,240
linux kernel so let's look and see what

408
0:15:10,240 --> 0:15:13,199
the boot process actually is and then

409
0:15:13,199 --> 0:15:14,720
i'll show you on a system where those

410
0:15:14,720 --> 0:15:17,279
files live so i have sort of a little

411
0:15:17,279 --> 0:15:19,440
flow chart here now a lot of these steps

412
0:15:19,440 --> 0:15:20,880
we probably are already familiar with

413
0:15:20,880 --> 0:15:23,040
first the computer either has bios or

414
0:15:23,040 --> 0:15:25,440
uefi and that's the hardware on the

415
0:15:25,440 --> 0:15:28,079
computer which looks for something that

416
0:15:28,079 --> 0:15:30,160
grub or grub too it's one or the other

417
0:15:30,160 --> 0:15:32,959
here will provide and then that boot

418
0:15:32,959 --> 0:15:35,600
code of you know that grub uses points

419
0:15:35,600 --> 0:15:38,399
us to the kernel now this is the stuff

420
0:15:38,399 --> 0:15:40,480
where it starts to get a little not

421
0:15:40,480 --> 0:15:42,399
confusing so much but complicated it's

422
0:15:42,399 --> 0:15:44,399
almost like this fine dance that has to

423
0:15:44,399 --> 0:15:47,040
be done now norm what the process is

424
0:15:47,040 --> 0:15:50,079
normally is we have the actual linux

425
0:15:50,079 --> 0:15:53,600
kernel itself which is a file one file

426
0:15:53,600 --> 0:15:56,959
and it's called vm linux or you'll

427
0:15:56,959 --> 0:15:59,279
probably currently see it called vm

428
0:15:59,279 --> 0:16:02,160
linus with the z and the only difference

429
0:16:02,160 --> 0:16:04,720
here these are the same file

430
0:16:04,720 --> 0:16:06,399
the pr the only difference is that this

431
0:16:06,399 --> 0:16:08,560
is compressed right it's the z means

432
0:16:08,560 --> 0:16:10,639
that it's compressed so it's just a

433
0:16:10,639 --> 0:16:13,360
space-saving method uh so usually we use

434
0:16:13,360 --> 0:16:16,720
vm linus just to save some room on the

435
0:16:16,720 --> 0:16:19,759
system and then this is the the kernel

436
0:16:19,759 --> 0:16:22,160
itself with no modules right so there's

437
0:16:22,160 --> 0:16:24,800
no modules this is just the base kernel

438
0:16:24,800 --> 0:16:25,920
and then

439
0:16:25,920 --> 0:16:28,560
once the kernel boots up it will mount

440
0:16:28,560 --> 0:16:30,720
all the file systems and then it will

441
0:16:30,720 --> 0:16
have access to all of the modules that

442
0:16 --> 0:16:36,399
it needs to insert to make things work

443
0:16:36,399 --> 0:16:38,560
like you know your usb

444
0:16:38,560 --> 0:16:40,880
mouse and your keyboard and your monitor

445
0:16:40,880 --> 0:16:42,800
and your video card all those things are

446
0:16:42,800 --> 0:16:45,360
modules that are loaded

447
0:16:45,360 --> 0:16:48,160
into the kernel they're not part of the

448
0:16:48,160 --> 0:16:50,560
the static kernel right i mean we could

449
0:16:50,560 --> 0:16:52,639
build this huge kernel that includes

450
0:16:52,639 --> 0:16:54,399
everything but that's just a waste of

451
0:16:54,399 --> 0:16:57,759
resources and so we have this stripped

452
0:16:57,759 --> 0:17:00,959
down kernel that has just enough stuff

453
0:17:00,959 --> 0:17:02,560
to make sure that we can mount the file

454
0:17:02,560 --> 0:17:05,039
system so that it can have access to all

455
0:17:05,039 --> 0:17:07,439
of its modules and then become the full

456
0:17:07,439 --> 0:17:09,360
running kernel on our system there's a

457
0:17:09,360 --> 0:17:13,679
few problems what if this full kernel

458
0:17:13,679 --> 0:17:15,280
and all the modules yeah so basically

459
0:17:15,280 --> 0:17:17,280
what if all the modules here are on a

460
0:17:17,280 --> 0:17:18,559
file system

461
0:17:18,559 --> 0:17:21,679
that this stripped down kernel doesn't

462
0:17:21,679 --> 0:17:22,559
know

463
0:17:22,559 --> 0:17:24,799
how to mount right it's like well i

464
0:17:24,799 --> 0:17:27,600
don't know how to get onto a raid device

465
0:17:27,600 --> 0:17:30,400
or i don't have any idea how to mount

466
0:17:30,400 --> 0:17:33,039
this fancy new ssd drive that you put

467
0:17:33,039 --> 0:17:35,600
into the pcie slot or something well

468
0:17:35,600 --> 0:17:38,880
that's where init rd or init ram disk

469
0:17:38,880 --> 0:17:42,160
comes into play this is just enough

470
0:17:42,160 --> 0:17:43,679
information

471
0:17:43,679 --> 0:17:46,640
like module information and

472
0:17:46,640 --> 0:17:50,080
driver information to be able to have

473
0:17:50,080 --> 0:17:53,520
the linux kernel access the file system

474
0:17:53,520 --> 0:17:56,720
so that it can get to its modules so

475
0:17:56,720 --> 0:17:59,520
rather than make you know a custom

476
0:17:59,520 --> 0:18:02,799
bigger kernel for every specific system

477
0:18:02,799 --> 0:18:04,400
what we've done is we have a generic

478
0:18:04,400 --> 0:18:08,559
strip down kernel and then this init rd

479
0:18:08,559 --> 0:18:12,480
has the stuff we need in order to load

480
0:18:12,480 --> 0:18:14,480
the modules

481
0:18:14,480 --> 0:18:16,720
by mounting the hard drive or you know

482
0:18:16,720 --> 0:18:18,320
whatever we need maybe this is stored in

483
0:18:18,320 --> 0:18:19,919
a network drive so we have to have the

484
0:18:19,919 --> 0:18:23,120
nfs stuff in order to mount a remote

485
0:18:23,120 --> 0:18:25,520
disk on the on the computer so it can

486
0:18:25,520 --> 0:18:27,280
access its module so this is just like

487
0:18:27,280 --> 0:18:29,919
the the temporary staging area for

488
0:18:29,919 --> 0:18:31,840
kernel stuff that we need and this is

489
0:18:31,840 --> 0:18:35,919
kind of inserted right into this running

490
0:18:35,919 --> 0:18:39,120
stripped down kernel okay now i want to

491
0:18:39,120 --> 0:18:41,280
mention this because a lot of people

492
0:18:41,280 --> 0:18:44,480
confuse the init ram disk with the init

493
0:18:44,480 --> 0:18
ram file system and they seem similar

494
0:18 --> 0:18:49,840
conceptually they are fairly similar

495
0:18:49,840 --> 0:18:53,360
conceptually except that the init ram fs

496
0:18:53,360 --> 0:18:56,400
is actually part of the actual kernel

497
0:18:56,400 --> 0:18:58,640
itself it's part of this vm linus or vm

498
0:18:58,640 --> 0:19:01,200
linux kernel and this is just like it

499
0:19:01,200 --> 0:19:04,080
says it's a file system that it creates

500
0:19:04,080 --> 0:19:06,880
and mounts in ram and i want to mention

501
0:19:06,880 --> 0:19
this tool even though we're not going to

502
0:19 --> 0:19:10,160
go into it much dracut is a tool that

503
0:19:10,160 --> 0:19:13,200
has made this extremely generic using

504
0:19:13,200 --> 0:19:15,120
udev and and stuff like that so that

505
0:19:15,120 --> 0:19:17,520
it's very flexible but this is basically

506
0:19:17,520 --> 0:19:19,760
the tiny little file system that the

507
0:19:19,760 --> 0:19:23,039
linux kernel uses in order to do what it

508
0:19:23,039 --> 0:19:24,880
needs to do to get to the point where it

509
0:19:24,880 --> 0:19:27,200
can load the full kernel by loading

510
0:19:27,200 --> 0:19:30,080
modules so init ram fs is a file system

511
0:19:30,080 --> 0:19:31,840
that it loads into ram but that's part

512
0:19:31,840 --> 0:19:35,120
of the kernel itself this init rd is a

513
0:19:35,120 --> 0:19:37,360
ram disk that is mounted alongside of

514
0:19:37,360 --> 0:19:39,840
the kernel that allows it to get to the

515
0:19:39,840 --> 0:19:42,480
point so it can use the full kernel and

516
0:19:42,480 --> 0:19:44,880
knit ram disc is not used after the

517
0:19:44,880 --> 0:19:47,039
system is booted up this is just like a

518
0:19:47,039 --> 0:19:49,600
temporary staging ground to get to the

519
0:19:49,600 --> 0:19:51,039
full kernel

520
0:19:51,039 --> 0:19:53,440
wow that was a lot of information but

521
0:19:53,440 --> 0:19:54,559
it's really

522
0:19:54,559 --> 0:19:56,559
fairly straightforward when you see why

523
0:19:56,559 --> 0:19:58,320
it's doing all of those complicated

524
0:19:58,320 --> 0:19:59,919
things now i want to show you really

525
0:19:59,919 --> 0:20:01,760
quickly some of the files that we talked

526
0:20:01,760 --> 0:20:04,559
about so here i am inside ubuntu and

527
0:20:04,559 --> 0:20:06,320
this is the boot folder and we can see

528
0:20:06,320 --> 0:20:08,799
we have here's the init ram sure enough

529
0:20:08,799 --> 0:20:10,080
and this is i have a couple different

530
0:20:10,080 --> 0:20:12,080
kernels in here there was an update but

531
0:20:12,080 --> 0:20:14,320
the kernel numbers are listed here but

532
0:20:14,320 --> 0:20:17,520
here's the init ram disk and here is the

533
0:20:17,520 --> 0:20:19,600
actual kernel file itself there's a

534
0:20:19,600 --> 0:20:21,840
couple other files the system map

535
0:20:21,840 --> 0:20:23,679
actually tells the kernel where on the

536
0:20:23,679 --> 0:20:26,159
file system all of its modules live and

537
0:20:26,159 --> 0:20:28,320
then config this is the configuration

538
0:20:28,320 --> 0:20:30,240
file when the kernel was actually

539
0:20:30,240 --> 0:20:31,919
compiled so if you want to see the

540
0:20:31,919 --> 0:20:33,919
options that were used there but those

541
0:20:33,919 --> 0:20:36,240
are the main files that are on the

542
0:20:36,240 --> 0:20:37,600
system one other thing i want to show

543
0:20:37,600 --> 0:20:40,159
you is this system.map tells the kernel

544
0:20:40,159 --> 0:20:44,159
to look in lib modules and then the name

545
0:20:44,159 --> 0:20:46,960
of the actual running kernel and inside

546
0:20:46,960 --> 0:20:49,360
there is where you'll see the actual

547
0:20:49,360 --> 0:20
different modules okay and this is where

548
0:20 --> 0:20:53,520
the modules that are going to be loaded

549
0:20:53,520 --> 0:20:55,679
in to get that full kernel live so

550
0:20:55,679 --> 0:20:58,240
that's the basic uh basics of starting a

551
0:20:58,240 --> 0:21:01,200
linux kernel on your system now i know

552
0:21:01,200 --> 0:21:03,919
we covered a lot of things in a lot of

553
0:21:03,919 --> 0:21
terms and a lot of concepts but they

554
0:21 --> 0:21:07,440
should make sense once you go through

555
0:21:07,440 --> 0:21:09,039
that flowchart of what's happening and

556
0:21:09,039 --> 0:21:11,120
why it's happening and in the end which

557
0:21:11,120 --> 0:21:12,880
comes first the chicken or the egg well

558
0:21:12,880 --> 0:21:14,640
it depends on what you need to do right

559
0:21:14,640 --> 0:21:16,559
if you need an egg then the egg comes

560
0:21:16,559 --> 0:21:18,159
first if the chicken can handle it on

561
0:21:18,159 --> 0:21:20,960
its own no eggs are needed

562
0:21:20,960 --> 0:21:23,200
now a kernel panic certainly seems like

563
0:21:23,200 --> 0:21:25,679
a really good time to panic but i assure

564
0:21:25,679 --> 0:21:27,760
you just because the colonel panics

565
0:21:27,760 --> 0:21:30,559
doesn't mean you should soldier but

566
0:21:30,559 --> 0:21:32,080
really kernel panic just means that

567
0:21:32,080 --> 0:21:33,600
something went wrong with the kernel now

568
0:21:33,600 --> 0:21:35,360
there's a couple common causes and

569
0:21:35,360 --> 0:21:36,480
there's a couple things we can do

570
0:21:36,480 --> 0:21:38,799
depending on what the root cause is now

571
0:21:38,799 --> 0:21:40,640
if all of a sudden you're starting to

572
0:21:40,640 --> 0:21:42,480
get kernel panics and you haven't done

573
0:21:42,480 --> 0:21:44,400
any system updates recently

574
0:21:44,400 --> 0:21:46,480
and it's kind of hit or miss it'll

575
0:21:46,480 --> 0:21:48,159
happen it won't happen it happens when

576
0:21:48,159 --> 0:21
you're doing something but not another

577
0:21 --> 0:21:51,840
chances are you may have a piece of

578
0:21:51,840 --> 0:21:53,120
faulty hardware and this is one of the

579
0:21:53,120 --> 0:21:55,440
really common ways that you can

580
0:21:55,440 --> 0:21:57,520
experience a kernel panic

581
0:21:57,520 --> 0:21:59,360
if you have an overclocked cpu for

582
0:21:59,360 --> 0:22:01,440
example that can sometimes cause kernel

583
0:22:01,440 --> 0:22:03,919
panics a bad stick of ram is another one

584
0:22:03,919 --> 0:22:05,840
that'll really do it and you know some

585
0:22:05,840 --> 0:22:07,360
add-on card like video cards are

586
0:22:07,360 --> 0:22
sometimes you know guilty of doing this

587
0:22 --> 0:22:11,600
really anything on your system any

588
0:22:11,600 --> 0:22:14,159
hardware if it fails it can cause a

589
0:22:14,159 --> 0:22:15,919
kernel panic there's a couple ways to

590
0:22:15,919 --> 0:22:17,679
you know try different things especially

591
0:22:17,679 --> 0:22:19,679
if you have multiple sticks of ram

592
0:22:19,679 --> 0:22:21,200
sometimes you can pull out a stick of

593
0:22:21,200 --> 0:22:23,360
ram see if you still get a kernel panic

594
0:22:23,360 --> 0:22:25,039
if you do then put that stick back in

595
0:22:25,039 --> 0:22:27,120
and keep pulling them out one at a time

596
0:22:27,120 --> 0:22:28,400
and see if the kernel panics

597
0:22:28,400 --> 0:22:30,400
automatically go away when you remove

598
0:22:30,400 --> 0:22:32,640
one certain stick hey chances are that's

599
0:22:32,640 --> 0:22:34,640
what's wrong with you know that certain

600
0:22:34,640 --> 0:22:37,120
stick is a bad stick of ram it can be

601
0:22:37,120 --> 0:22:39,039
frustrating to track down hardware

602
0:22:39,039 --> 0:22:41,679
related kernel panics but there's also

603
0:22:41,679 --> 0:22:43,440
another very common kind of kernel panic

604
0:22:43,440 --> 0:22:45,919
that happens and that's when you upgrade

605
0:22:45,919 --> 0:22:48,320
your system so let's say that you just

606
0:22:48,320 --> 0:22:50,799
ran a system update on your system and

607
0:22:50,799 --> 0:22:53,200
it installed a new kernel you reboot the

608
0:22:53,200 --> 0:22:55,440
computer and then boom it says something

609
0:22:55,440 --> 0:22:57,760
like failure to init or kernel panic

610
0:22:57,760 --> 0:23:00,400
blah blah blah blah if that happens

611
0:23:00,400 --> 0:23:02,480
there is something that you can do which

612
0:23:02,480 --> 0:23:04,720
is fairly easy to do and you can you

613
0:23:04,720 --> 0:23:07,039
know rescue your system so to speak so

614
0:23:07,039 --> 0:23:08,480
when it boots up we're just going to go

615
0:23:08,480 --> 0:23
into grub and we're going to pick an

616
0:23 --> 0:23:11,760
older kernel because when you update a

617
0:23:11,760 --> 0:23:12,799
system

618
0:23:12,799 --> 0:23:15,520
it keeps the older kernel for this exact

619
0:23:15,520 --> 0:23:17,120
reason if something goes wrong you can

620
0:23:17,120 --> 0:23:18,720
pick a different kernel and boot the

621
0:23:18,720 --> 0:23:20,720
system and then fix it so i'll show you

622
0:23:20,720 --> 0:23:21,760
what i mean

623
0:23:21,760 --> 0:23
here we are on our ubuntu system and

624
0:23 --> 0:23:26,240
let's say i just recently updated it and

625
0:23:26,240 --> 0:23:29,120
during the update it says now i need to

626
0:23:29,120 --> 0:23:30,559
restart my system so i'm going to

627
0:23:30,559 --> 0:23:32,799
restart the system and everything should

628
0:23:32,799 --> 0:23:35,200
go well blah blah blah blah

629
0:23:35,200 --> 0:23:36,960
and then boom we get a kernel panic now

630
0:23:36,960 --> 0:23:38,880
this doesn't actually give us the words

631
0:23:38,880 --> 0:23:40,799
kernel panic because i did something

632
0:23:40,799 --> 0:23:42,480
fairly simple to simulate what would

633
0:23:42,480 --> 0:23:44,159
happen if there was some corruption in

634
0:23:44,159 --> 0:23
the kernel uh but it says here you know

635
0:23 --> 0:23
it's unable to find the init rd

636
0:23 --> 0:23:50,480
sometimes you might see kernel panic

637
0:23:50,480 --> 0:23:52,480
or unable to kill init or something like

638
0:23:52,480 --> 0:23:54,320
that it says press any key to continue

639
0:23:54,320 --> 0:23:55,200
but

640
0:23:55,200 --> 0:23:56,320
there's nothing that's going to happen

641
0:23:56,320 --> 0:23
right it's kind of locked up on me

642
0:23 --> 0:24:00,640
because it aired out there's no init rd

643
0:24:00,640 --> 0:24:02,159
so what we're going to do is restart the

644
0:24:02,159 --> 0:24:03,919
system and when we do that we're going

645
0:24:03,919 --> 0:24:05,840
to initiate the grub menu by holding

646
0:24:05,840 --> 0:24
down the shift key so first of all we do

647
0:24 --> 0:24
need to restart the computer i'm going

648
0:24 --> 0:24:11,679
to hold down the shift key and we should

649
0:24:11,679 --> 0:24:13,840
get presented with a grub menu sure

650
0:24:13,840 --> 0:24:16,159
enough here's our grub menu

651
0:24:16,159 --> 0:24:18,080
advanced options and we're going to see

652
0:24:18,080 --> 0:24:20,880
here we have multiple kernels

653
0:24:20,880 --> 0:24:22,799
this is the kernel the newest one is the

654
0:24:22,799 --> 0:24:24,240
one that it tried to boot by default so

655
0:24:24,240 --> 0:24:25,919
i'm just going to go back to the last

656
0:24:25,919 --> 0:24:28,240
successful kernel that we had press

657
0:24:28,240 --> 0:24:30,159
enter and it should boot this up and our

658
0:24:30,159 --> 0:24
system should be just fine then all we

659
0:24 --> 0:24:35,039
need to do is remove that kernel package

660
0:24:35,039 --> 0:24:36,799
with the failed thing using our app

661
0:24:36,799 --> 0:24:39,760
system reinstall it again you know do an

662
0:24:39,760 --> 0:24:41,840
update so it reinstalls and then it

663
0:24:41,840 --> 0:24:43,760
should install that init rd back in

664
0:24:43,760 --> 0:24:46,480
place and we should be fine so it's nice

665
0:24:46,480 --> 0:24:49,039
that linux keeps a few of the older

666
0:24:49,039 --> 0:24:51,840
kernels kind of in line so that we can

667
0:24:51,840 --> 0:24:53,840
do exactly this if something goes wrong

668
0:24:53,840 --> 0:24:56,480
with one kernel or we've deleted modules

669
0:24:56,480 --> 0:24:58,159
or just something doesn't load or we get

670
0:24:58,159 --> 0:25:00,159
a kernel panic we can select a

671
0:25:00,159 --> 0:25:02,640
previously successful kernel and then

672
0:25:02,640 --> 0:25:04,559
here we are on our system working

673
0:25:04,559 --> 0:25:07,039
perfectly and now we can go through and

674
0:25:07,039 --> 0:25:08,880
remove that package and fix it etcetera

675
0:25:08,880 --> 0:25:11,120
etcetera etcetera so if you do get the

676
0:25:11,120 --> 0:25:13,600
kernel panic especially on a production

677
0:25:13,600 --> 0:25:15,760
system oh it can be really scary but

678
0:25:15,760 --> 0:25:17,679
know that there are ways

679
0:25:17,679 --> 0:25:19,440
you know to fix it if it's just a kernel

680
0:25:19,440 --> 0:25:20,960
corruption you can boot to a previous

681
0:25:20,960 --> 0:25:22,720
kernel if it's a hardware issue it's a

682
0:25:22,720 --> 0:25:24,640
little harder to troubleshoot but you

683
0:25:24,640 --> 0:25:26,799
can also do something like boot from a

684
0:25:26,799 --> 0:25:29,679
usb drive or a cd and at the very least

685
0:25:29,679 --> 0:25:31,919
you'll be able to access the hard drives

686
0:25:31,919 --> 0:25:33,760
so that you can get stuff off of your

687
0:25:33,760 --> 0:25:36,240
computer if it is a hardware failure

688
0:25:36,240 --> 0:25:38,159
that's causing the problem and then

689
0:25:38,159 --> 0:25:40,400
you'll have your data to put onto a new

690
0:25:40,400 --> 0:25:42,159
computer but kernel panics are no reason

691
0:25:42,159 --> 0:25:43,679
to panic it's just one more thing that

692
0:25:43,679 --> 0:25:45,679
we need to understand how is working so

693
0:25:45,679 --> 0:25:47,200
we can fix it or troubleshoot the

694
0:25:47,200 --> 0:25:50,559
problem and move on from there

695
0:25:50,559 --> 0:25:52,960
we know that the linux kernel is modular

696
0:25:52,960 --> 0:25:54,799
in that it doesn't load all of the

697
0:25:54,799 --> 0:25:57,279
drivers that it could possibly ever need

698
0:25:57,279 --> 0:25:59,200
automatically by default it has these

699
0:25:59,200 --> 0:26:01,600
modules that it dynamically loads when

700
0:26:01,600 --> 0:26:03,600
it discovers that it needs like a driver

701
0:26:03,600 --> 0:26:05,600
for a certain sound card on boot now we

702
0:26:05,600 --> 0:26:08,720
can configure it to automatically load

703
0:26:08,720 --> 0:26:10,480
those modules by setting it up in a

704
0:26:10,480 --> 0:26:12,080
config file which we're going to look at

705
0:26:12,080 --> 0:26:14,080
now what happens though is it'll load

706
0:26:14,080 --> 0:26:16,240
that module but then on behind the

707
0:26:16,240 --> 0:26:17,520
scenes there's some incredible

708
0:26:17,520 --> 0:26:20,400
dependency checking going on and that

709
0:26:20,400 --> 0:26:23,360
dependency checking is really really

710
0:26:23,360 --> 0:26:26,320
good at knowing what modules one you

711
0:26:26,320 --> 0:26:29,360
know a particular module will depend on

712
0:26:29,360 --> 0:26:31,440
there may not actually be a robot called

713
0:26:31,440 --> 0:26:33,600
modbot in your system or even in my

714
0:26:33,600 --> 0:26:35,440
system i just like to think of a cheesy

715
0:26:35,440 --> 0:26:37,919
robot plugging in different modules in

716
0:26:37,919 --> 0:26:40,080
my computer but nonetheless the computer

717
0:26:40,080 --> 0:26:42,720
is really good at finding

718
0:26:42,720 --> 0:26:44,880
dependencies in fact sometimes it's too

719
0:26:44,880 --> 0:26:47,279
good and we need to blacklist certain

720
0:26:47,279 --> 0:26:49,520
modules so that modbot doesn't say oh

721
0:26:49,520 --> 0:26:51,679
this one will work and put it in i'm

722
0:26:51,679 --> 0:26:53,120
going to show you why we would do that

723
0:26:53,120 --> 0:26:54,559
and also how to do that but we're

724
0:26:54,559 --> 0:26:56,480
looking at two concepts today how to

725
0:26:56,480 --> 0:26:58,720
automatically load a module on boot and

726
0:26:58,720 --> 0:27:00,640
how to make sure that the wrong module

727
0:27:00,640 --> 0:27:02,880
isn't loaded on boot automatically by

728
0:27:02,880 --> 0:27:04,720
the system detecting a dependency that

729
0:27:04,720 --> 0:27:06,559
you don't want it to use

730
0:27:06,559 --> 0:27:08,640
now here on our this is an ubuntu system

731
0:27:08,640 --> 0:27:11,360
but all linux distributions have kernels

732
0:27:11,360 --> 0:27:14,559
we're going to go into the etc folder

733
0:27:14,559 --> 0:27:16,240
and there's a file here called modules

734
0:27:16,240 --> 0:27:18,480
so we're going to look at that

735
0:27:18,480 --> 0:27:20,080
we can see right now it's empty it says

736
0:27:20,080 --> 0:27:22,399
kernel modules to load at boot time this

737
0:27:22,399 --> 0:27:24,399
contains the names of the kernel modules

738
0:27:24,399 --> 0:27:26,320
that should be loaded at boot time one

739
0:27:26,320 --> 0:27:28,640
per line lines begin with this are

740
0:27:28,640 --> 0:27:30,880
ignored so what we would do is put the

741
0:27:30,880 --> 0:27:33,200
name of the module

742
0:27:33,200 --> 0:27:35,360
and we would add something like e

743
0:27:35,360 --> 0:27:37,760
1000 which is the name of an intel

744
0:27:37,760 --> 0:27:40,159
network card module now normally the

745
0:27:40,159 --> 0:27
system automatically detects the

746
0:27 --> 0:27:44,320
hardware and it knows what to load but

747
0:27:44,320 --> 0:27:45,600
we want to i want to give you an example

748
0:27:45,600 --> 0:27:47,840
of how you can manually load a kernel

749
0:27:47,840 --> 0:27:50,559
module and have it done automatically on

750
0:27:50,559 --> 0:27:52,480
boot even if the system doesn't you know

751
0:27:52,480 --> 0:27:54,240
detect it on boot like oh i have new

752
0:27:54,240 --> 0:27
hardware i need this particular module

753
0:27 --> 0:27:57,919
so this is how you would manually do it

754
0:27:57,919 --> 0:27:59,120
all right now we're not actually going

755
0:27:59,120 --> 0:28:00,480
to save this because i don't want to

756
0:28:00,480 --> 0:28:02,640
load that module but let's say that's

757
0:28:02,640 --> 0:28:05,120
loaded now if there are dependencies it

758
0:28:05,120 --> 0:28:07,279
will also load those dependencies let's

759
0:28:07,279 --> 0:28:09,600
say that the intel e1000 network card

760
0:28:09,600 --> 0:28:11,919
also requires the pci bus to work well

761
0:28:11,919 --> 0:28
then it would load the pci bus

762
0:28 --> 0:28:16,320
module so it's really smart but let's

763
0:28:16,320 --> 0:28
say that there are two different pci

764
0:28 --> 0:28:21,520
modules there's like uh pci version one

765
0:28:21,520 --> 0:28:24,640
and pci version 37 and by default it's

766
0:28:24,640 --> 0:28:26,080
going to load pci version one and we

767
0:28:26,080 --> 0:28:28,080
don't want that so what we would do is

768
0:28:28,080 --> 0:28:30,559
blacklist it so if we go into

769
0:28:30,559 --> 0:28:32,799
etc mod probe dot d

770
0:28:32,799 --> 0:28:34,080
first i want to show you there's a bunch

771
0:28:34,080 --> 0:28:35,919
of files in here anything with dot conf

772
0:28:35,919 --> 0:28:37,600
is read in right so it doesn't matter

773
0:28:37,600 --> 0:28:38,960
which one you put it in there's just

774
0:28:38,960 --> 0:28:40,880
some conventions here anything we're

775
0:28:40,880 --> 0:28:42,159
going to manually put in we're going to

776
0:28:42,159 --> 0:28:45,039
put into blacklist.com so let's actually

777
0:28:45,039 --> 0:28:47,760
edit that file

778
0:28:47,760 --> 0:28:49,360
and we're going to see there are a bunch

779
0:28:49,360 --> 0:28:51,600
of things that are already blacklisted

780
0:28:51,600 --> 0:28:54,799
now what this does it just makes it so

781
0:28:54,799 --> 0:28:57,600
that the kernel doesn't automatically

782
0:28:57,600 --> 0:28:59,679
load it like here's a let's look at this

783
0:28:59,679 --> 0:29:02,640
ethernet one okay so this is an e-1394

784
0:29:02,640 --> 0:29:05,440
this is a firewire network device all

785
0:29:05,440 --> 0:29:07,760
right it's saying here we never want to

786
0:29:07,760 --> 0:29:10,480
use a firewire network device so if you

787
0:29:10,480 --> 0:29:12,720
detect a firewire device i do not want

788
0:29:12,720 --> 0:29:15,360
you to load the eth1394

789
0:29:15,360 --> 0:29:18,720
or the ethernet module for a firewire

790
0:29:18,720 --> 0:29:21,039
port so if we put blacklist here it's

791
0:29:21,039 --> 0:29:23,760
not going to load it even if we put in

792
0:29:23,760 --> 0:29:26,080
the firewire module itself so that it

793
0:29:26,080 --> 0:29:28,640
activates that port this will make sure

794
0:29:28,640 --> 0:29:30,799
that the kernel or modbot or whatever

795
0:29:30,799 --> 0:29:32,559
however you like to visualize it doesn't

796
0:29:32,559 --> 0:29:34,480
say oh well you're putting that in why

797
0:29:34,480 --> 0:29:36,240
don't we also activate the ethernet

798
0:29:36,240 --> 0:29:37,840
ability of that port we don't want that

799
0:29:37,840 --> 0:29:39,760
so we put blacklist in here same thing

800
0:29:39,760 --> 0:29:41,440
like that i've i've done this the most

801
0:29:41,440 --> 0:29:43,520
with sound cards because there are like

802
0:29:43,520 --> 0:29:46,880
150 different sound card drivers for the

803
0:29:46,880 --> 0:29:50,480
ac 97 model of sound cards so a lot of

804
0:29:50,480 --> 0:29:52,240
times you have to blacklist a bunch of

805
0:29:52,240 --> 0:29:53,679
different models and see there's a

806
0:29:53,679 --> 0:29:55,520
blacklisted sound card right here right

807
0:29:55,520 --> 0:29:57,679
this is saying don't load this module

808
0:29:57,679 --> 0:29:59,279
that's not what i want and this looks

809
0:29:59,279 --> 0:30:01,279
like it's because of an ubuntu bug all

810
0:30:01,279 --> 0:30:03,360
right so anyway this is where we tell it

811
0:30:03,360 --> 0:30:05,279
what not to load even if it's compiled

812
0:30:05,279 --> 0:30:06,720
in and it's part of the module we would

813
0:30:06,720 --> 0:30:09,279
put it in here or any of the files in

814
0:30:09,279 --> 0:30:10,559
this folder

815
0:30:10,559 --> 0:30:12,640
anything that says blacklist space blank

816
0:30:12,640 --> 0:30:15,440
is going to be blacklisted honestly like

817
0:30:15,440 --> 0:30:18,720
i mentioned the linux kernel is usually

818
0:30:18,720 --> 0:30:21,120
really good at automatically detecting

819
0:30:21,120 --> 0:30:23,919
hardware and loading all of the modules

820
0:30:23,919 --> 0:30:26,960
all on its own by detecting new hardware

821
0:30:26,960 --> 0:30:28,799
on the system but if there are times

822
0:30:28,799 --> 0:30:30,240
where you want to manually load

823
0:30:30,240 --> 0:30:32,159
something but you want it to be done on

824
0:30:32,159 --> 0:30:33,679
boot that's where we would put it in the

825
0:30:33,679 --> 0:30:36,159
etc modules file and then blacklisting

826
0:30:36,159 --> 0:30:37,520
is really important especially if you're

827
0:30:37,520 --> 0:30:39,600
having problems with something like uh

828
0:30:39,600 --> 0:30:40,880
it just doesn't work with this kernel

829
0:30:40,880 --> 0:30:42,480
module let me blacklist that so the

830
0:30:42,480 --> 0:30:44,399
kernel will pick another

831
0:30:44,399 --> 0:30:48,640
module and try to activate that one

832
0:30:48,640 --> 0:30:50,240
one of the things that makes the linux

833
0:30:50,240 --> 0:30:52,799
kernel very special is that it's modular

834
0:30:52,799 --> 0:30:54,960
so we don't have to install all of the

835
0:30:54,960 --> 0:30:56,960
drivers for all the potential hardware

836
0:30:56,960 --> 0:30:58,559
in a system we just installed the

837
0:30:58,559 --> 0:31:00,399
drivers and the modules for the things

838
0:31:00,399 --> 0:31:02,320
that exist it makes the linux kernel

839
0:31:02,320 --> 0:31:04,159
very efficient because we don't have all

840
0:31:04,159 --> 0:31:07,039
that bloat all those unneeded things

841
0:31:07,039 --> 0:31:08,799
sitting in memory where they're never

842
0:31:08,799 --> 0:31:10,320
going to be used so the kernel can be

843
0:31:10,320 --> 0:31:12,480
very very efficient because of its

844
0:31:12,480 --> 0:31:15,279
modular design but in order to take full

845
0:31:15,279 --> 0:31:16,720
advantage of that we have to make sure

846
0:31:16,720 --> 0:31:19,120
that we're putting the right modules in

847
0:31:19,120 --> 0:31:20,559
the right place with all the

848
0:31:20,559 --> 0:31
dependencies so we don't end up with a

849
0:31 --> 0:31:23,600
kernel looking like this right with

850
0:31:23,600 --> 0:31:25,519
pieces that don't belong thankfully

851
0:31:25,519 --> 0:31:27,120
there are a handful of tools that we can

852
0:31:27,120 --> 0:31:29,679
use to properly manipulate the kernel

853
0:31:29,679 --> 0:31:31,519
modules and the first two i want to look

854
0:31:31,519 --> 0:31:34,080
at are ins mod and mod probe because on

855
0:31:34,080 --> 0:31:35,919
the surface they appear to do the same

856
0:31:35,919 --> 0:31:38,799
thing insert modules into the running

857
0:31:38,799 --> 0:31:40,559
kernel this is after we're booted it'll

858
0:31:40,559 --> 0:31:42,480
insert them into the running kernel so

859
0:31:42,480 --> 0:31:44,720
let's compare them to scientists right

860
0:31:44,720 --> 0:31:48,080
so ins mod is a very basic program you

861
0:31:48,080 --> 0:31:50,159
have to give it the full path of the

862
0:31:50,159 --> 0:31:52,240
kernel module that you want to install

863
0:31:52,240 --> 0:31:54,720
it doesn't do any dependency checking it

864
0:31:54,720 --> 0:31:56,480
just kind of slams it into the running

865
0:31:56,480 --> 0:31:59,279
kernel and if the kernel doesn't work

866
0:31:59,279 --> 0:32:01,360
like it's the wrong kernel version or it

867
0:32:01,360 --> 0:32:02,880
doesn't have the proper dependencies

868
0:32:02,880 --> 0:32:04,720
it's just going to fail and it's not

869
0:32:04,720 --> 0:32:06,240
going to give you an explanation as to

870
0:32:06,240 --> 0:32:07,760
why it's just going to say well i

871
0:32:07,760 --> 0:32:09,279
crammed it in there and it didn't work

872
0:32:09,279 --> 0:32:10,320
boom

873
0:32:10,320 --> 0:32:12,240
but mod probe on the other hand is a

874
0:32:12,240 --> 0:32:14,480
more advanced program it's a more

875
0:32:14,480 --> 0:32:17,039
efficient model and what it does you can

876
0:32:17,039 --> 0:32:19,279
give it just the name of the kernel

877
0:32:19,279 --> 0:32:20,480
module you don't have to give it the

878
0:32:20,480 --> 0:32:22,799
full path you can give it the just the

879
0:32:22,799 --> 0:32:25,519
name of the module itself it will look

880
0:32:25,519 --> 0:32:27,679
and determine all of the dependencies

881
0:32:27,679 --> 0:32:29,840
that that module needs so if one module

882
0:32:29,840 --> 0:32:31,679
needs you know depends on another module

883
0:32:31,679 --> 0:32:33,440
it will say oh let's load that other one

884
0:32:33,440 --> 0:32:35,279
first it does a really good job now it

885
0:32:35,279 --> 0:32:37,840
does need us to have a map of all the

886
0:32:37,840 --> 0:32:39,600
all the needs and dependencies on a

887
0:32:39,600 --> 0:32:41,600
system but there's a program to do this

888
0:32:41,600 --> 0:32:43,919
we just make sure we type dep mod when

889
0:32:43,919 --> 0:32:45,519
we're done installing a new kernel

890
0:32:45,519 --> 0:32:47,679
module and it will recreate that map so

891
0:32:47,679 --> 0:32:50,320
mod probe knows where to you know find

892
0:32:50,320 --> 0:32:51,600
the dependencies now you might be

893
0:32:51,600 --> 0:32:53,760
thinking okay well obviously i'm going

894
0:32:53,760 --> 0:32:55,760
to use mod probe when i insert modules

895
0:32:55,760 --> 0:32:57,679
and exactly that's what you should do

896
0:32:57,679 --> 0:33:00,559
why does ins mod even exist well here's

897
0:33:00,559 --> 0:33:03,840
the deal mod probe actually knows what

898
0:33:03,840 --> 0:33:06,240
modules to install and then behind the

899
0:33:06,240 --> 0:33
scenes it uses insmod to do the actual

900
0:33 --> 0:33:11,840
inserting so mod probe is really kind of

901
0:33:11,840 --> 0:33
a front end that's very intelligent

902
0:33 --> 0:33:15,360
about what to do on the system but

903
0:33:15,360 --> 0:33:17,600
that's why insmod still exists it's

904
0:33:17,600 --> 0:33:19,679
still the you know the basic tool that

905
0:33:19,679 --> 0:33:21,600
is used to cram modules into the running

906
0:33:21,600 --> 0:33:23,679
kernel mod probe just knows which

907
0:33:23,679 --> 0:33
kernels to load and in what order to

908
0:33 --> 0:33:28,159
load them so modprobe is what the humans

909
0:33:28,159 --> 0:33:31,279
use and ins mod is what modprobe uses if

910
0:33:31,279 --> 0:33:32,640
that makes sense

911
0:33:32,640 --> 0:33:34,399
it's really easy to see that in action

912
0:33:34,399 --> 0:33:37,200
on our system so i'm root on ubuntu here

913
0:33:37,200 --> 0:33:39,760
and let's go into lib

914
0:33:39,760 --> 0:33:41,519
modules and we're going to see we have

915
0:33:41,519 --> 0:33:42,960
folders for each of the kernels

916
0:33:42,960 --> 0:33:44,320
installed on the system we're going to

917
0:33:44,320 --> 0:33:45,519
go into the one that we're currently

918
0:33:45,519 --> 0:33:48,080
running which is the latest one and

919
0:33:48,080 --> 0:33:49,600
inside here we'll see this is where we

920
0:33:49,600 --> 0:33:51,919
have a lot of like the map files for the

921
0:33:51,919 --> 0:33:53,519
mod probe so it knows where the kernel

922
0:33:53,519 --> 0:33
modules live let's go into the kernel

923
0:33 --> 0:33
folder where the modules live

924
0:33 --> 0:34:01,200
type ls let's go into the drivers folder

925
0:34:01,200 --> 0:34:03,200
type ls again oh there's still a lot of

926
0:34:03,200 --> 0:34:05,440
drivers let's go into the net folder all

927
0:34:05,440 --> 0:34:06,960
right there we actually see some kernel

928
0:34:06,960 --> 0:34:09,359
modules here okay so uh we're going to

929
0:34:09,359 --> 0:34:10,879
play with thunderbolt

930
0:34:10,879 --> 0:34:12,720
net but let's say we wanted to load this

931
0:34:12,720 --> 0:34:14,480
in so we could use thunderbolt as a

932
0:34:14,480 --> 0:34:16,720
network device if we wanted to use ins

933
0:34:16,720 --> 0:34:18,399
mod we would say

934
0:34:18,399 --> 0:34:22,280
ins mod lib

935
0:34:22,280 --> 0:34:23,839
modules

936
0:34:23,839 --> 0:34:28,399
generic kernel drivers net

937
0:34:28,399 --> 0:34:29,919
thunderbolt net because we need the

938
0:34:29,919 --> 0:34:31,520
entire path we're going to press enter

939
0:34:31,520 --> 0:34:33,040
and it's going to say well i can't do

940
0:34:33,040 --> 0:34:35,040
that unknown symbol in module it doesn't

941
0:34:35,040 --> 0:34:37,119
work blah blah blah it has a dependency

942
0:34:37,119 --> 0:34:38,320
it doesn't tell us what the dependency

943
0:34:38,320 --> 0:34:40,079
is but if we were to use mod probe and

944
0:34:40,079 --> 0:34:41,200
we were to say

945
0:34:41,200 --> 0:34:44,159
modprobe i want you to put in

946
0:34:44,159 --> 0:34:46,159
thunderbolt

947
0:34:46,159 --> 0:34:48,079
net and that's all we don't have to say

948
0:34:48,079 --> 0:34:49,520
a path we don't have to put ko at the

949
0:34:49,520 --> 0:34:51,119
end just press enter

950
0:34:51,119 --> 0:34:53,359
boom it's automatically installed how do

951
0:34:53,359 --> 0:34:55,040
we know well one we didn't get an error

952
0:34:55,040 --> 0:34:56,800
it just installed it but if we type ls

953
0:34:56,800 --> 0:34:57,839
mod

954
0:34:57,839 --> 0:34:59,520
will show us all the installed modules

955
0:34:59,520 --> 0:35:01,839
and if we scroll a bit to the top we're

956
0:35:01,839 --> 0:35:03,839
gonna see well look at that thunderbolt

957
0:35:03,839 --> 0:35:06,800
net is installed into the running kernel

958
0:35:06,800 --> 0:35:08,720
and we can see the dependency was

959
0:35:08,720 --> 0:35:10,880
thunderbolt but modprobe knew to do that

960
0:35:10,880 --> 0:35:12,640
and it installed it now there's another

961
0:35:12,640 --> 0:35:14,800
tool for removing them and that's rm mod

962
0:35:14,800 --> 0:35:17,440
now there's no super smart uh version

963
0:35:17,440 --> 0:35:19,680
and dumb version of these rm mod is kind

964
0:35:19,680 --> 0:35:21,280
of halfway between because if we were to

965
0:35:21,280 --> 0:35:24,800
say rm mod thunderbolt it's not going to

966
0:35:24,800 --> 0:35:26,320
do it it's going to say i can't do that

967
0:35:26,320 --> 0:35:28,320
it's in use but at least it tells us

968
0:35:28,320 --> 0:35:31,040
what it's in use by right thunderbolt

969
0:35:31,040 --> 0:35:32,720
underscore net which that's a little

970
0:35:32,720 --> 0:35:34,240
strange because the name of it doesn't

971
0:35:34,240 --> 0:35:36,079
have an underscore right if we want to

972
0:35:36,079 --> 0:35
get rid of this we could say first we

973
0:35 --> 0:35:40,160
have to rm mod

974
0:35:40,160 --> 0:35:43,359
thunderbolt dash net

975
0:35:43,359 --> 0:35:45,760
okay no errors and now if we do the up

976
0:35:45,760 --> 0:35:47,680
arrow twice now we can rm mod the

977
0:35:47,680 --> 0:35:49,440
thunderbolt module

978
0:35:49,440 --> 0:35:51,760
and again no problems because we we got

979
0:35:51,760 --> 0:35:54,079
rid of that dependency first so now if

980
0:35:54,079 --> 0:35:55,920
we do ls mod we're going to see we

981
0:35:55,920 --> 0:35:57,040
scroll up

982
0:35:57,040 --> 0:35:58,320
that they're not in there anymore

983
0:35:58,320 --> 0:35:59,920
they're not installed into the running

984
0:35:59,920 --> 0:36:01,920
kernel and that's how you can manipulate

985
0:36:01,920 --> 0:36:04,480
kernel modules on your system some of

986
0:36:04,480 --> 0:36:06,400
the tools are smarter than others but

987
0:36:06,400 --> 0:36:08,480
it's really important to understand why

988
0:36:08,480 --> 0:36:10,480
they're smarter and like insmod is

989
0:36:10,480 --> 0:36:11,680
important still even though you don't

990
0:36:11,680 --> 0:36:13,280
want to use it on the command line for

991
0:36:13,280 --> 0:36:15,200
doing very much at all now one more

992
0:36:15,200 --> 0:36:16,960
thing i just want to tell you about is

993
0:36:16,960 --> 0:36:18,880
if you install a new kernel module like

994
0:36:18,880 --> 0:36:22,240
you download a piece of hardware and it

995
0:36:22,240 --> 0:36:23,920
has its own kernel module and you

996
0:36:23,920 --> 0:36:24,960
compile it and so then you have the

997
0:36:24,960 --> 0:36:26,800
kernel module that's put in this folder

998
0:36:26,800 --> 0:36:28,160
you know so that it's in our current

999
0:36:28,160 --> 0:36:30,800
running modules folder you have to type

1000
0:36:30,800 --> 0:36:34,320
dep mod in order for it to update that

1001
0:36:34,320 --> 0:36:36,960
database or that system map so that

1002
0:36:36,960 --> 0:36:38,960
modprobe knows where

1003
0:36:38,960 --> 0:36:40,800
it lives and what dependencies it might

1004
0:36:40,800 --> 0:36:41,599
have

1005
0:36:41,599 --> 0:36:43,440
it takes a while and now we have it

1006
0:36:43,440 --> 0:36:45,359
updated so now we can install that new

1007
0:36:45,359 --> 0:36:47,440
kernel module because it knows all the

1008
0:36:47,440 --> 0:36:49,440
dependencies on the system now i know in

1009
0:36:49,440 --> 0:36:51,040
the picture here i have these you know

1010
0:36:51,040 --> 0:36:53,119
wrong puzzle pieces put into the puzzle

1011
0:36:53,119 --> 0:36:54,640
this is actually a lot harder to

1012
0:36:54,640 --> 0:36:56,400
accomplish than you would think because

1013
0:36:56,400 --> 0:36:58,240
the tools just fail right they say oh

1014
0:36:58,240 --> 0:36:59,920
this won't fit or this is the wrong

1015
0:36:59,920 --> 0:37:01,920
kernel module some of them are smarter

1016
0:37:01,920 --> 0:37:03,280
about it than others but it's really

1017
0:37:03,280 --> 0:37:04,960
difficult to put the wrong kernel module

1018
0:37:04,960 --> 0:37:06,640
into a running kernel but i want to make

1019
0:37:06,640 --> 0:37:08,240
sure that you understand all of these

1020
0:37:08,240 --> 0:37:10,640
tools exist how they work what they look

1021
0:37:10,640 --> 0:37:13,760
for and the difference between them

1022
0:37:13,760 --> 0:37:15,440
first off we're talking about network

1023
0:37:15,440 --> 0:37:17,359
connectivity today and the first thing i

1024
0:37:17,359 --> 0:37:18,720
want to show you is

1025
0:37:18,720 --> 0:37:21,280
always check the cable now it seems

1026
0:37:21,280 --> 0:37:22,880
silly right of course the cable is fine

1027
0:37:22,880 --> 0:37:26,400
this is plugged in just fine however

1028
0:37:26,400 --> 0:37:28,720
ah see it wasn't plugged in tight and

1029
0:37:28,720 --> 0:37:31,359
whether it's a jokester in the office or

1030
0:37:31,359 --> 0:37:33,599
somebody who ran over a cable with a

1031
0:37:33,599 --> 0:37:36,160
vacuum cleaner or something sometimes it

1032
0:37:36,160 --> 0:37:37,920
is the cable and you can spend a ton of

1033
0:37:37,920 --> 0:37:39,680
time on the command line and be very

1034
0:37:39,680 --> 0:37:41,440
frustrated to discover that it was just

1035
0:37:41,440 --> 0:37:43,839
a bad cable so that's just a pro tip

1036
0:37:43,839 --> 0:37:45,359
check the cable make sure it's plugged

1037
0:37:45,359 --> 0:37:47,280
in tightly and that the little lights on

1038
0:37:47,280 --> 0:37:48,720
the back are flashing and doing their

1039
0:37:48,720 --> 0:37:49,520
thing

1040
0:37:49,520 --> 0:37:51,119
now we could probably do an entire

1041
0:37:51,119 --> 0:37:53,599
course on troubleshooting a network

1042
0:37:53,599 --> 0:37:55,040
connection that's not working or not

1043
0:37:55,040 --> 0:37:56,240
working right but today i want to go

1044
0:37:56,240 --> 0:37:57,920
over just a couple quick tools so you

1045
0:37:57,920 --> 0:38:00,480
can determine very quickly what your

1046
0:38:00,480 --> 0:38:02,720
issue might be on the network so i want

1047
0:38:02,720 --> 0:38:04,160
to look at ping and then just to check

1048
0:38:04,160 --> 0:38:06,320
out our address on our computer and so

1049
0:38:06,320 --> 0:38:07,440
the first thing i want to do is give you

1050
0:38:07,440 --> 0:38:09,440
this scenario we're on the computer and

1051
0:38:09,440 --> 0:38:11,599
we're trying to go somewhere like google

1052
0:38:11,599 --> 0:38:13,680
and it says unable to connect oh we

1053
0:38:13,680 --> 0:38:15,599
can't get online so the first thing i

1054
0:38:15,599 --> 0:38:17,280
would do is open up a command line

1055
0:38:17,280 --> 0:38:19,200
window and i would say let's try to ping

1056
0:38:19,200 --> 0:38:20,800
google so ping

1057
0:38:20,800 --> 0:38:23,839
google.com network is unreachable okay

1058
0:38:23,839 --> 0:38:26,640
well i know that the google dns server

1059
0:38:26,640 --> 0:38:29,599
has an ip address of 8.8.8.8 so that's

1060
0:38:29,599 --> 0:38:31,920
the next thing i would do to eliminate

1061
0:38:31,920 --> 0:38:34,079
whether it's dns right maybe it's dns

1062
0:38:34,079 --> 0:38:35,920
that's not working so i want to see if

1063
0:38:35,920 --> 0:38:37,440
my network itself is working so i'm

1064
0:38:37,440 --> 0:38:39,079
going to say ping

1065
0:38:39,079 --> 0:38:40,960
8.8.8.8

1066
0:38:40,960 --> 0:38:43,599
ah network is still unreachable okay so

1067
0:38:43,599 --> 0:38:45,680
there's an issue with more than dns that

1068
0:38:45,680 --> 0:38:47,440
means that there's a problem with my

1069
0:38:47,440 --> 0:38:49,839
network so let's look and see what our

1070
0:38:49,839 --> 0:38:51,440
network address looks like now there's a

1071
0:38:51,440 --> 0:38:53,520
couple tools you can try to type if

1072
0:38:53,520 --> 0:38:55,839
config if this doesn't work yes see it's

1073
0:38:55,839 --> 0:38:57,920
not on my system it's a newer system so

1074
0:38:57,920 --> 0:38:59,359
type ip

1075
0:38:59,359 --> 0:39:01,280
add for address

1076
0:39:01,280 --> 0:39:03,760
and it will give you the ip addresses on

1077
0:39:03,760 --> 0:39:06,079
your local computer for your network

1078
0:39:06,079 --> 0:39:08,920
devices so this is the localhost

1079
0:39:08,920 --> 0:39:11,040
127.0.0.1 this is just like a virtual

1080
0:39:11,040 --> 0:39:13,280
host that says it's it's local so we

1081
0:39:13,280 --> 0:39:14,800
don't want to use this one but this is

1082
0:39:14,800 --> 0:39:17,200
our ethernet port right eth0 and it

1083
0:39:17,200 --> 0:39:18,400
looks like we have an address of

1084
0:39:18,400 --> 0:39:20,320
10.10.10.10.

1085
0:39:20,320 --> 0:39:22,880
so i would say let's ping that so let's

1086
0:39:22,880 --> 0:39:24,320
make sure that you know our network

1087
0:39:24,320 --> 0:39:26,560
stack itself is working okay so this is

1088
0:39:26,560 --> 0:39:29,760
working i can ping my own ip address so

1089
0:39:29,760 --> 0:39:31,520
the ip stack itself is working i'm going

1090
0:39:31,520 --> 0:39:33,440
to hit control c

1091
0:39:33,440 --> 0:39:35,119
but for some reason i'm unable to ping

1092
0:39:35,119 --> 0:39:37,440
out of the network now let's assume that

1093
0:39:37,440 --> 0:39:38,240
my

1094
0:39:38,240 --> 0:39:41,520
gateway address is 10.10.10.1

1095
0:39:41,520 --> 0:39:42,400
ping

1096
0:39:42,400 --> 0:39:45,680
10.10.10.1

1097
0:39:45,680 --> 0:39:48,160
okay i can ping other computers on my

1098
0:39:48,160 --> 0:39:50,880
network so it's not well first of all we

1099
0:39:50,880 --> 0:39:52,400
know it's not my computer cable right

1100
0:39:52,400 --> 0:39:54,720
because i can ping a different computer

1101
0:39:54,720 --> 0:39:57,280
that's across the network but i'm still

1102
0:39:57,280 --> 0:40:00,400
unable to ping google so for some reason

1103
0:40:00,400 --> 0:40:03,520
my internet connection is down

1104
0:40:03,520 --> 0:40:05,839
well let's look at our ip routing

1105
0:40:05,839 --> 0:40:09,440
information i'm going to type ipspace

1106
0:40:09,440 --> 0:40:10,640
route

1107
0:40:10,640 --> 0:40:11,920
and press enter

1108
0:40:11,920 --> 0:40:14,440
all right it looks like

1109
0:40:14,440 --> 0:40:17,280
10.10.10.0-24 so this network is

1110
0:40:17,280 --> 0:40:20,480
directly accessible via eth0 okay so

1111
0:40:20,480 --> 0:40:21,839
that's working that's why we could ping

1112
0:40:21,839 --> 0:40
this up here but if you'll notice now

1113
0:40 --> 0:40:25,839
you might not notice but there's a line

1114
0:40:25,839 --> 0:40:28,160
here that's missing we don't have a

1115
0:40:28,160 --> 0:40:30,640
default route set so that means that the

1116
0:40:30,640 --> 0:40:33,040
computer while it can access other

1117
0:40:33,040 --> 0:40:34,800
network or other computers on our local

1118
0:40:34,800 --> 0:40:36,480
network it doesn't know where to send

1119
0:40:36,480 --> 0:40:38,400
network or where to send packets that

1120
0:40:38,400 --> 0:40:40,480
are destined for another network there's

1121
0:40:40,480 --> 0:40:41,359
no

1122
0:40:41,359 --> 0:40:44,079
ip routing information here now if this

1123
0:40:44,079 --> 0:40:46,079
is an ip routing nugget i could say okay

1124
0:40:46,079 --> 0:40:48,079
let's add a route manually but this is

1125
0:40:48,079 --> 0:40:49,920
more of a troubleshooting nugget so

1126
0:40:49,920 --> 0:40
here's the deal probably when we got our

1127
0:40 --> 0:40:54,480
dhcp address we didn't get all the

1128
0:40:54,480 --> 0:40:56,480
information or something fell apart the

1129
0:40:56,480 --> 0:40:58,480
first thing you do is either turn it off

1130
0:40:58,480 --> 0:41:00,160
and turn it back on right that's that's

1131
0:41:00,160 --> 0:41:02,720
the standard it guy response right well

1132
0:41:02,720 --> 0:41:04,800
in this case it might work or we could

1133
0:41:04,800 --> 0:41:07,760
actually go and just go to our wired

1134
0:41:07,760 --> 0:41:09,920
network interface here turn just the

1135
0:41:09,920 --> 0:41:13,839
network interface off

1136
0:41:13,839 --> 0:41:16,400
connect again turn it back on and now

1137
0:41:16,400 --> 0:41:17,920
let's well let's just look and see what

1138
0:41:17,920 --> 0:41:20,720
our ip route information looks like haha

1139
0:41:20,720 --> 0:41:22,240
look when we brought our network

1140
0:41:22,240 --> 0:41:24,640
interface down and back up now we have a

1141
0:41:24,640 --> 0:41:26,720
default route added so now let's see if

1142
0:41:26,720 --> 0:41:29,839
we can ping google.com

1143
0:41:29,839 --> 0:41:31,920
boom we're able to ping it we go over

1144
0:41:31,920 --> 0:41:34,079
here and we should be able to access

1145
0:41:34,079 --> 0:41
google as well and sure enough there's

1146
0:41 --> 0:41:38,079
google so we've successfully

1147
0:41:38,079 --> 0:41:39,839
troubleshooted the problem with our

1148
0:41:39,839 --> 0:41:41,440
network connection in our case it was a

1149
0:41:41,440 --> 0:41:43,040
route thing and really just turning off

1150
0:41:43,040 --> 0:41:44,319
the network interface and turning it

1151
0:41:44,319 --> 0:41:47,040
back on was the way to solve it but the

1152
0:41:47,040 --> 0:41:48,640
important part is going through the

1153
0:41:48,640 --> 0:41:50,880
process of determining where the problem

1154
0:41:50,880 --> 0:41:52,880
is we knew it wasn't a network line or

1155
0:41:52,880 --> 0:41:54,800
that network cable because we were able

1156
0:41:54,800 --> 0:41:56,880
to ping other computers

1157
0:41:56,880 --> 0:41:58,880
on our network so it's just a matter of

1158
0:41:58,880 --> 0:42:00,240
troubleshooting and going down the list

1159
0:42:00,240 --> 0:42:01,920
of where can i connect where can i

1160
0:42:01,920 --> 0:42:04,079
connect and what might cause those

1161
0:42:04,079 --> 0:42
issues figuring out connectivity

1162
0:42 --> 0:42
problems is sometimes more of an art

1163
0:42 --> 0:42:09,839
form than it is a science you just have

1164
0:42:09,839 --> 0:42:11,760
to kind of put yourself in the mindset

1165
0:42:11,760 --> 0:42:13,520
of a packet and say okay what

1166
0:42:13,520 --> 0:42:16,240
information do i need to go from point a

1167
0:42:16,240 --> 0:42:19,040
to point b and what is stopping me from

1168
0:42:19,040 --> 0:42:21,119
getting in between there tools like ping

1169
0:42:21,119 --> 0:42:23,280
were are able to make sure that you can

1170
0:42:23,280 --> 0:42:25,920
or can't connect to remote computers and

1171
0:42:25,920 --> 0:42:28,160
then using the ip80d you can see what

1172
0:42:28,160 --> 0:42:32,400
your address is we also used iprout

1173
0:42:32,400 --> 0:42:34,800
to look at the ip route information and

1174
0:42:34,800 --> 0:42
that's where we discovered we didn't

1175
0:42 --> 0:42
have a default route but tools like this

1176
0:42 --> 0:42:39,440
are what you can use to troubleshoot

1177
0:42:39,440 --> 0:42:41,359
your connectivity to figure out what's

1178
0:42:41,359 --> 0:42:43,760
going on but don't forget always check

1179
0:42:43,760 --> 0:42:45,680
that cable because sometimes it's just a

1180
0:42:45,680 --> 0:42:48,640
physical cable unplugged

1181
0:42:48,640 --> 0:42:52,160
dns or domain name system is the way

1182
0:42:52,160 --> 0:42:54,640
that your computer converts a url or a

1183
0:42:54,640 --> 0:42:58,160
domain name like google.com into the

1184
0:42:58,160 --> 0:43:00,960
numbers the ip address that the actual

1185
0:43:00,960 --> 0:43:03,520
computer knows how to connect to using

1186
0:43:03,520 --> 0:43:06,640
ip routing so google.com

1187
0:43:06,640 --> 0:43:08,160
isn't really helpful for anything except

1188
0:43:08,160 --> 0:43:10,160
for dns really what the computer needs

1189
0:43:10,160 --> 0:43:11,680
is that ip address so that it can get

1190
0:43:11,680 --> 0:43:13,200
there now there's a couple tools that we

1191
0:43:13,200 --> 0:43:15,760
can use to test dns on our system one of

1192
0:43:15,760 --> 0:43:17,359
the most common is ping right you just

1193
0:43:17,359 --> 0:43:18,880
ping and see if it can reach it if it

1194
0:43:18,880 --> 0:43:20,560
can reach it and get a response hey it's

1195
0:43:20,560 --> 0:43:22,720
working great but there are three other

1196
0:43:22,720 --> 0:43:24,960
common tools that i want to cover dig

1197
0:43:24,960 --> 0:43:27,680
nslookup in host and let's actually look

1198
0:43:27,680 --> 0:43:29,680
at those individually because they all

1199
0:43:29,680 --> 0:43:31,280
do about the same thing but they do it

1200
0:43:31,280 --> 0:43:34,240
in a slightly different way now dig is

1201
0:43:34,240 --> 0:43:36,480
the program that i use most often only

1202
0:43:36,480 --> 0:43:38,480
because it has a cool name right there's

1203
0:43:38,480 --> 0:43:39,920
really no reason that i use it other

1204
0:43:39,920 --> 0:43:41,599
than the word dig is just kind of cool

1205
0:43:41,599 --> 0:43:42,560
so

1206
0:43:42,560 --> 0:43:43,359
dig

1207
0:43:43,359 --> 0:43:45,680
you type dig and then you can just type

1208
0:43:45,680 --> 0:43:47,440
the host you want to look up like dig

1209
0:43:47,440 --> 0:43:50,240
google.com and it will use your default

1210
0:43:50,240 --> 0:43:52,640
dns server and look it up if you want to

1211
0:43:52,640 --> 0:43:55,760
specify a dns server for it to use

1212
0:43:55,760 --> 0:43:57,440
instead of the one that your system is

1213
0:43:57,440 --> 0:43:58,960
currently using which is a way that you

1214
0:43:58,960 --> 0:44:01,920
can test your particular dns server you

1215
0:44:01,920 --> 0:44:04,240
you put the at symbol and then the ip

1216
0:44:04,240 --> 0:44:05,920
address of the server that you want to

1217
0:44:05,920 --> 0:44:08,160
query now the other two programs can do

1218
0:44:08,160 --> 0:44:09,359
the same thing they just do it in a

1219
0:44:09,359 --> 0:44:11,839
different order you can say nslookup and

1220
0:44:11,839 --> 0:44:14,160
the host you want to look up and then if

1221
0:44:14,160 --> 0:44:15,920
you want to specify a server again you

1222
0:44:15,920 --> 0:44:17,440
don't have to but if you want to then

1223
0:44:17,440 --> 0:44:19,520
you put the server after that same thing

1224
0:44:19,520 --> 0:44:22,160
with the host command you put type host

1225
0:44:22,160 --> 0:44:23,599
the host name you want to look up and

1226
0:44:23,599 --> 0:44:25,760
then if you want to specify a server you

1227
0:44:25,760 --> 0:44:27,200
put it there if you leave it off it'll

1228
0:44:27,200 --> 0:44:29,119
use your default and they all like i

1229
0:44:29,119 --> 0:44:31,359
said do kind of the same thing so let's

1230
0:44:31,359 --> 0:44:33,680
look at them really quickly and then

1231
0:44:33,680 --> 0:44:35,359
i'll talk about how to query different

1232
0:44:35,359 --> 0:44:36,800
servers and do just a little bit of

1233
0:44:36,800 --> 0:44:38,800
troubleshooting on your system because

1234
0:44:38,800 --> 0:44:41,119
testing dns is kind of vital if you want

1235
0:44:41,119 --> 0:44:43,280
things to work on your system and they

1236
0:44:43,280 --> 0:44:45,119
don't seem to be so first of all let's

1237
0:44:45,119 --> 0:44:46,319
look at them all

1238
0:44:46,319 --> 0:44:47,760
how they function just by default so i'm

1239
0:44:47,760 --> 0:44:49,119
going to say dig

1240
0:44:49,119 --> 0:44:50,880
google.com

1241
0:44:50,880 --> 0:44:52,800
all right and this is the response i get

1242
0:44:52,800 --> 0:44:55,680
it's queried my default server and we

1243
0:44:55,680 --> 0:44:57,839
can look my default server is listed

1244
0:44:57,839 --> 0:44:59,160
right here

1245
0:44:59,160 --> 0:45:01,920
8.8.8.8 so that's pretty awesome and

1246
0:45:01,920 --> 0:45:03,680
this is the response it gets there's a

1247
0:45:03,680 --> 0:45:06,640
bunch of a records for google.com now

1248
0:45:06,640 --> 0:45:08,319
let me clear the screen we can do the

1249
0:45:08,319 --> 0:45:10,800
same thing with ns look up

1250
0:45:10,800 --> 0:45:12,960
google.com and this is going to give us

1251
0:45:12,960 --> 0:45:14,720
a little bit different format right it

1252
0:45:14,720 --> 0:45:16,880
says our server right here this is the

1253
0:45:16,880 --> 0:45:18,480
ooh i missed i highlighted the wrong

1254
0:45:18,480 --> 0:45:20,319
line that's our server the same server

1255
0:45:20,319 --> 0:45:22,240
of course it's our default server and it

1256
0:45:22,240 --> 0:45:24,079
gives us all the addresses these are all

1257
0:45:24,079 --> 0:45:26,480
the a records a little less detail but

1258
0:45:26,480 --> 0:45:28,400
it gives us the same information now if

1259
0:45:28,400 --> 0:45:30,319
somebody tells you that ns lookup is

1260
0:45:30,319 --> 0:45:32,720
deprecated and it's not used anymore and

1261
0:45:32,720 --> 0:45:34,560
it's going to be abandoned if there's a

1262
0:45:34,560 --> 0:45:37,680
weird case with nslookup that's true

1263
0:45:37,680 --> 0:45:39,599
until it wasn't they were going to get

1264
0:45:39,599 --> 0:45:42,480
rid of nslookup and replace it with dig

1265
0:45:42,480 --> 0:45:45,440
but then they came out with bind 9.3 and

1266
0:45:45,440 --> 0:45:47,520
for some reason decided that nslookup

1267
0:45:47,520 --> 0:45:48,960
was going to stick around so we have

1268
0:45:48,960 --> 0:45:51,599
nslookup and dig and lastly let's clear

1269
0:45:51,599 --> 0:45:54,400
the screen again we can just say host

1270
0:45:54,400 --> 0:45:56,079
google.com and this will give us

1271
0:45:56,079 --> 0:45:58,160
information as well it actually doesn't

1272
0:45:58,160 --> 0:46:00,160
tell us what default server it's using

1273
0:46:00,160 --> 0:46:01,680
but it gives us a lot of information

1274
0:46:01,680 --> 0:46:03,440
these are all of the a records for it

1275
0:46:03,440 --> 0:46:05,119
these are all you know the ip addresses

1276
0:46:05,119 --> 0:46:07,200
this one actually also tells us the mail

1277
0:46:07,200 --> 0:46:10,240
handlers the mx records for google.com's

1278
0:46:10,240 --> 0:46:11,839
domain which is kind of interesting as

1279
0:46:11,839 --> 0:46:13,839
well so just pick the one that you like

1280
0:46:13,839 --> 0:46
the best and that's what you can use and

1281
0:46 --> 0:46
the reason that it's important to

1282
0:46 --> 0:46
pick one that you like and use it often

1283
0:46 --> 0:46:21,280
is so that you're comfortable with it

1284
0:46:21,280 --> 0:46:23,520
right like i said i usually use dig and

1285
0:46:23,520 --> 0:46:25,280
that's weird i know because it's the

1286
0:46:25,280 --> 0:46:27,920
least like common way to

1287
0:46:27,920 --> 0:46:29,599
handle specifying a server right the

1288
0:46:29,599 --> 0:46:31,680
other two you do you know like nslookup

1289
0:46:31,680 --> 0:46:33,440
what you're looking up and then a server

1290
0:46:33,440 --> 0:46:35,920
with dig you say dig

1291
0:46:35,920 --> 0:46:38,760
at and let's say

1292
0:46:38,760 --> 0:46:41,839
127.0.0.1 that's localhost right so dig

1293
0:46:41,839 --> 0:46:43,440
at localhost

1294
0:46:43,440 --> 0:46:45,839
for google.com

1295
0:46:45,839 --> 0:46:49,119
and we got a response okay google.com

1296
0:46:49,119 --> 0:46:51,680
and it gave us this address which is

1297
0:46:51,680 --> 0:46:54,079
different but it came from our local

1298
0:46:54,079 --> 0:46
server now it did not get all the same

1299
0:46 --> 0:46:59,920
responses that we got from the 8.8.8.8

1300
0:46:59,920 --> 0:47:01,200
domain server you know our default

1301
0:47:01,200 --> 0:47:03,920
domain server if we were to say dig

1302
0:47:03,920 --> 0:47:07,200
at 8.8.8.8

1303
0:47:07,200 --> 0:47:09,359
google.com we would get a totally

1304
0:47:09,359 --> 0:47:12,079
different set of ip addresses so that's

1305
0:47:12,079 --> 0:47:13,760
why it's really important to be able to

1306
0:47:13,760 --> 0:47:16,160
query different servers so that you can

1307
0:47:16,160 --> 0:47:17,680
get different responses because on this

1308
0:47:17,680 --> 0:47:19,760
computer if we try to ping

1309
0:47:19,760 --> 0:47:21,520
google.com

1310
0:47:21,520 --> 0:47:22,880
it's going to try to ping that other

1311
0:47:22,880 --> 0:47:24,960
address and time to live exceeded it's

1312
0:47:24,960 --> 0:47:27,040
not ever going to work so there's

1313
0:47:27,040 --> 0:47:28,880
something wrong with the dns server

1314
0:47:28,880 --> 0:47:31,280
running on localhost now i'll show you

1315
0:47:31,280 --> 0:47
what the problem is

1316
0:47 --> 0:47:36,480
the hosts file i've actually sabotaged

1317
0:47:36,480 --> 0:47:38,640
here this is the etc hosts file this is

1318
0:47:38,640 --> 0:47:41,200
where your computer will look first for

1319
0:47:41,200 --> 0:47:43,920
any dns lookups and sure enough i've

1320
0:47:43,920 --> 0:47:46,079
kind of bamboozled it here i put the the

1321
0:47:46,079 --> 0:47:48,880
wrong ip address for google.com so i put

1322
0:47:48,880 --> 0:47:52,800
that in there

1323
0:47:52,800 --> 0:47:55,680
now if i restart our local server

1324
0:47:55,680 --> 0:47:58,800
now if i try to ping google.com

1325
0:47:58,800 --> 0:48:00,240
it's going to be just fine because it's

1326
0:48:00,240 --> 0:48:01,920
going to actually use the real address

1327
0:48:01,920 --> 0:48:03,440
that it looked up on the internet but

1328
0:48:03,440 --> 0:48:04,960
that's how you can use the different

1329
0:48:04,960 --> 0:48:07,760
tools to specify not only what host you

1330
0:48:07,760 --> 0:48:09,920
want to look up but what server you want

1331
0:48:09,920 --> 0:48:12,079
to query when you look it up so

1332
0:48:12,079 --> 0:48:13,680
whichever one of these makes the most

1333
0:48:13,680 --> 0:48:16,079
sense to you or whichever formatted

1334
0:48:16,079 --> 0:48:17,920
results you like best just pick one and

1335
0:48:17,920 --> 0:48:19,680
use that because you can specify a

1336
0:48:19,680 --> 0:48:21,200
server for each of the different

1337
0:48:21,200 --> 0:48:23,440
commands but knowing how to use them is

1338
0:48:23,440 --> 0:48:25,040
important because troubleshooting

1339
0:48:25,040 --> 0:48:27,359
usually means querying more than one dns

1340
0:48:27,359 --> 0:48:29,040
server so you can figure out what the

1341
0:48:29,040 --> 0:48:31,520
heck is going on

1342
0:48:31,520 --> 0:48:33,200
one of my favorite things about linux is

1343
0:48:33,200 --> 0:48:35,839
that everything is configured with text

1344
0:48:35,839 --> 0:48:38,319
files right it's just plain text files

1345
0:48:38,319 --> 0:48:40,319
it's awesome and the network is no

1346
0:48:40,319 --> 0:48:41,920
different it's configured with text

1347
0:48:41,920 --> 0:48:44,160
files now there are a few differences

1348
0:48:44,160 --> 0:48:45,839
when it comes to distributions if you're

1349
0:48:45,839 --> 0:48:48,160
on debian or if you're on centos there

1350
0:48:48,160 --> 0:48:49,839
are going to be some configuration files

1351
0:48:49,839 --> 0:48:51,760
that are different because they

1352
0:48:51,760 --> 0:48:53,599
configure their networks different now

1353
0:48:53,599 --> 0:48:55,760
there's nothing wrong with being unique

1354
0:48:55,760 --> 0:48:57,599
i really like the differences in the

1355
0:48:57,599 --> 0:49:00,240
distributions but there are some files

1356
0:49:00,240 --> 0:49:02,559
that are consistent regardless of what

1357
0:49:02,559 --> 0:49:04,480
distribution you're using we're going to

1358
0:49:04,480 --> 0:49
call those the common files and that's

1359
0:49 --> 0:49:07,839
what we're going to look like look at in

1360
0:49:07,839 --> 0:49:10,160
this nugget these files here are

1361
0:49:10,160 --> 0:49:12,480
consistent across the board they're just

1362
0:49:12,480 --> 0:49:14,480
kind of standard linux files so i want

1363
0:49:14,480 --> 0:49:16,160
to show you what they are and and where

1364
0:49:16,160 --> 0:49:18,160
they live and how they are configured

1365
0:49:18,160 --> 0:49:20,400
and what they do and that's again just

1366
0:49:20,400 --> 0:49:21,920
the common files there's going to be

1367
0:49:21,920 --> 0:49:23,680
specifics in the different distros but

1368
0:49:23,680 --> 0:49:25,119
we're just looking at the files that are

1369
0:49:25,119 --> 0:49
common to linux in general in this case

1370
0:49 --> 0:49:29,280
we're going to look at the files in

1371
0:49:29,280 --> 0:49:31,040
ubuntu and the first one i want to look

1372
0:49:31,040 --> 0:49:33,839
at is the etc hosts file so let's

1373
0:49:33,839 --> 0:49:35,839
actually become root if we want to edit

1374
0:49:35,839 --> 0:49:37,599
them we have to be root to do so so i'm

1375
0:49:37,599 --> 0:49:40,480
going to look at etc hosts there's no

1376
0:49:40,480 --> 0:49:43,440
extension at the end it's just etc hosts

1377
0:49:43,440 --> 0:49:45,920
and this is a file that acts kind of

1378
0:49:45,920 --> 0:49:49,359
like the first resort dns lookup so

1379
0:49:49,359 --> 0:49:52,240
before a system even looks things up via

1380
0:49:52,240 --> 0:49:54,559
dns it looks in here and there's a

1381
0:49:54,559 --> 0:49:56,160
couple things here like localhost and

1382
0:49:56,160 --> 0:49:58,319
ubuntu this is our hostname are set up

1383
0:49:58,319 --> 0:50:00,640
in here but we can add something we can

1384
0:50:00,640 --> 0:50:02,720
say what if we wanted to make sure users

1385
0:50:02,720 --> 0:50:04,400
were never able to go to google we could

1386
0:50:04,400 --> 0:50:06,520
say okay

1387
0:50:06,520 --> 0:50:09,200
127.0.0.1 which is our localhost is now

1388
0:50:09,200 --> 0:50:10,400
going to be

1389
0:50:10,400 --> 0:50:12,400
google.com so if somebody tries to go to

1390
0:50:12,400 --> 0:50:14,880
google.com they're going to try to hit

1391
0:50:14,880 --> 0:50:16,240
our local machine and we don't have a

1392
0:50:16,240 --> 0:50:17,839
web server at all so it's just going to

1393
0:50:17,839 --> 0:50:20,640
error out so if we save that

1394
0:50:20,640 --> 0:50:22,559
now on our computer if somebody tries to

1395
0:50:22,559 --> 0:50:24,400
go to google it's going to fail

1396
0:50:24,400 --> 0:50:26,800
so google.com

1397
0:50:26,800 --> 0:50:28,240
unable to connect even though our

1398
0:50:28,240 --> 0:50
network is working just fine we could go

1399
0:50 --> 0:50:33,200
to yahoo if we wanted

1400
0:50:33,200 --> 0:50:35,359
it's just a matter of that dns entry in

1401
0:50:35,359 --> 0:50:38,319
the etc hosts file that we kind of broke

1402
0:50:38,319 --> 0:50
all right so another place we can look

1403
0:50 --> 0:50:42,640
is in the etc

1404
0:50:42,640 --> 0:50:45,440
switch dot conf file now this configures

1405
0:50:45,440 --> 0:50:47,599
a bunch of things on our system like

1406
0:50:47,599 --> 0:50:49,200
group and password files but what i want

1407
0:50:49,200 --> 0:50:51,760
to show you specifically here is the

1408
0:50:51,760 --> 0:50:54,400
hosts line so this is saying where does

1409
0:50:54,400 --> 0:50:57,280
it look for dns lookups to you know find

1410
0:50:57,280 --> 0:50:59,359
what the host's ip addresses are the

1411
0:50:59,359 --> 0:51:02,480
first one is called files this points to

1412
0:51:02,480 --> 0:51:05,359
etc hosts if we have this listed first

1413
0:51:05,359 --> 0:51:07,280
that means before it queries a dns

1414
0:51:07,280 --> 0:51:10,400
server it's going to query that file

1415
0:51:10,400 --> 0:51:12,079
it's going to look in that file first

1416
0:51:12,079 --> 0:51
and then in order these are what it's

1417
0:51 --> 0:51:15,520
going to do from there it's going to do

1418
0:51:15,520 --> 0:51:18,400
you know the mdns for local lookups and

1419
0:51:18,400 --> 0:51:20,480
then it's going to use a dns server so

1420
0:51:20,480 --> 0:51:22,720
this is the order that it's going in but

1421
0:51:22,720 --> 0:51:24,800
the first one it looks in is the files

1422
0:51:24,800 --> 0:51:27,599
specifically that etc hosts file

1423
0:51:27,599 --> 0:51:28,880
so you can change the order of that i

1424
0:51:28,880 --> 0:51:30,319
don't recommend changing the order

1425
0:51:30,319 --> 0:51:31,920
because that's kind of what we wanted to

1426
0:51:31,920 --> 0:51:32,640
do

1427
0:51:32,640 --> 0:51:34,720
but one more thing i want to show you is

1428
0:51:34,720 --> 0:51:37,240
etc

1429
0:51:37,240 --> 0:51:39,280
resolve.conf and this is a little bit of

1430
0:51:39,280 --> 0:51:42,559
a confusing file because while this

1431
0:51:42,559 --> 0:51:45,440
tells the computer what name server to

1432
0:51:45,440 --> 0:51
use you'll notice up here it says do not

1433
0:51 --> 0:51:50,640
edit this file now back in the day you

1434
0:51:50,640 --> 0:51:52,240
would just put name server and then the

1435
0:51:52,240 --> 0:51:54,160
name server you wanted to use on your

1436
0:51:54,160 --> 0:51:56,640
system but now this is all handled with

1437
0:51:56,640 --> 0:52:00,240
the systemd resolve d service and and it

1438
0:52:00,240 --> 0:52:03,119
creates this file on the fly so really

1439
0:52:03,119 --> 0:52:05,040
we do not edit this at all network

1440
0:52:05,040 --> 0:52:08,160
manager handles all of the name server

1441
0:52:08,160 --> 0:52:10,800
entries in here um or whatever your

1442
0:52:10,800 --> 0:52:12,480
distribution uses for configuring the

1443
0:52:12,480 --> 0:52:14,640
network so we don't actually edit this

1444
0:52:14,640 --> 0:52:18,240
but if you want to see what server your

1445
0:52:18,240 --> 0:52:20,400
your particular computer is using you

1446
0:52:20,400 --> 0:52:22,160
can look in here and it looks like it's

1447
0:52:22,160 --> 0:52:24,119
it's querying

1448
0:52:24,119 --> 0:52:26,559
127.0.0.53 which is another ip address

1449
0:52:26,559 --> 0:52:28,960
to our local computer so that means that

1450
0:52:28,960 --> 0:52:31,520
it has some sort of local caching dns

1451
0:52:31,520 --> 0:52:34,400
server and it's not querying directly to

1452
0:52:34,400 --> 0:52:35,920
the internet

1453
0:52:35,920 --> 0:52:37,920
now you probably noticed that all of

1454
0:52:37,920 --> 0:52:40,800
these common files have to do with dns

1455
0:52:40,800 --> 0:52:42,640
and that's fine but it's it's

1456
0:52:42,640 --> 0:52:45,440
interesting that dns is kind of commonly

1457
0:52:45,440 --> 0:52:47,920
configured across the distributions when

1458
0:52:47,920 --> 0:52:49,599
it comes to actually configuring the

1459
0:52:49,599 --> 0:52:51,839
individual network

1460
0:52:51,839 --> 0:52:54,240
devices that's drastically different

1461
0:52:54,240 --> 0:52:55,920
from one distribution to the next but

1462
0:52:55,920 --> 0:52:58,640
the common files are generally dns files

1463
0:52:58,640 --> 0:53:00,160
and that's what we looked at in this

1464
0:53:00,160 --> 0:53:01,599
nugget

1465
0:53:01,599 --> 0:53:03,200
ubuntu is one of the most common

1466
0:53:03,200 --> 0:53:05,280
distributions out there but it's based

1467
0:53:05,280 --> 0:53:08,319
on and built upon debian so when we look

1468
0:53:08,319 --> 0:53:10,480
at configuring one it's very similar to

1469
0:53:10,480 --> 0:53:12,160
configuring the other and that's the

1470
0:53:12,160 --> 0:53
case with network files now i want to

1471
0:53 --> 0:53:15,599
show you where to find the different

1472
0:53:15,599 --> 0:53:17,920
network files on an ubuntu or debian

1473
0:53:17,920 --> 0:53:20,160
system but it's important to note that

1474
0:53:20,160 --> 0:53:22,160
in the last

1475
0:53:22,160 --> 0:53:24,160
iteration of their long-term support for

1476
0:53:24,160 --> 0:53:26,559
ubuntu that's when a change has been

1477
0:53:26,559 --> 0:53:29,680
made to how the network is configured

1478
0:53:29,680 --> 0:53:31,119
and what files are used and how those

1479
0:53:31,119 --> 0:53:33,280
files are configured now there is one

1480
0:53:33,280 --> 0:53:35,040
commonality between them and that's if

1481
0:53:35,040 --> 0:53:37,200
you use network manager to manage your

1482
0:53:37,200 --> 0:53:38,319
network instead of editing the

1483
0:53:38,319 --> 0:53:40,480
configuration files that hasn't changed

1484
0:53:40,480 --> 0:53:42,240
you can still use that across all the

1485
0:53:42,240 --> 0:53:44,240
versions that are current with ubuntu

1486
0:53:44,240 --> 0:53:46,960
and debian but these two ways have

1487
0:53:46,960 --> 0:53:48,640
changed so first i want to look at the

1488
0:53:48,640 --> 0:53:51,200
older version of ubuntu and when i say

1489
0:53:51,200 --> 0:53:53,359
older i mean one that's still valid to

1490
0:53:53,359 --> 0:53:55,839
use as of the date today you can still

1491
0:53:55,839 --> 0:53:58,079
use version 1604 let's see what version

1492
0:53:58,079 --> 0:54:03,640
this is etc os release so this is ubuntu

1493
0:54:03,640 --> 0:54:06,480
1604.1lts long-term support and this is

1494
0:54:06,480 --> 0:54:09,520
still as of today a valid version of

1495
0:54:09,520 --> 0:54:12,079
ubuntu to use in production but this is

1496
0:54:12,079 --> 0:54:15,599
configured by going into the etc

1497
0:54:15,599 --> 0:54:17,760
network directory and there's a single

1498
0:54:17,760 --> 0:54:20,319
file in here called interfaces so if we

1499
0:54:20,319 --> 0:54:21,440
look at

1500
0:54:21,440 --> 0:54:23,520
interfaces we're going to see this is

1501
0:54:23,520 --> 0:54:25,920
how you configure a network interface

1502
0:54:25,920 --> 0:54:27,920
with an older version of ubuntu or

1503
0:54:27,920 --> 0:54:30,160
debian now this is pretty much the

1504
0:54:30,160 --> 0:54:31,599
stanza that you configure there's

1505
0:54:31,599 --> 0:54:32,880
usually something in here you can look

1506
0:54:32,880 --> 0:54:34,800
at and base it off of but this is the

1507
0:54:34,800 --> 0:54
format for it we're not going to go

1508
0:54 --> 0:54:37,200
through the you know configuring

1509
0:54:37,200 --> 0:54:38,160
different things it's pretty

1510
0:54:38,160 --> 0:54:40,240
straightforward you don't have to indent

1511
0:54:40,240 --> 0:54:43,119
this is just for ease of readability but

1512
0:54:43,119 --> 0:54:45,520
this is how you configure a network

1513
0:54:45,520 --> 0:54:48,240
interface via the configuration files

1514
0:54:48,240 --> 0:54:51,440
now we could still use the um network

1515
0:54:51,440 --> 0:54:53,280
manager if we were on a gui system like

1516
0:54:53,280 --> 0:54:54,960
this is a gui system we could use that

1517
0:54:54,960 --> 0:54:57,359
but i'm actually ssh into a server that

1518
0:54:57,359 --> 0:54:59,599
doesn't have a gui interface and that's

1519
0:54:59,599 --> 0:55:01,119
where we use these

1520
0:55:01,119 --> 0:55:03,520
network files to configure it so let's

1521
0:55:03,520 --> 0:55:05,119
quit this one this is how you configure

1522
0:55:05,119 --> 0:55:06,960
an older version but a modern version

1523
0:55:06,960 --> 0:55:09,040
like 1804

1524
0:55:09,040 --> 0:55:10,799
or the most modern version of debian

1525
0:55:10,799 --> 0:55:12,960
uses a completely different network

1526
0:55:12,960 --> 0:55:15,760
configuration system now here we're on a

1527
0:55:15,760 --> 0:55:17,599
newer version of ubuntu this is actually

1528
0:55:17,599 --> 0:55:21,319
1804. let's check that out so this is

1529
0:55:21,319 --> 0:55:24,319
18.04.1 another long-term support

1530
0:55:24,319 --> 0:55:26,960
release of ubuntu and this one uses the

1531
0:55:26,960 --> 0:55:29,920
net plan system for configuring network

1532
0:55:29,920 --> 0:55:33,119
interface so if you go into etc net plan

1533
0:55:33,119 --> 0:55:34,559
and you look in here depending on what

1534
0:55:34,559 --> 0:55:36,079
kind of system you have you're going to

1535
0:55:36,079 --> 0:55:37,440
have some sort of file in here it's

1536
0:55:37,440 --> 0:55:38,960
either going to be like zero one network

1537
0:55:38,960 --> 0:55:42,240
manager dot yaml or 50 cloud init dot

1538
0:55:42,240 --> 0:55:44,559
yaml if it's a server the thing about

1539
0:55:44,559 --> 0:55:47,200
yaml files so let's look at this

1540
0:55:47,200 --> 0:55:48,880
yaml files do

1541
0:55:48,880 --> 0:55:51,200
depend on indentation in order to be

1542
0:55:51,200 --> 0:55:53,599
properly configured so while with the et

1543
0:55:53,599 --> 0:55:55,599
cetera network interfaces of the old

1544
0:55:55,599 --> 0:55:57,280
ubuntu system it didn't matter how

1545
0:55:57,280 --> 0:55:59,280
things were indented here it really

1546
0:55:59,280 --> 0:56:01,280
really does and so here this is where we

1547
0:56:01,280 --> 0:56:03,520
would configure like a static ip address

1548
0:56:03,520 --> 0:56:05,599
and we you know here's our ip addresses

1549
0:56:05,599 --> 0:56:07,520
gateway name servers the format's a

1550
0:56:07,520 --> 0:56:09,680
little different but it's fairly similar

1551
0:56:09,680 --> 0:56:11,599
conceptually to the old system like i

1552
0:56:11,599 --> 0:56:13,680
said except for that white space that's

1553
0:56:13,680 --> 0:56:16,160
really important that it's indented

1554
0:56:16,160 --> 0:56:18,720
properly so if you make a change to this

1555
0:56:18,720 --> 0:56:22,160
then you just would do sudo netplan

1556
0:56:22,160 --> 0:56:24,960
apply and then it will activate the new

1557
0:56:24,960 --> 0:56:26,720
changes that you made now i do want to

1558
0:56:26,720 --> 0:56:28,640
point out again this is a gui system so

1559
0:56:28,640 --> 0:56:31,520
it has network manager but there's also

1560
0:56:31,520 --> 0:56:33,359
nmtui

1561
0:56:33,359 --> 0:56:35,280
which is network manager text user

1562
0:56:35,280 --> 0:56:36,960
interface and then you can edit

1563
0:56:36,960 --> 0:56:40,079
interfaces using just the text boxes on

1564
0:56:40,079 --> 0:56:41,520
your screen if you don't have a gui

1565
0:56:41,520 --> 0:56:43,599
system installed so that's just one more

1566
0:56:43,599 --> 0:56:45,680
way that you can edit your file in

1567
0:56:45,680 --> 0:56:47,839
ubuntu or debian if you don't have a gui

1568
0:56:47,839 --> 0:56:49,680
but you want to use network manager as

1569
0:56:49,680 --> 0:56:51,520
opposed to just configuring those files

1570
0:56:51,520 --> 0:56:53,359
on your own whether you have an older

1571
0:56:53,359 --> 0:56:56,079
system using etc network interfaces or a

1572
0:56:56,079 --> 0:56:58,240
newer system using configuration files

1573
0:56:58,240 --> 0:57:00,400
and etc netplan configuring the network

1574
0:57:00,400 --> 0:57:03,119
on debian ubuntu is not difficult and

1575
0:57:03,119 --> 0:57:04,799
you know it's usually just a matter of

1576
0:57:04,799 --> 0:57:06,960
changing what's existing but if you want

1577
0:57:06,960 --> 0:57:09,280
to use the network manager to manage all

1578
0:57:09,280 --> 0:57:11,280
those interfaces either using gui or

1579
0:57:11,280 --> 0:57:13,040
text tools you can do that as well it's

1580
0:57:13,040 --> 0:57:15,440
very flexible and even with the change

1581
0:57:15,440 --> 0:57:17,599
in versions it's not a whole lot more

1582
0:57:17,599 --> 0:57:19,680
difficult to do one over the other if

1583
0:57:19,680 --> 0:57:21,200
we've been learning together for a while

1584
0:57:21,200 --> 0:57:23,440
you know that i prefer debian based

1585
0:57:23,440 --> 0:57:26,400
distributions and ubuntu is my jam

1586
0:57:26,400 --> 0:57:28,079
but i have to admit when it comes to

1587
0:57:28,079 --> 0:57:30,960
network configuration files centos or

1588
0:57:30,960 --> 0:57:33,280
red hat they really have an elegant

1589
0:57:33,280 --> 0:57:35,119
solution for how to configure the

1590
0:57:35,119 --> 0:57:37,680
network and there's no confusion between

1591
0:57:37,680 --> 0:57
if you're using the gui network manager

1592
0:57 --> 0:57:41,359
or if you're just using the

1593
0:57:41,359 --> 0:57
configuration files in the etc config

1594
0:57 --> 0:57:45,520
folder let me show you what i mean

1595
0:57:45,520 --> 0:57:48,559
because centos is just so awesome when

1596
0:57:48,559 --> 0:57:50,480
it comes to network configuration now

1597
0:57:50,480 --> 0:57:52,480
here we are on a centos system and it

1598
0:57:52,480 --> 0:57:54,640
doesn't matter which way you configure

1599
0:57:54,640 --> 0:57:56,880
the network interface you can go up here

1600
0:57:56,880 --> 0:57:59,200
and go into the network manager to

1601
0:57:59,200 --> 0:58:01,760
configure it or we can go directly into

1602
0:58:01,760 --> 0:58:04,799
etc sysconfig and i just wanted to show

1603
0:58:04,799 --> 0:58:06,880
you quickly inside the sysconfig folder

1604
0:58:06,880 --> 0:58:08,880
and sent to us is where all of these

1605
0:58:08,880 --> 0:58:10,559
configuration things are this is kind of

1606
0:58:10,559 --> 0:58:12,880
unique to centos and red hat they put

1607
0:58:12,880 --> 0:58:14,799
most of their configuration inside this

1608
0:58:14,799 --> 0:58:17,200
etc sysconfig folder but inside here

1609
0:58:17,200 --> 0:58:18,480
there's also another folder called

1610
0:58:18,480 --> 0:58
network scripts and that's where our

1611
0:58 --> 0:58:22,240
networking is configured if we look in

1612
0:58:22,240 --> 0:58:23,760
here we're going to see there is this

1613
0:58:23,760 --> 0:58:26,480
configuration file for our interface

1614
0:58:26,480 --> 0:58:30,559
ifconfig dash eth0 so let's look at that

1615
0:58:30,559 --> 0:58:33,200
if we edit this it's going to change the

1616
0:58:33,200 --> 0:58:35,440
way our network interface comes up like

1617
0:58:35,440 --> 0:58:37,359
if we were to change boot proto from

1618
0:58:37,359 --> 0:58:39,359
dhcp to

1619
0:58:39,359 --> 0:58:42,119
static and then we were to add a line

1620
0:58:42,119 --> 0:58:43,680
ipaddr

1621
0:58:43,680 --> 0:58:47,440
equals let's say 10.10.10.111

1622
0:58:47,440 --> 0:58:49,280
which is not currently the ip address if

1623
0:58:49,280 --> 0:58:51,920
we were to do that and save it

1624
0:58:51,920 --> 0:58
and then just do a quick sudo

1625
0:58 --> 0:58:57,520
service network restart

1626
0:58:57,520 --> 0:58:59,599
we would be able to restart our service

1627
0:58:59,599 --> 0:59:02,400
and if we were to do ifconfig

1628
0:59:02,400 --> 0:59:04,319
we're going to see scroll up here sure

1629
0:59:04,319 --> 0:59
enough that is our

1630
0:59 --> 0:59:07,520
ip address now now there are a couple

1631
0:59:07,520 --> 0:59:09,280
problems we didn't add like netmask or

1632
0:59:09,280 --> 0:59:11,920
anything so let's go up into

1633
0:59:11,920 --> 0:59:13,680
network manager

1634
0:59:13,680 --> 0:59:15,280
wired settings

1635
0:59:15,280 --> 0:59:16,640
click on the configuration thing so

1636
0:59:16,640 --> 0:59:18,079
we're going to edit this in network

1637
0:59:18,079 --> 0:59:20,960
manager if we go over to ipv4 we can see

1638
0:59:20,960 --> 0:59:23,440
it went from it used to be dhcp now it's

1639
0:59:23,440 --> 0:59:26,160
manual this is the ip address i put in

1640
0:59:26,160 --> 0:59:28,880
and it just guessed this netmask because

1641
0:59:28,880 --> 0:59:31,599
the 10 range is a class a ip address so

1642
0:59:31,599 --> 0:59:33,359
it guessed that i wanted to use a class

1643
0:59:33,359 --> 0:59:35,040
a netmask but i don't i want to use

1644
0:59:35,040 --> 0:59:38,160
255.255.255.0

1645
0:59:38,160 --> 0:59:40,160
and i didn't supply a gateway so let's

1646
0:59:40,160 --> 0:59:43,119
do that now 10.10.10.1

1647
0:59:43,119 --> 0:59:45,280
and i didn't supply any dns server so we

1648
0:59:45,280 --> 0:59:47,240
can do that here

1649
0:59:47,240 --> 0:59:49,920
8.8.8.8 and now we'll save this we'll

1650
0:59:49,920 --> 0:59:51,359
click apply

1651
0:59:51,359 --> 0:59:53,599
if we go back and edit that script sudo

1652
0:59:53,599 --> 0:59:55,520
vi

1653
0:59:55,520 --> 0:59:56,960
we're going to see that some changes

1654
0:59:56,960 --> 0:59:58,480
have been made now this stuff is still

1655
0:59:58,480 --> 1:00:00,160
the same boot proto equals static ip

1656
1:00:00,160 --> 1:00:01,920
address but look down here it added the

1657
1:00:01,920 --> 1:00:03,920
gateway address that we added it added

1658
1:00:03,920 --> 1:00:06,160
the dns server that we added and it

1659
1:00:06,160 --> 1:00:08,280
added the prefix

1660
1:00:08,280 --> 1:00:11,200
255.255.255.0 translates to a

1661
1:00:11,200 --> 1:00:13,440
24-bit netmask so put that in there just

1662
1:00:13,440 --> 1:00:15,280
use a different form and we can see that

1663
1:00:15,280 --> 1:00:16,960
it made the changes to the actual

1664
1:00:16,960 --> 1:00:19,680
configuration files rather than having

1665
1:00:19,680 --> 1:00:21,200
like two different systems and you have

1666
1:00:21,200 --> 1:00:23,200
to decide which one you want to use

1667
1:00:23,200 --> 1:00:25,680
centos allows us to make changes in one

1668
1:00:25,680 --> 1:00:27,839
place and whether we're using the gui

1669
1:00:27,839 --> 1:00:29,760
interface or just this text-based

1670
1:00:29,760 --> 1:00:31,920
interface it's going to allow us to make

1671
1:00:31,920 --> 1:00:34,240
those changes i love that it has all the

1672
1:00:34,240 --> 1:00:36,319
change places in a single file as

1673
1:00:36,319 --> 1:00:38,799
opposed to conflicting and trying to

1674
1:00:38,799 --> 1:00:40,640
decide which method you're going to use

1675
1:00:40,640 --> 1:00:42,559
if you use network manager you you're

1676
1:00:42,559 --> 1:00:44,480
using this configuration file if you

1677
1:00:44,480 --> 1:00:46,400
don't use network manager you're using

1678
1:00:46,400 --> 1:00:48,640
this configuration file so it's a really

1679
1:00:48,640 --> 1:00:50,960
elegant way to handle network interface

1680
1:00:50,960 --> 1:00:52,799
configuration like i said at the

1681
1:00:52,799 --> 1:00:54,799
beginning i'm a debian ubuntu man that's

1682
1:00:54,799 --> 1:00:56,559
what i usually use in my server

1683
1:00:56,559 --> 1:00:58,160
situations but when it comes to

1684
1:00:58,160 --> 1:01
configuring network interfaces man

1685
1:01 --> 1:01:02,319
centos has really stolen the show they

1686
1:01:02,319 --> 1:01:04,480
have an elegant way of doing it either

1687
1:01:04,480 --> 1:01:06,960
using network manager gui tools or using

1688
1:01:06,960 --> 1:01:08,640
the scripts inside the network scripts

1689
1:01:08,640 --> 1:01:12,480
folder of etc sysconfig

1690
1:01:12,480 --> 1:01:15,119
network bonding in linux is really just

1691
1:01:15,119 --> 1:01:17,040
a way to utilize computers that have

1692
1:01:17,040 --> 1:01:18,799
more than one network port and most

1693
1:01:18,799 --> 1:01:20,319
servers nowadays come with that let's

1694
1:01:20,319 --> 1:01:23,680
say you have a server and it has

1695
1:01:23,680 --> 1:01:26,240
three network ports built into it well

1696
1:01:26,240 --> 1:01:30,799
if you have to connect it to a switch

1697
1:01:30,799 --> 1:01:33,520
all each of these connected to a switch

1698
1:01:33,520 --> 1:01:35,680
you would ideally like to use all of

1699
1:01:35,680 --> 1:01:36,960
that bandwidth and you don't want to

1700
1:01:36,960 --> 1:01:38,960
have to supply three different ip

1701
1:01:38,960 --> 1:01:40,960
addresses to the computer you just want

1702
1:01:40,960 --> 1:01:43,680
to use all of the available bandwidth on

1703
1:01:43,680 --> 1:01:45,680
all three of those wires and that's

1704
1:01:45,680 --> 1:01:47,760
where network bonding comes into place

1705
1:01:47,760 --> 1:01:49,680
now there's basically two different

1706
1:01:49,680 --> 1:01:51,359
kinds of network bonds that we're going

1707
1:01:51,359 --> 1:01:53,599
to look at those that require special

1708
1:01:53,599 --> 1:01:55,680
switch support and those that are

1709
1:01:55,680 --> 1:01:57,680
generic and don't require the switch to

1710
1:01:57,680 --> 1:02
know at all what's going on now linux

1711
1:02 --> 1:02:01,920
does provide some pretty cool options

1712
1:02:01,920 --> 1:02:03,359
when it comes to there but the options

1713
1:02:03,359 --> 1:02:04,960
can be a little overwhelming i mean this

1714
1:02:04,960 --> 1:02:06,559
screen is like oh my goodness there's so

1715
1:02:06,559 --> 1:02:08,799
many choices well that's okay because

1716
1:02:08,799 --> 1:02:10,319
your choices are going to be fairly

1717
1:02:10,319 --> 1:02:12,160
limited once you learn what all of these

1718
1:02:12,160 --> 1:02:13,920
are now the first thing i want you to

1719
1:02:13,920 --> 1:02:15,359
look at when we're looking at this list

1720
1:02:15,359 --> 1:02:17,839
is does it require switch support and

1721
1:02:17,839 --> 1:02:20,319
what i mean by that is a lot of switches

1722
1:02:20,319 --> 1:02:22,240
especially layer three switches or smart

1723
1:02:22,240 --> 1:02:23,920
switches they're sometimes called will

1724
1:02:23,920 --> 1:02:26,240
support link aggregation and different

1725
1:02:26,240 --> 1:02:28,240
vendors call it different things but

1726
1:02:28,240 --> 1:02:29,920
it's going to be either link aggregation

1727
1:02:29,920 --> 1:02:33,280
or lacp or ether channel the idea is a

1728
1:02:33,280 --> 1:02:35,680
smart switch will have built-in code

1729
1:02:35,680 --> 1:02:37,920
that will allow them to work together so

1730
1:02:37,920 --> 1:02:40,079
if you have a smart switch chances are

1731
1:02:40,079 --> 1:02:42,480
that you have the ability to use link

1732
1:02:42,480 --> 1:02:45,599
aggregation now some of these require a

1733
1:02:45,599 --> 1:02:47,200
switch that supports that i'm going to

1734
1:02:47,200 --> 1:02:49,119
start with the confusing one here so

1735
1:02:49,119 --> 1:02:51,440
balance round robin basically how

1736
1:02:51,440 --> 1:02:53,599
balanced round robin works is you have

1737
1:02:53,599 --> 1:02:56,319
multiple ports and it says okay when i

1738
1:02:56,319 --> 1:02:58,240
transmit packet 1 i'm going to use this

1739
1:02:58,240 --> 1:03:00,400
port packet 2 is this port packet 3 is

1740
1:03:00,400 --> 1:03:03,200
this port packet 4 is this port packet 5

1741
1:03:03,200 --> 1:03:05,520
is this port packet 6 is this and it

1742
1:03:05,520 --> 1:03:07,760
just keeps going through packet by

1743
1:03:07,760 --> 1:03:10,880
packet and transmitting across all of

1744
1:03:10,880 --> 1:03:12,880
your interfaces now the reason i said it

1745
1:03:12,880 --> 1:03:15,440
sorta requires switch support is if

1746
1:03:15,440 --> 1:03:18,240
you're plugging these into a switch it

1747
1:03:18,240 --> 1:03:20,960
does require a switch that supports link

1748
1:03:20,960 --> 1:03:23,200
aggregation but what a lot of people do

1749
1:03:23,200 --> 1:03:25,920
is they'll use this balanced round robin

1750
1:03:25,920 --> 1:03:27,920
and they will connect two servers

1751
1:03:27,920 --> 1:03:30,240
together with crossover cables and

1752
1:03:30,240 --> 1:03:31,520
actually with gigabit we don't need

1753
1:03:31,520 --> 1:03:32,960
crossover cables anymore but they'll

1754
1:03:32,960 --> 1:03:35,359
connect two servers together and they'll

1755
1:03:35,359 --> 1:03:37,520
use balanced rod robin and in that case

1756
1:03:37,520 --> 1:03:39,280
you don't need a switch support or a

1757
1:03:39,280 --> 1:03:40,720
switch that supports it because there is

1758
1:03:40,720 --> 1:03:42,079
no switch involved right they're just

1759
1:03:42,079 --> 1:03:44,160
directly connecting the two computers

1760
1:03:44,160 --> 1:03:46,079
together and so like if you have a file

1761
1:03:46,079 --> 1:03:47,520
server that you want to connect to your

1762
1:03:47,520 --> 1:03:49,200
other server a lot of times this is a

1763
1:03:49,200 --> 1:03:51,440
way that you can increase throughput

1764
1:03:51,440 --> 1:03:53,280
without requiring any special switch

1765
1:03:53,280 --> 1:03:55,200
support so if you're connecting directly

1766
1:03:55,200 --> 1:03:57,440
computers you don't need to have switch

1767
1:03:57,440 --> 1:03:58,960
support if you're connecting to a switch

1768
1:03:58,960 --> 1:04:01,680
you do all right that's mode zero mode

1769
1:04:01,680 --> 1:04:03,440
one is an active backup and this one's

1770
1:04:03,440 --> 1:04:05,280
pretty easy to understand basically

1771
1:04:05,280 --> 1:04:06,799
however many ports you have on your

1772
1:04:06,799 --> 1:04:09,680
system only one is going to be active

1773
1:04:09,680 --> 1:04:11,680
and if that one fails then another one

1774
1:04:11,680 --> 1:04:13,520
is going to turn active and that's just

1775
1:04:13,520 --> 1:04:15,119
how it works they always have one this

1776
1:04:15,119 --> 1:04:16,640
is fault tolerance but this doesn't

1777
1:04:16,640 --> 1:04:18,480
speed anything up it just means if one

1778
1:04:18,480 --> 1:04:20,640
fails another one's going to come online

1779
1:04:20,640 --> 1:04:22,240
all right this doesn't require switch

1780
1:04:22,240 --> 1:04
support because well you know it

1781
1:04 --> 1:04:26,640
basically just only uses one port unless

1782
1:04:26,640 --> 1:04:28,079
the next one fails and then you switch

1783
1:04:28,079 --> 1:04:29,839
to that port and the switch is like okay

1784
1:04:29,839 --> 1:04:31,119
so now we're going to use this port

1785
1:04:31,119 --> 1:04
great

1786
1:04 --> 1:04:33,680
balance xor

1787
1:04:33,680 --> 1:04:36,319
does require special switch support and

1788
1:04:36,319 --> 1:04:38,640
this is kind of cool how balance xor

1789
1:04:38,640 --> 1:04:41,599
works basically you have your computer

1790
1:04:41,599 --> 1:04:43,599
here your linux computer and it does a

1791
1:04:43,599 --> 1:04:46,960
hash based on your mac address and the

1792
1:04:46,960 --> 1:04:49,039
client's mac address and so here's

1793
1:04:49,039 --> 1:04:51,359
another client over here and basically

1794
1:04:51,359 --> 1:04:53,920
it says okay based on this hash i'm

1795
1:04:53,920 --> 1:04
always going to use port 1 to connect to

1796
1:04 --> 1:04:58,319
this client and then over here the hash

1797
1:04:58,319 --> 1:04:59,839
is different so i'm always going to

1798
1:04:59,839 --> 1:05:01,599
connect to this computer so it's

1799
1:05:01,599 --> 1:05:04,160
basically a way to just spread out

1800
1:05:04,160 --> 1:05:06,480
which computers use which port but this

1801
1:05:06,480 --> 1:05:08,240
computer is always going to use this

1802
1:05:08,240 --> 1:05:10,240
port and this computer is always going

1803
1:05:10,240 --> 1:05:13,039
to use this port now this isn't used

1804
1:05:13,039 --> 1:05:15,599
very often because if you have switch

1805
1:05:15,599 --> 1:05:17,760
support which is required chances are

1806
1:05:17,760 --> 1:05:20,160
you're going to use 802.3 ad which is

1807
1:05:20,160 --> 1:05:22,480
the industry standard link aggregation

1808
1:05:22,480 --> 1:05:24,559
protocol right this means that your

1809
1:05:24,559 --> 1:05:26,960
switch knows what to do and your client

1810
1:05:26,960 --> 1:05:28,480
knows what to do and it's just a really

1811
1:05:28,480 --> 1:05:30,079
smart way of increasing through

1812
1:05:30,079 --> 1:05:32,480
throughput and availability fault

1813
1:05:32,480 --> 1:05:34,559
tolerance so if your switch supports

1814
1:05:34,559 --> 1:05
link aggregation you should use 802.3ad

1815
1:05 --> 1:05:40,799
or mode4 which is the industry standard

1816
1:05:40,799 --> 1:05:43,200
okay so even though balancexor is cool

1817
1:05:43,200 --> 1:05:44,960
it's not very often used because if you

1818
1:05:44,960 --> 1:05:46,480
can use it you might as well be using

1819
1:05:46,480 --> 1:05:48,640
the one that's even better broadcast i

1820
1:05:48,640 --> 1:05:50,319
kind of skipped over that broadcast is

1821
1:05:50,319 --> 1:05:52,400
only in very specific cases that you

1822
1:05:52,400 --> 1:05:54,319
would use it it just takes all of your

1823
1:05:54,319 --> 1:05:56,799
ports on the server and spews all of the

1824
1:05:56,799 --> 1:05:59,119
data out all of the ports at once it's

1825
1:05:59,119 --> 1:06:00,799
not used very often and it definitely

1826
1:06:00,799 --> 1:06:02,480
requires your switch to know what on

1827
1:06:02,480 --> 1:06:04,319
earth is happening now the two i do want

1828
1:06:04,319 --> 1:06:05,839
to focus on a little bit are these

1829
1:06:05,839 --> 1:06:07,680
bottom two let's say you have a dumb

1830
1:06:07,680 --> 1:06:09,599
switch it's not a switch that supports

1831
1:06:09,599 --> 1:06:11,440
link aggregation it's just one you

1832
1:06:11,440 --> 1:06:13,599
bought from amazon for 40 bucks it's

1833
1:06:13,599 --> 1:06:15,440
gigabit but it doesn't have any smarts

1834
1:06:15,440 --> 1:06:18,160
built in linux is smart enough to be

1835
1:06:18,160 --> 1:06:21,119
able to utilize the dumb switch and

1836
1:06:21,119 --> 1:06:22,640
increase bandwidth and throughput and

1837
1:06:22,640 --> 1:06:24,160
reliability and there's two different

1838
1:06:24,160 --> 1:06:26,559
ways it does it balance tlb which is

1839
1:06:26,559 --> 1:06:29,359
balance transmit load balance and the

1840
1:06:29,359 --> 1:06:31,920
balance of all load balancing and what

1841
1:06:31,920 --> 1:06:34,400
this does is let's say we have four

1842
1:06:34,400 --> 1:06:37,359
ports on our switch okay with tlb it's

1843
1:06:37,359 --> 1:06:40,480
going to transmit from whichever port is

1844
1:06:40,480 --> 1:06:43,280
currently the least busy so all the

1845
1:06:43,280 --> 1:06:45,440
transmit is going to be balanced out now

1846
1:06:45,440 --> 1:06:47,359
incoming is still going to always go to

1847
1:06:47,359 --> 1:06:50,640
one active port so that's not as good as

1848
1:06:50,640 --> 1:06:53,440
alb which is the same concept except it

1849
1:06:53,440 --> 1:06
does it for incoming and outgoing so

1850
1:06 --> 1:06:58,240
basically the least busy port gets the

1851
1:06:58,240 --> 1:07:00,319
traffic and this is really brilliant and

1852
1:07:00,319 --> 1:07:02,960
how it does is it constantly changes the

1853
1:07:02,960 --> 1:07:06,079
mac address on these ports or on these

1854
1:07:06,079 --> 1:07:08,160
ethernet cards so the switch is like oh

1855
1:07:08,160 --> 1:07:09,920
you moved again oh you moved again oh

1856
1:07:09,920 --> 1:07:12,079
you moved again and from the switches

1857
1:07:12,079 --> 1:07:13,359
standpoint it doesn't care how many

1858
1:07:13,359 --> 1:07:15,119
times you switch the mac address so it

1859
1:07:15,119 --> 1:07:17,119
generally works just fine now some

1860
1:07:17,119 --> 1:07:18,799
people have issued with this i've used

1861
1:07:18,799 --> 1:07:20,880
this in production for years and never

1862
1:07:20,880 --> 1:07
had a problem so balance alb if you have

1863
1:07 --> 1:07:26,079
a dumb switch i highly recommend you use

1864
1:07:26,079 --> 1:07:29,039
mode six okay if your switch supports

1865
1:07:29,039 --> 1:07:31,680
link aggregation i highly recommend mode

1866
1:07:31,680 --> 1:07:33,520
4 because that's the industry standard

1867
1:07:33,520 --> 1:07:34,720
and if you're just connecting two

1868
1:07:34,720 --> 1:07:37,200
servers together with multiple cables my

1869
1:07:37,200 --> 1:07:39,520
shirt mode 0 works really great to be

1870
1:07:39,520 --> 1:07:41,599
honest the most difficult part of linux

1871
1:07:41,599 --> 1:07:43,839
network bonding is figuring out which

1872
1:07:43,839 --> 1:07:45,839
mode to work but really it's not that

1873
1:07:45,839 --> 1:07:47,280
tough of a decision if your switch

1874
1:07:47,280 --> 1:07:50,240
supports it use 802.3ad there's really

1875
1:07:50,240 --> 1:07:52,160
no reason not to if your switch is a

1876
1:07:52,160 --> 1:07:53,839
dumb switch and doesn't support it i

1877
1:07:53,839 --> 1:07:57,200
highly recommend mode 6 or balance alb

1878
1:07:57,200 --> 1:08
if you want to take advantage of bonded

1879
1:08 --> 1:08:01,520
network interfaces but you don't have

1880
1:08:01,520 --> 1:08:03,440
the expensive hardware that will support

1881
1:08:03,440 --> 1:08:04,799
it

1882
1:08:04,799 --> 1:08:06,720
once you know the type of bond that you

1883
1:08:06,720 --> 1:08:08,799
want to set up for your two ethernet or

1884
1:08:08,799 --> 1:08:10,640
two or more ethernet connections on the

1885
1:08:10,640 --> 1:08:12,400
computer configuring them is pretty

1886
1:08:12,400 --> 1:08:13,520
straightforward although it's

1887
1:08:13,520 --> 1:08:15,119
drastically different depending on

1888
1:08:15,119 --> 1:08:17,279
whether you're on ubuntu or centos so

1889
1:08:17,279 --> 1:08:18,719
i'm going to show you how to do it on

1890
1:08:18,719 --> 1:08:21,040
both and then i'll show you also how to

1891
1:08:21,040 --> 1:08:22,719
test it to make sure that the bonding

1892
1:08:22,719 --> 1:08:24,960
modules are working so here i am on

1893
1:08:24,960 --> 1:08:27,040
ubuntu i've actually already configured

1894
1:08:27,040 --> 1:08:29,600
it so i've gone into etc

1895
1:08:29,600 --> 1:08:32,159
netplan and i have my file in here so

1896
1:08:32,159 --> 1:08:34,640
let's look at this file and what i've

1897
1:08:34,640 --> 1:08:37,440
done is i've set up the proper yaml

1898
1:08:37,440 --> 1:08:38,640
formatted with indentation and

1899
1:08:38,640 --> 1:08:40,480
everything to set up bonding so i'll go

1900
1:08:40,480 --> 1:08:42,319
over it really quickly first of all we

1901
1:08:42,319 --> 1:08:45,120
need to use network d as our renderer we

1902
1:08:45,120 --> 1:08:47,199
can't use network manager in order to

1903
1:08:47,199 --> 1:08:48,880
configure bonds because it just doesn't

1904
1:08:48,880 --> 1:08:50,480
support bonding

1905
1:08:50,480 --> 1:08:53,199
we do have to define the ethernet cards

1906
1:08:53,199 --> 1:08:56,560
themselves so ethernet's eth0 i set dhcp

1907
1:08:56,560 --> 1:08:58,239
4 to false because i don't want it to

1908
1:08:58,239 --> 1:09:01,279
actually assign an address to eth0 after

1909
1:09:01,279 --> 1:09:03,199
all that is done we don't need to set up

1910
1:09:03,199 --> 1:09:04,960
anything more for the ethernet ports

1911
1:09:04,960 --> 1:09:06,719
themselves then we need to set up a

1912
1:09:06,719 --> 1:09:09,120
bonded interface so a new section here

1913
1:09:09,120 --> 1:09:13,440
bonds the name of it is bond 0 dhcp 4 is

1914
1:09:13,440 --> 1:09:14,799
false because i'm going to assign a

1915
1:09:14,799 --> 1:09
static ip address and the interfaces is

1916
1:09 --> 1:09:19,199
a section that we tell it what

1917
1:09:19,199 --> 1:09:21,440
interfaces are going to be a part of

1918
1:09:21,440 --> 1:09:23,600
this bond in our case we only have one

1919
1:09:23,600 --> 1:09:25,839
which is silly i mean we're only bonding

1920
1:09:25,839 --> 1:09
one interface but you can do that

1921
1:09 --> 1:09
one or more it's just silly that we only

1922
1:09 --> 1:09:31,520
have one to bond that's just all this

1923
1:09:31,520 --> 1:09
computer has i've set up the addresses

1924
1:09 --> 1:09:35,279
the gateway

1925
1:09:35,279 --> 1:09:37,040
the name server is set up just like it

1926
1:09:37,040 --> 1:09:38,239
would be if we were setting it up for

1927
1:09:38,239 --> 1:09:40,560
each zero really the only new difference

1928
1:09:40,560 --> 1:09:42,880
down here is the parameters and the

1929
1:09:42,880 --> 1:09:45,279
parameters what i've done is mode active

1930
1:09:45,279 --> 1:09:47,359
backup that's just one of our modes it

1931
1:09:47,359 --> 1:09:48,480
happens to be

1932
1:09:48,480 --> 1:09:50,400
mode one but we actually say active

1933
1:09:50,400 --> 1:09:52,799
backup we specify by name the mode here

1934
1:09:52,799 --> 1:09:55,360
and then we save this file and do

1935
1:09:55,360 --> 1:09:56,480
netplan

1936
1:09:56,480 --> 1:09:58,159
apply now how you can tell if it's

1937
1:09:58,159 --> 1:10:00,400
working we can do ipadd

1938
1:10:00,400 --> 1:10
to see that you know sure enough it's up

1939
1:10 --> 1:10:03,760
here's our bond zero interface here's

1940
1:10:03,760 --> 1:10:05,679
our ethernet zero interface which is up

1941
1:10:05,679 --> 1:10:07,760
but doesn't have an ip address and

1942
1:10:07,760 --> 1:10:09,520
another way you can test is to look at

1943
1:10:09,520 --> 1:10:11,199
so we're just going to cap the file it's

1944
1:10:11,199 --> 1:10:14,080
in the virtual file system proc under

1945
1:10:14,080 --> 1:10:15,440
net

1946
1:10:15,440 --> 1:10:16,560
bonding

1947
1:10:16,560 --> 1:10:18,960
bond zero so if we look at this file

1948
1:10:18,960 --> 1:10:20,719
it's going to tell us the information

1949
1:10:20,719 --> 1:10:22,159
about it and say the bonding mode is

1950
1:10:22,159 --> 1:10:24,239
fault tolerance active backup

1951
1:10:24,239 --> 1:10:25,920
primary slave none but the current

1952
1:10:25,920 --> 1:10:27,840
active slave is eth0 it's our only one

1953
1:10:27,840 --> 1:10:30,560
that we have it's up and it looks like

1954
1:10:30,560 --> 1:10:31,920
everything is working good here's our

1955
1:10:31,920 --> 1:10:33,840
slave interface eth0 down here and

1956
1:10:33,840 --> 1:10:36,400
that's all working well as well so we

1957
1:10:36,400 --> 1:10:38,560
have it all set up and it's working now

1958
1:10:38,560 --> 1:10:40,719
with centos the setup is a little bit

1959
1:10:40,719 --> 1:10:43,199
different because centos is set up

1960
1:10:43,199 --> 1:10:45,199
differently in centos in order to

1961
1:10:45,199 --> 1:10:47,600
configure our ethernet ports we go into

1962
1:10:47,600 --> 1:10:50,080
etc sysconfig

1963
1:10:50,080 --> 1:10:53,360
network scripts and in here we have our

1964
1:10:53,360 --> 1:10:54,960
ifconfig files so i'm going to first

1965
1:10:54,960 --> 1:10:56,400
look at the changes we have to make to

1966
1:10:56,400 --> 1:10:58,560
ifconfig zero so

1967
1:10:58,560 --> 1:11:00,480
here we basically make it pretty simple

1968
1:11:00,480 --> 1:11:01,840
ethernet type

1969
1:11:01,840 --> 1:11:04,320
boot protocol is none uh the name the

1970
1:11:04,320 --> 1:11:06,320
device is eat zero on boot we want it to

1971
1:11:06,320 --> 1:11
come up but notice i haven't given any

1972
1:11 --> 1:11:10,239
ip addressing information and here are

1973
1:11:10,239 --> 1:11:12,400
the two things the master

1974
1:11:12,400 --> 1:11:14,800
is bond zero and yes this is going to be

1975
1:11:14,800 --> 1:11:16,800
a slave to this bond all right so those

1976
1:11:16,800 --> 1:11:19,120
are the changes we make here if we look

1977
1:11:19,120 --> 1:11
at if config bonds zero this is where we

1978
1:11 --> 1:11:24,640
set up bond zero we name it bond zero

1979
1:11:24,640 --> 1:11:27,199
bonding master is yes i did give this

1980
1:11:27,199 --> 1:11:29,280
one an ip address and a prefix which

1981
1:11:29,280 --> 1:11:31,120
means the subnet mask

1982
1:11:31,120 --> 1:11:32,800
on boot we want it to come up a boot

1983
1:11:32,800 --> 1:11:34,480
protocol is none and then here the

1984
1:11:34,480 --> 1:11:36,480
bonding options we tell it what we want

1985
1:11:36,480 --> 1:11:38,239
it to do i actually set this one up to

1986
1:11:38,239 --> 1:11:40,800
mode 6 mode 6 is

1987
1:11:40,800 --> 1:11:43,520
balance all load balancing so it does

1988
1:11:43,520 --> 1:11:45,520
its own version of load balancing for

1989
1:11:45,520 --> 1:11:47,840
incoming and outgoing traffic again i

1990
1:11:47,840 --> 1:11:49,679
only have the one interface on this

1991
1:11:49,679 --> 1:11:51,440
computer but that's okay

1992
1:11:51,440 --> 1:11:53,520
let's do the same thing now checking to

1993
1:11:53,520 --> 1:11:55,040
make sure it's working is similar we can

1994
1:11:55,040 --> 1:11:58,159
do ipadd you can see sure enough here's

1995
1:11:58,159 --> 1:12:00,800
the bond set up right here and our

1996
1:12:00,800 --> 1:12:02,800
ethernet is right here

1997
1:12:02,800 --> 1:12:04,320
and really for configuring the bonds

1998
1:12:04,320 --> 1:12:05,760
themselves that's all there is to it

1999
1:12:05,760 --> 1:12:07,760
ubuntu and centos are configured

2000
1:12:07,760 --> 1:12:09,520
differently but underneath they're both

2001
1:12:09,520 --> 1:12:10,960
doing the same thing they're using the

2002
1:12:10,960 --> 1:12:12,719
bonding kernel module and they're

2003
1:12:12,719 --> 1:12:14,560
allowing you to do some awesome things

2004
1:12:14,560 --> 1:12:16,320
with multiple ethernet ports on your

2005
1:12:16,320 --> 1:12:18,159
computer

2006
1:12:18,159 --> 1:12:21,920
gpt and mbr are two different ways of

2007
1:12:21,920 --> 1:12:24,320
taking a hard drive and sharpening it up

2008
1:12:24,320 --> 1:12:27,040
into pieces so that those pieces can be

2009
1:12:27,040 --> 1:12:28,880
recognized and mounted as different

2010
1:12:28,880 --> 1:12:30,560
drives and stuff on your on your system

2011
1:12:30,560 --> 1:12:32,960
so they're they do the same thing but

2012
1:12:32,960 --> 1:12:36,159
gpt is much newer and much more

2013
1:12:36,159 --> 1:12:39,120
feature-rich than the old-school mbr now

2014
1:12:39,120 --> 1:12:40,400
there's also a really cool thing called

2015
1:12:40,400 --> 1:12:42,560
protective mbr i want to talk about but

2016
1:12:42,560 --> 1:12:43,840
basically we're going to talk about the

2017
1:12:43,840 --> 1:12:46,880
differences between gpt and mbr here i

2018
1:12:46,880 --> 1:12:48,239
have two big squares and i'm going to

2019
1:12:48,239 --> 1:12:49,360
say that these actually they're

2020
1:12:49,360 --> 1:12:51,280
rectangles i'm going to say that they

2021
1:12:51,280 --> 1:12:53,199
represent the drives themselves and

2022
1:12:53,199 --> 1:12:55,600
they're going to be partitioned with two

2023
1:12:55,600 --> 1:12:57,280
different systems so we'll start over

2024
1:12:57,280 --> 1:12:59,920
here with the old one mbr which stands

2025
1:12:59,920 --> 1:13:03,440
for master boot record okay now

2026
1:13:03,440 --> 1:13:05,679
how this would work is let's say this

2027
1:13:05,679 --> 1:13:06,640
drive

2028
1:13:06,640 --> 1:13:11,440
is device sda okay so this is the device

2029
1:13:11,440 --> 1:13:13,520
on the linux system it recognizes this

2030
1:13:13,520 --> 1:13:17,280
drive now the mbr is a little tiny bit

2031
1:13:17,280 --> 1:13:19,120
of reserve space

2032
1:13:19,120 --> 1:13:20,960
at the very beginning of the disk and

2033
1:13:20,960 --> 1:13:22,480
this is basically like a table of

2034
1:13:22,480 --> 1:13:25,440
contents and it describes

2035
1:13:25,440 --> 1:13:26,560
how

2036
1:13:26,560 --> 1:13:29,520
this is chopped up okay so this is

2037
1:13:29,520 --> 1:13:31,040
chopped up into let's say four pieces

2038
1:13:31,040 --> 1:13:33,360
there's four primary partitions you can

2039
1:13:33,360 --> 1:13:35,199
also cut each one of the primary

2040
1:13:35,199 --> 1:13:37,199
partitions into four so we could have

2041
1:13:37,199 --> 1:13:38,640
you know mult we could have this one be

2042
1:13:38,640 --> 1:13:41,040
like

2043
1:13:41,040 --> 1:13:42,960
have four partitions there if we wanted

2044
1:13:42,960 --> 1:13:45,199
but basically what this means is once

2045
1:13:45,199 --> 1:13:48,480
the mbr defines in this little

2046
1:13:48,480 --> 1:13:50,560
first part of the drive right here what

2047
1:13:50,560 --> 1:13:53,040
is what we come up with other devices on

2048
1:13:53,040 --> 1:13:55,120
the system we have

2049
1:13:55,120 --> 1:13:58,360
dev sda1

2050
1:13:58,360 --> 1:14:01,600
devsda2 and it goes on down the line and

2051
1:14:01,600 --> 1:14:04,320
so each of these chunks is referenced on

2052
1:14:04,320 --> 1:14:07,600
the system as their partition name now

2053
1:14:07,600 --> 1:14:10,159
this is the raw device dev sda doesn't

2054
1:14:10,159 --> 1:14:12,480
go anywhere it's still there but the

2055
1:14:12,480 --> 1:14:14,800
individual partitions get their own

2056
1:14:14,800 --> 1:14:16,640
device and that's how we reference them

2057
1:14:16,640 --> 1:14:19,280
on the system so mbr has this you know

2058
1:14:19,280 --> 1:14:21,120
this little tiny table of contents at

2059
1:14:21,120 --> 1:14:23,120
the beginning and it says where things

2060
1:14:23,120 --> 1:14:26,800
are chopped up now gpt or

2061
1:14:26,800 --> 1:14:28,880
gui id partition table which i think is

2062
1:14:28,880 --> 1:14:30,800
interesting because there's an acronym

2063
1:14:30,800 --> 1:14:33,199
wrapped inside of an acronym this stands

2064
1:14:33,199 --> 1:14:35,840
for globally unique identifier partition

2065
1:14:35,840 --> 1:14:38,159
table and basically it does conceptually

2066
1:14:38,159 --> 1:14:40,800
the same thing right it will chop up

2067
1:14:40,800 --> 1:14:43,199
this drive and you'll end up with dev

2068
1:14:43,199 --> 1:14:45,199
sda for the raw device

2069
1:14:45,199 --> 1:14:47,440
and so on down the line the differences

2070
1:14:47,440 --> 1:14:50,880
are though gpt does have a spot at the

2071
1:14:50,880 --> 1:14:52,400
beginning with the table of contents but

2072
1:14:52,400 --> 1:14:54,880
then it also scatters them

2073
1:14:54,880 --> 1:14:56,560
copies of them

2074
1:14:56,560 --> 1:14:58,640
around the drive so that if something

2075
1:14:58,640 --> 1:15:01,679
were to happen with one of the copies of

2076
1:15:01,679 --> 1:15:05,280
the gpt it can still figure out what's

2077
1:15:05,280 --> 1:15:07,199
on the disk it also does some crc

2078
1:15:07,199 --> 1:15:10,080
correction on the files itself or on the

2079
1:15:10,080 --> 1:15
the file system itself so that it knows

2080
1:15 --> 1:15:13,199
if there's some corruption and it can

2081
1:15:13,199 --> 1:15:16,400
fix it it's just very very robust along

2082
1:15:16,400 --> 1:15:18,480
with the ability to use much bigger

2083
1:15:18,480 --> 1:15:21,040
drives mbr is limited to two terabytes

2084
1:15:21,040 --> 1:15:23,440
gpt is limited to i think petabytes i

2085
1:15:23,440 --> 1:15:25,199
mean there's no practical limit at this

2086
1:15:25,199 --> 1:15:27,840
point of how much drive space it can

2087
1:15:27,840 --> 1:15:29,679
talk about rather than being

2088
1:15:29,679 --> 1:15:31,440
limited by four partitions you can have

2089
1:15:31,440 --> 1:15:33,440
tons of partitions on here so you know

2090
1:15:33,440 --> 1:15:35,280
we could chop it up into as many as we

2091
1:15:35,280 --> 1:15:37,679
wanted and it just goes down the line

2092
1:15:37,679 --> 1:15:41,600
sda1 sda2 sda3 and one other really

2093
1:15:41,600 --> 1:15:43,199
interesting thing and i wanted to talk

2094
1:15:43,199 --> 1:15:46,960
about is the protective mbr so gpt is

2095
1:15:46,960 --> 1:15:50,080
used on newer systems it's specifically

2096
1:15:50,080 --> 1:15:52,640
part of uefi that replaces bios but

2097
1:15:52,640 --> 1:15:55,360
biosystems can still see gpt drives and

2098
1:15:55,360 --> 1:15:56,960
part of the reason they can do that is

2099
1:15:56,960 --> 1:15:58,719
at the very beginning

2100
1:15:58,719 --> 1:16:01,440
there's this section that looks exactly

2101
1:16:01,440 --> 1:16:04,560
like an mbr basically it's an mbr record

2102
1:16:04,560 --> 1:16:06,719
here that says okay there is one big

2103
1:16:06,719 --> 1:16:08,960
partition on this drive the entire drive

2104
1:16:08,960 --> 1:16:10,800
is a partition

2105
1:16:10,800 --> 1:16:12,400
there's no room available on this

2106
1:16:12,400 --> 1:16:14,320
partition and it takes up the entire

2107
1:16:14,320 --> 1:16:16,640
drive now why would that exist it's

2108
1:16:16,640 --> 1:16:18,880
basically so systems don't say oh well

2109
1:16:18,880 --> 1:16:21,199
there's no mbr in this drive so this

2110
1:16:21,199 --> 1:16:24,080
must be a blank drive with nothing on it

2111
1:16:24,080 --> 1:16:25,600
well we don't want that to happen so

2112
1:16:25,600 --> 1:16:28,159
basically what it means is it allows the

2113
1:16:28,159 --> 1:16:31,679
mbr system or a bio system that is used

2114
1:16:31,679 --> 1:16:33,840
to seeing mbr it will allow it to

2115
1:16:33,840 --> 1:16:35,920
realize that this is not an empty drive

2116
1:16:35,920 --> 1:16:37,920
it's just something it can't read and

2117
1:16:37,920 --> 1:16:39,679
then there's some really cool stuff

2118
1:16:39,679 --> 1:16:42,480
where part of this initial mbr can be

2119
1:16:42,480 --> 1:16:45,199
hints to the operating system itself as

2120
1:16:45,199 --> 1:16:47,840
to what's happening underneath and so

2121
1:16:47,840 --> 1:16:50,719
some older bio systems are able to boot

2122
1:16:50,719 --> 1:16:52,880
from a gpt drive

2123
1:16:52,880 --> 1:16:54,480
even though it shouldn't be able to

2124
1:16:54,480 --> 1:16:56,480
because the linux system or you know the

2125
1:16:56,480 --> 1:16:59,040
operating system itself says okay i see

2126
1:16:59,040 --> 1:17:01,440
mbr is saying that um you know it's

2127
1:17:01,440 --> 1:17:03,440
really a gpt drive but i know enough

2128
1:17:03,440 --> 1:17:05,679
about gpt myself that i'm going to be

2129
1:17:05,679 --> 1:17:08,080
able to find the software and you know

2130
1:17:08,080 --> 1:17:10,560
the the drive files and partitions on

2131
1:17:10,560 --> 1:17:13,120
here myself and so you can actually use

2132
1:17:13,120 --> 1:17:14,480
it on there but it's because of that

2133
1:17:14,480 --> 1:17:17,360
protective mbr that all that is possible

2134
1:17:17,360 --> 1:17:19,440
so when it comes down to it mbr is the

2135
1:17:19,440 --> 1:17:22,239
old way of doing things gpt is the new

2136
1:17:22,239 --> 1:17:24,400
kid on the block honestly there's no

2137
1:17:24,400 --> 1:17:27,120
reason not to use gpt it does everything

2138
1:17:27,120 --> 1:17:29,199
mbr does it does it more efficiently

2139
1:17:29,199 --> 1:17:30,640
more reliably

2140
1:17:30,640 --> 1:17:32,560
it's just the better way to go so i

2141
1:17:32,560 --> 1:17:35,040
recommend that you use gpt and while

2142
1:17:35,040 --> 1:17:37,199
there are significant differences a lot

2143
1:17:37,199 --> 1:17:39,199
of those backwards compatibility issues

2144
1:17:39,199 --> 1:17:40,640
make it so that you don't even have to

2145
1:17:40,640 --> 1:17:42,880
worry about them

2146
1:17:42,880 --> 1:17:45,120
the linux file system is actually really

2147
1:17:45,120 --> 1:17:48,080
cool because all of the network mounts

2148
1:17:48,080 --> 1:17:49,840
and different hard drives and usb drives

2149
1:17:49,840 --> 1:17:51,840
are all on one

2150
1:17:51,840 --> 1:17:54,480
giant file system it's not there's no a

2151
1:17:54,480 --> 1:17:56,560
drive b drive c drive d drive there's

2152
1:17:56,560 --> 1:17:58,719
nothing like that it's just all one big

2153
1:17:58,719 --> 1:18:00,800
file system hierarchy and we're gonna

2154
1:18:00,800 --> 1:18
look at the different things because

2155
1:18 --> 1:18:03,679
whether it's a real or virtual file

2156
1:18:03,679 --> 1:18:05,440
system it's on the same file system

2157
1:18:05,440 --> 1:18:07,040
whether it's relative or absolute this

2158
1:18:07,040 --> 1:18:09,199
is just how you traverse

2159
1:18:09,199 --> 1:18:10,719
the actual file system we're gonna look

2160
1:18:10,719 --> 1:18:12,560
on the command line about that network

2161
1:18:12,560 --> 1:18:14,800
mounts they're just you know on a remote

2162
1:18:14,800 --> 1:18:17,679
system but they just show up as a folder

2163
1:18:17,679 --> 1:18:20,320
on your local computer it's just it's

2164
1:18:20,320 --> 1:18:22,880
really cool so first of all let's let's

2165
1:18:22,880 --> 1:18:24,560
start at the very beginning it's a very

2166
1:18:24,560 --> 1:18:27,679
good place to start so we have a hard

2167
1:18:27,679 --> 1:18:29,040
drive right so we're going to say it's

2168
1:18:29,040 --> 1:18:33,120
dev sda1 and that has the root partition

2169
1:18:33,120 --> 1:18:34,560
on it you know just forward slash so

2170
1:18:34,560 --> 1:18:36,800
this is like where everything starts the

2171
1:18:36,800 --> 1:18:39,840
root partition is the basis of our linux

2172
1:18:39,840 --> 1:18:42,400
file system it's it's on a hard drive of

2173
1:18:42,400 --> 1:18:44,480
some sort in our case it's this one now

2174
1:18:44,480 --> 1:18:47,199
inside there there's tons of files and

2175
1:18:47,199 --> 1:18:49,520
folders some of the files are directly

2176
1:18:49,520 --> 1:18:52,320
on that dev sda drive right on the root

2177
1:18:52,320 --> 1:18:54,800
file system or folders within that root

2178
1:18:54,800 --> 1:18:56,560
file system they're actually stored on

2179
1:18:56,560 --> 1:18:59,199
that hard drive some of the folders and

2180
1:18:59,199 --> 1:19:01,600
the files in there are a virtual file

2181
1:19:01,600 --> 1:19:03,760
system if you look inside the

2182
1:19:03,760 --> 1:19
root directory there's a proc folder and

2183
1:19 --> 1:19:08,560
a sys folder these are dynamically

2184
1:19:08,560 --> 1:19:11,360
created file systems that are just a way

2185
1:19:11,360 --> 1:19:14,159
to interact with the kernel itself so if

2186
1:19:14,159 --> 1:19:15,440
you want to make a change to the running

2187
1:19:15,440 --> 1:19:17,120
kernel you can make a change to one of

2188
1:19:17,120 --> 1:19:19,280
the files in these folders and it's

2189
1:19:19,280 --> 1:19:20,800
going to affect the running kernel but

2190
1:19:20,800 --> 1:19:23,920
it's not actually files it's a virtual

2191
1:19:23,920 --> 1:19:25,600
file system it's just a way that they

2192
1:19:25,600 --> 1:19:27,760
represent that interface with the kernel

2193
1:19:27,760 --> 1:19:30,239
is this virtual file system then we also

2194
1:19:30,239 --> 1:19:32,640
have like a remote nfs server it could

2195
1:19:32,640 --> 1:19:35,440
be nfs or samba or you know whatever

2196
1:19:35,440 --> 1:19:37,679
your network protocol of choice is but

2197
1:19:37,679 --> 1:19:40,239
it's mounted on the folder

2198
1:19:40,239 --> 1:19:42,320
inside of your root system so this could

2199
1:19:42,320 --> 1:19:44,640
be like the home folder on your system

2200
1:19:44,640 --> 1:19:47,280
might not be on the actual hard drive it

2201
1:19:47,280 --> 1:19:49,440
might actually be on a remote system but

2202
1:19:49,440 --> 1:19:52,320
it's mounted inside your file system and

2203
1:19:52,320 --> 1:19:54,159
from you know from a layman's position

2204
1:19:54,159 --> 1:19:56,080
just looking at the system you don't

2205
1:19:56,080 --> 1:19:58,239
know if it's a remote system or a local

2206
1:19:58,239 --> 1:20:00,400
system or a virtual system because they

2207
1:20:00,400 --> 1:20:02,080
all look the same same thing when you

2208
1:20:02,080 --> 1:20:03,920
insert a usb drive it doesn't come

2209
1:20:03,920 --> 1:20:05,600
through as like you know like the e

2210
1:20:05,600 --> 1:20:07,120
drive or the f drive like on a windows

2211
1:20:07,120 --> 1:20:09,920
system it's just mounted somewhere

2212
1:20:09,920 --> 1:20:13,120
on a folder inside that same

2213
1:20:13,120 --> 1:20:14,560
one solid

2214
1:20:14,560 --> 1:20:17,120
monolithic file system even if you put

2215
1:20:17,120 --> 1:20:19,120
in another hard drive so this is we're

2216
1:20:19,120 --> 1:20:20,800
saying this is dev sda1 like the

2217
1:20:20,800 --> 1:20:23,280
partition one on the sda drive even if

2218
1:20:23,280 --> 1:20:25,520
you were to put in a second hard drive

2219
1:20:25,520 --> 1:20:28,400
in the system it's still going to mount

2220
1:20:28,400 --> 1:20:31,600
inside a folder or a subfolder of this

2221
1:20:31,600 --> 1:20
root drive right it's going to be like

2222
1:20 --> 1:20:35,679
in mount data or wherever you happen to

2223
1:20:35,679 --> 1:20:37,679
mount it it's just going to appear as a

2224
1:20:37,679 --> 1:20:41,280
folder inside this root file system so

2225
1:20:41,280 --> 1:20:43,840
everything is inside that root file

2226
1:20:43,840 --> 1:20:46,480
system it's really a neat way to handle

2227
1:20:46,480 --> 1:20:48,159
all of the various things that can be

2228
1:20:48,159 --> 1:20:49,920
stored in linux and the virtual file

2229
1:20:49,920 --> 1:20:52,320
system is very unique in that it's not

2230
1:20:52,320 --> 1:20:54,080
really a file system it's more like an

2231
1:20:54,080 --> 1:20:56,320
interface designed as a file system so

2232
1:20:56,320 --> 1:20:58,560
you can interact with the kernel itself

2233
1:20:58,560 --> 1:21:00,719
all right so let's go to

2234
1:21:00,719 --> 1:21:02,560
our file system here and i just want to

2235
1:21:02,560 --> 1:21:04,080
show you kind of how it looks i want to

2236
1:21:04,080 --> 1:21:05,760
talk about this whole absolute versus

2237
1:21:05,760 --> 1:21:07,520
relative thing all right so i'm just

2238
1:21:07,520 --> 1:21:08,320
going to

2239
1:21:08,320 --> 1:21
show you the file system here we have ls

2240
1:21 --> 1:21:11,600
and we have a folder called pictures we

2241
1:21:11,600 --> 1:21:13,760
can do ls picture

2242
1:21:13,760 --> 1:21:16,400
gotta spell it right ls

2243
1:21:16,400 --> 1:21:19,280
pictures and i have a folder cbt gold

2244
1:21:19,280 --> 1:21:20,800
which is this background and then a

2245
1:21:20,800 --> 1:21:24,320
trips folder uh what if we were to do ls

2246
1:21:24,320 --> 1:21:25,440
trips

2247
1:21:25,440 --> 1:21:27,280
okay there's a folder called grocery

2248
1:21:27,280 --> 1:21:29,840
store mexico orlando now there's a cool

2249
1:21:29,840 --> 1:21:31,840
program called tree i'm going to use so

2250
1:21:31,840 --> 1:21:33,440
let's say tree

2251
1:21:33,440 --> 1:21:35,360
pictures it's going to show us a tree

2252
1:21:35,360 --> 1:21:37,120
representation of all the files and

2253
1:21:37,120 --> 1:21:39,199
folders inside here so we can look we

2254
1:21:39,199 --> 1:21:41,120
have the pictures folder there's a one

2255
1:21:41,120 --> 1:21:42,800
file in there called cbt gold then

2256
1:21:42,800 --> 1:21:44,320
there's a folder called trips inside

2257
1:21:44,320 --> 1:21:46,080
that folder are three different folders

2258
1:21:46,080 --> 1:21:48,560
grocery store mexico orlando inside each

2259
1:21:48,560 --> 1:21:51,199
of those there are files that are stored

2260
1:21:51,199 --> 1:21:53,199
in there this is the hierarchy of that

2261
1:21:53,199 --> 1:21:54,639
now honestly

2262
1:21:54,639 --> 1:21:57,040
this mexico folder this could be like a

2263
1:21:57,040 --> 1:21:59,120
remote nfs share we don't know because

2264
1:21:59,120 --> 1:22:02,159
it's all on the local file system that

2265
1:22:02,159 --> 1:22:03,840
is you know mounted everywhere on the

2266
1:22:03,840 --> 1:22:05,679
system it's just one file system so we

2267
1:22:05,679 --> 1:22:07,040
don't know where these are we just

2268
1:22:07,040 --> 1:22:09,040
interact with them as if they're all one

2269
1:22:09,040 --> 1:22:10,480
local file system so that's just a

2270
1:22:10,480 --> 1:22
really cool thing about it but this

2271
1:22 --> 1:22:14,400
whole absolute versus relative let's go

2272
1:22:14,400 --> 1:22:15,760
over to

2273
1:22:15,760 --> 1:22:17,440
the pictures folder

2274
1:22:17,440 --> 1:22:19,360
and trips

2275
1:22:19,360 --> 1:22:20,880
i'm going to clear the screen and if we

2276
1:22:20,880 --> 1:22:22,480
were to type ls minus a we're going to

2277
1:22:22,480 --> 1:22:24,400
see all of the things in here now we

2278
1:22:24,400 --> 1:22:26,159
already saw some of these orlando mexico

2279
1:22:26,159 --> 1:22:29,920
grocery store but these dot and dot dot

2280
1:22:29,920 --> 1:22:32,480
now these are special folder entries

2281
1:22:32,480 --> 1:22:34,719
that mean the dot means the current

2282
1:22:34,719 --> 1:22:37,360
folder so if i were to say cd to dot

2283
1:22:37,360 --> 1:22:40,480
i'm in the same folder dot dot means the

2284
1:22:40,480 --> 1:22:44,239
directory above me so if we're in trips

2285
1:22:44,239 --> 1:22:46,960
dot dot is going to be pictures so if we

2286
1:22:46,960 --> 1:22:50,239
were to say cd dot dot

2287
1:22:50,239 --> 1:22:51,840
all of a sudden you'll see now we're in

2288
1:22:51,840 --> 1:22
the pictures folder that's pretty cool

2289
1:22 --> 1:22:56,239
right now we can use that as a folder

2290
1:22:56,239 --> 1:22:58,880
name anywhere so let's go into

2291
1:22:58,880 --> 1:23:01,920
trips orlando okay and inside here let's

2292
1:23:01,920 --> 1:23:04,719
do an ls minus la we can see here are

2293
1:23:04,719 --> 1:23:06,320
all the the pictures that we have and

2294
1:23:06,320 --> 1:23:08,560
then these two folders dot dot and dot

2295
1:23:08,560 --> 1:23:10,159
in every single folder you're gonna find

2296
1:23:10,159 --> 1:23:12,080
a dot and a dot dot because it's just a

2297
1:23:12,080 --> 1:23:14,960
pointer that means this directory

2298
1:23:14,960 --> 1:23:16,960
the directory above me okay so we can

2299
1:23:16,960 --> 1:23:19,199
put that in a string too let's say i

2300
1:23:19,199 --> 1:23:22,320
want to cd to dot

2301
1:23:22,320 --> 1:23:24,080
dot dot

2302
1:23:24,080 --> 1:23:25,679
and see where this takes us

2303
1:23:25,679 --> 1:23:27,679
two pictures now why did it do that well

2304
1:23:27,679 --> 1:23:30,320
because dot dot if we're in orlando dot

2305
1:23:30,320 --> 1:23:33,280
dot means trips and then we're in trips

2306
1:23:33,280 --> 1:23:35,920
the second dot dot means pictures so

2307
1:23:35,920 --> 1:23:37,520
that's interesting we could do something

2308
1:23:37,520 --> 1:23:38,960
really complicated and it'll end with

2309
1:23:38,960 --> 1:23:40,239
this we could say

2310
1:23:40,239 --> 1:23:41,520
cd

2311
1:23:41,520 --> 1:23:43,199
trips

2312
1:23:43,199 --> 1:23:44,639
orlando

2313
1:23:44,639 --> 1:23:47,520
dot dot

2314
1:23:47,520 --> 1:23:49,600
grocery store

2315
1:23:49,600 --> 1:23:51,199
oh okay what happened there we'll end

2316
1:23:51,199 --> 1:23:52,719
with this one like i said so we started

2317
1:23:52,719 --> 1:23:54,800
in pictures and we went to the trips

2318
1:23:54,800 --> 1:23
folder

2319
1:23 --> 1:23:57,760
orlando

2320
1:23:57,760 --> 1:23:59,920
back to the trips folder and then into

2321
1:23:59,920 --> 1:24:01,600
the grocery store folder and sure enough

2322
1:24:01,600 --> 1:24:03,199
that's where we ended up pictures trips

2323
1:24:03,199 --> 1:24:05,440
grocery stores so you can use dot dot

2324
1:24:05,440 --> 1:24:08,480
anywhere in your thing to talk about the

2325
1:24:08,480 --> 1:24:11,120
relative path of where you're where

2326
1:24:11,120 --> 1:24:13,199
you're going okay now the absolute path

2327
1:24:13,199 --> 1:24:14,840
of this is going to

2328
1:24:14,840 --> 1:24:18,080
be cd home

2329
1:24:18,080 --> 1:24:19,360
bob

2330
1:24:19,360 --> 1:24:20,560
pictures

2331
1:24:20,560 --> 1:24:21,600
trips

2332
1:24:21,600 --> 1:24:23,120
grocery store

2333
1:24:23,120 --> 1:24:24,239
and then sure enough we're in the same

2334
1:24:24,239 --> 1:24:25,679
folder this is the absolute path

2335
1:24:25,679 --> 1:24:27,920
starting at the root level but we can

2336
1:24:27,920 --> 1:24:30,639
use relatives paths using things like

2337
1:24:30,639 --> 1:24:32,320
dot dots one other thing i said i was

2338
1:24:32,320 --> 1:24:33,679
going to end there and i guess i lied to

2339
1:24:33,679 --> 1:24:36,320
you this tilde image or this tilde thing

2340
1:24:36,320 --> 1:24:38,639
is a shortcut for your home directory so

2341
1:24:38,639 --> 1:24:41,199
if we were to say cd to the tilde which

2342
1:24:41,199 --> 1:24:43,840
is usually to the left of your one key

2343
1:24:43,840 --> 1:24:46,320
boom now we are in the tilde which if we

2344
1:24:46,320 --> 1:24:49,840
type pwd we'll see is home bob all right

2345
1:24:49,840 --> 1:24
so those are the relative path tools

2346
1:24 --> 1:24:53,600
that you can use to construct where you

2347
1:24:53,600 --> 1:24:55,120
want to go but that's really how it

2348
1:24:55,120 --> 1:24:56,719
works and the tree program is just kind

2349
1:24:56,719 --> 1:24:58,400
of a cool way to look at things you can

2350
1:24:58,400 --> 1:25:00,080
see everything else spelled out there

2351
1:25:00,080 --> 1:25:02,239
the big takeaway is that the linux file

2352
1:25:02,239 --> 1:25:04,960
system is just one big monolithic file

2353
1:25:04,960 --> 1:25:06,719
system and whether you're mounting

2354
1:25:06,719 --> 1:25:08,719
network shares or you're mounting usb

2355
1:25:08,719 --> 1:25:10,800
drives or second hard drives or even a

2356
1:25:10,800 --> 1:25:12,560
virtual file system to interact with the

2357
1:25:12,560 --> 1:25:15,760
kernel it's all under the same bunch of

2358
1:25:15,760 --> 1:25:19,280
file system in this big hierarchy

2359
1:25:19,280 --> 1:25:20,639
partitions are really just

2360
1:25:20,639 --> 1:25:22,880
organizational units that are on a hard

2361
1:25:22,880 --> 1:25:24,719
drive you kind of chop a hard drive up

2362
1:25:24,719 --> 1:25:26,960
into different partitions and those

2363
1:25:26,960 --> 1:25:28,400
partitions are used for different things

2364
1:25:28,400 --> 1:25:31,199
like swap space or you know a particular

2365
1:25:31,199 --> 1:25:33,199
folder on your system

2366
1:25:33,199 --> 1:25:34,639
you can use partitions for a lot of

2367
1:25:34,639 --> 1:25:36,400
things and depending on the system that

2368
1:25:36,400 --> 1:25:37,840
you're using whether it's going to be an

2369
1:25:37,840 --> 1:25:41,440
mbr master boot record or gpt gui id

2370
1:25:41,440 --> 1:25:44,159
partition table you can have a multitude

2371
1:25:44,159 --> 1:25:47,199
of partitions or just a few and

2372
1:25:47,199 --> 1:25:48,639
depending on which scheme you use it

2373
1:25:48,639 --> 1:25:50,239
depends how big your hard drive can be

2374
1:25:50,239 --> 1:25:51,520
now we're going to look at a handful of

2375
1:25:51,520 --> 1:25:54,239
tools like parted and g parted and this

2376
1:25:54,239 --> 1:25:56,560
stands for partition editor and

2377
1:25:56,560 --> 1:25:59,040
graphical partition editor

2378
1:25:59,040 --> 1:26:01,040
and the old school f disk which is just

2379
1:26:01,040 --> 1:26:03,520
a command line tool that didn't used to

2380
1:26:03,520 --> 1:26:06,639
handle the gpt partition table but now

2381
1:26:06,639 --> 1:26:08,960
it does so there's this one size fits

2382
1:26:08,960 --> 1:26:10,960
all tool called fdisk and then i do want

2383
1:26:10,960 --> 1:26:12,560
to show you a couple tools that will let

2384
1:26:12,560 --> 1:26:15,040
you see what block devices are available

2385
1:26:15,040 --> 1:26:16,960
to partition on your system so let's

2386
1:26:16,960 --> 1:26:19,120
actually go right to the command line so

2387
1:26:19,120 --> 1:26:20,719
that we can check out what's on our

2388
1:26:20,719 --> 1:26:22,800
system and i chose to use centos today

2389
1:26:22,800 --> 1:26:24,639
for no other reason then i thought let's

2390
1:26:24,639 --> 1:26:27,120
use centos so i want to show you first

2391
1:26:27,120 --> 1:26:28,560
of all how we can identify the block

2392
1:26:28,560 --> 1:26:31,920
devices on our system we can type lsblk

2393
1:26:31,920 --> 1:26:33,280
and it's going to show us this really

2394
1:26:33,280 --> 1:26:35,520
nice little cool tree thing right so we

2395
1:26:35,520 --> 1:26:37,760
have fd0 floppy disk which actually is a

2396
1:26:37,760 --> 1:26:39,199
lie there's not a floppy disk on this

2397
1:26:39,199 --> 1:26:41,679
system it's a virtual machine but then

2398
1:26:41,679 --> 1:26:44,400
sda is the main hard drive on the system

2399
1:26:44,400 --> 1:26:47,199
and it's partitioned into two partitions

2400
1:26:47,199 --> 1:26
the sda1 which is the boot partition and

2401
1:26 --> 1:26:53,440
then sda2 which is used in lvm which

2402
1:26:53,440 --> 1:26:55,120
we'll talk about in a different nugget

2403
1:26:55,120 --> 1:26:57,120
then there are a bunch of other hard

2404
1:26:57,120 --> 1:26:58,480
drives installed in the system that

2405
1:26:58,480 --> 1:27:00,400
don't have anything on them at all there

2406
1:27:00,400 --> 1:27:02,639
are four 10 gigabyte

2407
1:27:02,639 --> 1:27:06,480
drives sdb sdcsd and sde we can also see

2408
1:27:06,480 --> 1:27:08,639
these things if we look at proc

2409
1:27:08,639 --> 1:27:11,199
partitions this is again the virtual

2410
1:27:11,199 --> 1:27:12,800
file system that shows us an interaction

2411
1:27:12,800 --> 1:27:14,320
with the kernel and we can see sure

2412
1:27:14,320 --> 1:27:17,600
enough here they are sdb c d and e and

2413
1:27:17,600 --> 1:27:19,199
this is how big they are the number of

2414
1:27:19,199 --> 1:27:20,800
blocks so they're 10 gigabytes and of

2415
1:27:20,800 --> 1:27:22,960
course if we just looked in the dev

2416
1:27:22,960 --> 1:27:25,600
folder and gripped for sd we would see

2417
1:27:25,600 --> 1:27:28,480
all these devices too right sd b c d and

2418
1:27:28,480 --> 1:27:30,239
e so what i want to do is just partition

2419
1:27:30,239 --> 1:27:32,239
one of them we're going to pick sdb and

2420
1:27:32,239 --> 1:27:33,360
there's a couple ways we could do this

2421
1:27:33,360 --> 1:27:36,080
we could use g parted now notice i'm

2422
1:27:36,080 --> 1:27:37,120
root we have to be rude if we're going

2423
1:27:37,120 --> 1:27:38,320
to do the system level stuff like

2424
1:27:38,320 --> 1:27:40,239
partition a hard drive but we could say

2425
1:27:40,239 --> 1:27:42,960
g parted and it'll start up and scan for

2426
1:27:42,960 --> 1:27:44,320
all the drives available and there's a

2427
1:27:44,320 --> 1:27:46,639
little drop down here sdb

2428
1:27:46,639 --> 1:27:49,040
very cool we would have to start by

2429
1:27:49,040 --> 1:27:50,960
creating a partition table and then we

2430
1:27:50,960 --> 1:27:52,719
could create a partition with gui tools

2431
1:27:52,719 --> 1:27:55,040
it's really really easy to use g parted

2432
1:27:55,040 --> 1:27:56,400
but a lot of times the system doesn't

2433
1:27:56,400 --> 1:27:57,920
have a gui so i don't want to do it that

2434
1:27:57,920 --> 1:28:00,480
way now we could also use parted or

2435
1:28:00,480 --> 1:28:03,360
partition editor this is the cli version

2436
1:28:03,360 --> 1:28:05,280
of the program that we just used we can

2437
1:28:05,280 --> 1:28:06,400
type help

2438
1:28:06,400 --> 1:28:08,560
and it'll show us it does the exact same

2439
1:28:08,560 --> 1:28:11,040
things it's just used you know use text

2440
1:28:11,040 --> 1:28:12,800
to tell it what to do all right so i'm

2441
1:28:12,800 --> 1:28:13,920
not going to use this one either but i

2442
1:28:13,920 --> 1:28:15,199
want you to know that they exist and if

2443
1:28:15,199 --> 1:28:16,639
you're more comfortable with them

2444
1:28:16,639 --> 1:28:18,400
they're a little bit newer and they have

2445
1:28:18,400 --> 1:28:20,080
a few more features and that sort of a

2446
1:28:20,080 --> 1:28
thing but what i want to show you is the

2447
1:28 --> 1:28:23,840
old school f disk and i want to show you

2448
1:28:23,840 --> 1:28:26,239
this because if you're on a server it

2449
1:28:26,239 --> 1:28:28,639
may not have partition editor you know

2450
1:28:28,639 --> 1:28:30,719
part ed or especially g parted the

2451
1:28:30,719 --> 1:28:32,960
graphical one so i want to show you what

2452
1:28:32,960 --> 1:28:34,639
almost every linux system is going to

2453
1:28:34,639 --> 1:28
have and we're going to use that one to

2454
1:28 --> 1:28:37,520
actually do our work so we're going to

2455
1:28:37,520 --> 1:28:39,280
say fdisk

2456
1:28:39,280 --> 1:28:41,920
dev sd b we have to tell it what device

2457
1:28:41,920 --> 1:28:43,440
we want to use so it's a good thing we

2458
1:28:43,440 --> 1:28:45,440
know how to find the available devices

2459
1:28:45,440 --> 1:28:46,639
on our system

2460
1:28:46,639 --> 1:28:50,320
type this and type m for help now we

2461
1:28:50,320 --> 1:28:52,239
just have these single letter commands

2462
1:28:52,239 --> 1:28:53,600
but that's okay the first thing we're

2463
1:28:53,600 --> 1:28:55,600
going to need to do is to create a

2464
1:28:55,600 --> 1:28:57,920
partition table and it can be one of two

2465
1:28:57,920 --> 1:29:00,239
types we can create a gpt partition

2466
1:29:00,239 --> 1:29:01,840
table by pressing g

2467
1:29:01,840 --> 1:29:05,440
or we can create the old mbr or ms-dos

2468
1:29:05,440 --> 1:29:07,840
partition table using oh

2469
1:29:07,840 --> 1:29:09,600
i'm just gonna pick since it's not over

2470
1:29:09,600 --> 1:29:11,520
two terabytes in size either one is

2471
1:29:11,520 --> 1:29:14,080
going to work so let's just use gpt for

2472
1:29:14,080 --> 1:29:15,760
the heck of it so i'm going to say g

2473
1:29:15,760 --> 1:29:18,080
press enter it says okay it built a new

2474
1:29:18,080 --> 1:29:21,199
gpt disk label this is its id and now we

2475
1:29:21,199 --> 1:29:23,120
have a partition table but no partitions

2476
1:29:23,120 --> 1:29:25,920
to create a partition we can actually

2477
1:29:25,920 --> 1:29:27,440
type p to see what's there there's gonna

2478
1:29:27,440 --> 1:29:29,920
be nothing there so to create one let's

2479
1:29:29,920 --> 1:29:31,360
press m again so we hit the whole help

2480
1:29:31,360 --> 1:29:33,679
screen we can say n for add a new

2481
1:29:33,679 --> 1:29:35,920
partition so new and now it says

2482
1:29:35,920 --> 1:29:38,719
partition number one through 128

2483
1:29:38,719 --> 1:29:41,520
right this is not mbr mbr would only

2484
1:29:41,520 --> 1:29:44,400
support one through four this is gpt so

2485
1:29:44,400 --> 1:29:46,159
one through 128 i'm just going to pick

2486
1:29:46,159 --> 1:29:47,520
the default

2487
1:29:47,520 --> 1:29:49,280
first sector the default is going to be

2488
1:29:49,280 --> 1:29:50,719
the first one available

2489
1:29:50,719 --> 1:29:52,159
last sector the default is going to be

2490
1:29:52,159 --> 1:29:53,840
the last one available right this is our

2491
1:29:53,840 --> 1:29:55,360
range and it chose the last one so i

2492
1:29:55,360 --> 1:29:57,280
want to fill up the entire partition or

2493
1:29:57,280 --> 1:29:59,360
the entire drive with this one partition

2494
1:29:59,360 --> 1:30:00,960
so if we type p now we're going to see

2495
1:30:00,960 --> 1:30:02,239
sure enough we have a partition there

2496
1:30:02,239 --> 1:30:04,560
it's 10 gigabytes linux file system type

2497
1:30:04,560 --> 1:30:06,960
that's okay and now to quit let's press

2498
1:30:06,960 --> 1:30:09,280
m again for help to quit we could just

2499
1:30:09,280 --> 1:30:11,280
press q and it would quit without saving

2500
1:30:11,280 --> 1:30:13,040
changes but we actually want to make

2501
1:30:13,040 --> 1:30:14,320
these changes so we want to make the

2502
1:30:14,320 --> 1:30:15,920
change to the disk so we're going to use

2503
1:30:15,920 --> 1:30:19,199
w to exit which means right so w

2504
1:30:19,199 --> 1:30:21,360
enter and now our partition table has

2505
1:30:21,360 --> 1:30
been done we can say lsblk and look at

2506
1:30 --> 1:30:25,520
that now it shows up that we have a

2507
1:30:25,520 --> 1:30:27,199
partition created on our system it

2508
1:30:27,199 --> 1:30:29,920
happens to be a gpt partition table and

2509
1:30:29,920 --> 1:30:32,239
it's a single partition that takes up

2510
1:30:32,239 --> 1:30:34,400
the entire drive i didn't actually go

2511
1:30:34,400 --> 1:30:36,159
through the process of using parted or

2512
1:30:36,159 --> 1:30:38,159
gparted they're very straightforward and

2513
1:30:38,159 --> 1:30:39,360
they walk you through it and the help

2514
1:30:39,360 --> 1:30:41,360
screen is right there and easy to use so

2515
1:30:41,360 --> 1:30:43,280
if you want to use those by all means go

2516
1:30:43,280 --> 1:30:44,639
ahead but i wanted to show you the more

2517
1:30:44,639 --> 1:30:46,480
complicated fdisk because it's going to

2518
1:30:46,480 --> 1:30:48,239
be on every single system that you run

2519
1:30:48,239 --> 1:30:49,679
across

2520
1:30:49,679 --> 1:30:52,080
there's a wide variety of file systems

2521
1:30:52,080 --> 1:30:53,920
that you can put on an empty partition

2522
1:30:53,920 --> 1:30:55,920
in linux but the idea of all of them is

2523
1:30:55,920 --> 1:30:58,880
the same you take a big empty partition

2524
1:30:58,880 --> 1:31:01,920
like a big field and you divide it up so

2525
1:31:01,920 --> 1:31:04,320
that you can store data efficiently like

2526
1:31:04,320 --> 1:31:06,080
if this parking lot were

2527
1:31:06,080 --> 1:31:08,400
an example of a file system each car

2528
1:31:08,400 --> 1:31:10,719
would be a piece of data that is stored

2529
1:31:10,719 --> 1:31:13,840
logically in its place and and some file

2530
1:31:13,840 --> 1:31:15,840
systems have you know bigger spaces for

2531
1:31:15,840 --> 1:31:17,920
parking buses some have littler spaces

2532
1:31:17,920 --> 1:31:19,440
for parking compact cars but

2533
1:31:19,440 --> 1:31:21,920
conceptually they all do the same thing

2534
1:31:21,920 --> 1:31:23,360
now like i said there's a bunch of

2535
1:31:23,360 --> 1:31:26,800
different options available in linux ext

2536
1:31:26,800 --> 1:31:30,159
is the most common family of file

2537
1:31:30,159 --> 1:31:31,760
systems that you can use on linux it's

2538
1:31:31,760 --> 1:31:33,920
very mature it's been around forever the

2539
1:31:33,920 --> 1:31:35,920
later versions support journals so that

2540
1:31:35,920 --> 1:31:37,679
if a computer gets powered down before

2541
1:31:37,679 --> 1:31:39,440
the reads and writes are synced up

2542
1:31:39,440 --> 1:31:41,679
usually you can salvage the data on

2543
1:31:41,679 --> 1:31:45,440
there so it's fairly robust as well xfs

2544
1:31:45,440 --> 1:31:47,040
is a file system that's been around for

2545
1:31:47,040 --> 1:31:48,800
a long time this used to be what you had

2546
1:31:48,800 --> 1:31:51,920
to use for really really big drives but

2547
1:31:51,920 --> 1:31:53,520
now everything supports big drive so

2548
1:31:53,520 --> 1:31:55,360
that's not really the issue anymore it

2549
1:31:55,360 --> 1:31:57,600
is still used by centos and red hat

2550
1:31:57,600 --> 1:32:00,159
though so xfs is still widely used

2551
1:32:00,159 --> 1:32:02,880
interestingly it has its own set of

2552
1:32:02,880 --> 1:32:04,480
tools like for

2553
1:32:04,480 --> 1:32:07,199
file checking fixing things manipulating

2554
1:32:07,199 --> 1:32:09,679
the the xfs file system itself rather

2555
1:32:09,679 --> 1:32:11,600
than using standard linux tools it has

2556
1:32:11,600 --> 1:32:14,239
its own set of xfs tools there's a

2557
1:32:14,239 --> 1:32:15,400
couple others

2558
1:32:15,400 --> 1:32:18,639
btrfs it's often called butter fs

2559
1:32:18,639 --> 1:32:20,480
this was the new kit on the block right

2560
1:32:20,480 --> 1:32:21,920
this has awesome features like

2561
1:32:21,920 --> 1:32:24,239
snapshotting and it's just awesome

2562
1:32:24,239 --> 1:32:25,760
unfortunately it's kind of been

2563
1:32:25,760 --> 1:32:28,560
abandoned which is weird but nonetheless

2564
1:32:28,560 --> 1:32:30,800
it's kind of what happened so btrfs is

2565
1:32:30,800 --> 1:32:33,199
still functional but it's not widely

2566
1:32:33,199 --> 1:32:34,880
used anymore and then of course i'm just

2567
1:32:34,880 --> 1:32:37,040
going to mention them dos or the windows

2568
1:32:37,040 --> 1:32:38,880
world has their own file systems like

2569
1:32:38,880 --> 1:32:41,679
ntfs vfat fat32 things that you're

2570
1:32:41,679 --> 1:32:43,199
familiar with if you're in the windows

2571
1:32:43,199 --> 1:32:45,520
world and linux can usually read and

2572
1:32:45,520 --> 1:32:48,159
even write to most of these file systems

2573
1:32:48,159 --> 1:32:49,600
but when we're talking about linux file

2574
1:32:49,600 --> 1:32:51,199
systems we're generally talking about

2575
1:32:51,199 --> 1:32:54,639
linux specific ones and ext

2576
1:32:54,639 --> 1:32:56,880
is awesome i'll be honest i like ext

2577
1:32:56,880 --> 1:32:59,520
there's generally three there's e xt 2

2578
1:32:59,520 --> 1:33:03,040
ext3 and ext4 now this isn't necessarily

2579
1:33:03,040 --> 1:33:05,120
like one is better than the next they

2580
1:33:05,120 --> 1:33:07,280
each have their own features but ext4 is

2581
1:33:07,280 --> 1:33:09,600
the newest and has the most features

2582
1:33:09,600 --> 1:33:12,639
i'll be honest i almost always pick ext4

2583
1:33:12,639 --> 1:33:15,120
as my default file system not because

2584
1:33:15,120 --> 1:33:17,120
it's necessarily better than any other

2585
1:33:17,120 --> 1:33:19,360
option but because it's so widely used

2586
1:33:19,360 --> 1:33:21,679
that means there are a ton of tools and

2587
1:33:21,679 --> 1:33:24,480
utilities and tutorials online to get

2588
1:33:24,480 --> 1:33:26,960
data back if you have some corruption so

2589
1:33:26,960 --> 1:33:30,320
ext4 is my file system of choice mainly

2590
1:33:30,320 --> 1:33:32,800
because it's used in so many places when

2591
1:33:32,800 --> 1:33:34,320
it comes to creating a file system

2592
1:33:34,320 --> 1:33:36,320
basically you need a partitioned hard

2593
1:33:36,320 --> 1:33:38,159
drive so that you can you know have a

2594
1:33:38,159 --> 1:33:39,920
partition or that empty field in order

2595
1:33:39,920 --> 1:33:41,760
to draw the lines for your parking lot

2596
1:33:41,760 --> 1:33:43,440
or put that file system on now i'm going

2597
1:33:43,440 --> 1:33:45,440
to say lsblk

2598
1:33:45,440 --> 1:33:46,800
and we're going to see these are the

2599
1:33:46,800 --> 1:33:49,520
different block devices on our system i

2600
1:33:49,520 --> 1:33:52,480
have two partitions created i have sdb1

2601
1:33:52,480 --> 1:33:54,800
and sdc1 these are just 10 gigabyte

2602
1:33:54,800 --> 1:33:56,400
partitions on 10 gigabyte drive so it

2603
1:33:56,400 --> 1:33:57,920
takes up the whole drive and we're going

2604
1:33:57,920 --> 1:34:00,159
to format each of them all right so i'm

2605
1:34:00,159 --> 1:34:01,760
going to say oh here's another really

2606
1:34:01,760 --> 1:34:03,600
cool thing about linux the file

2607
1:34:03,600 --> 1:34:05,679
formatting or the hard drive formatting

2608
1:34:05,679 --> 1:34:09,199
programs all start with mk for make fs

2609
1:34:09,199 --> 1:34:11,120
file system and then just hit tab a

2610
1:34:11,120 --> 1:34:12,880
couple times and you're going to see all

2611
1:34:12,880 --> 1:34:14,960
the various tools for creating the

2612
1:34:14,960 --> 1:34:17,040
different types of file systems so let's

2613
1:34:17,040 --> 1:34:19,040
say we're going to make a butterfs file

2614
1:34:19,040 --> 1:34:22,400
system so we would say mkfs.btrfs

2615
1:34:22,400 --> 1:34:23,760
[Music]

2616
1:34:23,760 --> 1:34:25,520
and then what partition we want to

2617
1:34:25,520 --> 1:34
create that file system on in our case

2618
1:34 --> 1:34:28,960
dev

2619
1:34:28,960 --> 1:34:30,480
sdb1

2620
1:34:30,480 --> 1:34:32,239
alright so it's created it it says we

2621
1:34:32,239 --> 1:34:35,360
have 10 gigabytes idu's one that's the

2622
1:34:35,360 --> 1:34:36,960
path okay so it looks like it did that

2623
1:34:36,960 --> 1:34:38,400
without any problems let's create

2624
1:34:38,400 --> 1:34:42,880
another uh file system so uh mkfs hit

2625
1:34:42,880 --> 1:34:44,239
tab a couple times so i can see our

2626
1:34:44,239 --> 1:34
options now like i said i usually use

2627
1:34 --> 1:34:49,280
ext4 so i'm going to say ext4

2628
1:34:49,280 --> 1:34:52,080
dev sdc one which was the other

2629
1:34:52,080 --> 1:34:53,520
partition that i had created on this

2630
1:34:53,520 --> 1:34:55,040
system and it went through and it

2631
1:34:55,040 --> 1:34:56,880
created that file system and now a

2632
1:34:56,880 --> 1:34:58,840
really cool thing if we use the

2633
1:34:58,840 --> 1:35:01,760
lsblk but we add the dash f it's going

2634
1:35:01,760 --> 1:35:04,239
to show us the file systems that are on

2635
1:35:04,239 --> 1:35:06,480
the particular block devices as well so

2636
1:35:06,480 --> 1:35:08,159
if we do that we're going to see up here

2637
1:35:08,159 --> 1:35:10,800
we have sda1 which remember i said red

2638
1:35:10,800 --> 1:35:12,800
hat and sent to us use xfs well sure

2639
1:35:12,800 --> 1:35:15,920
enough there it is xfs is used sdb1 is

2640
1:35:15,920 --> 1:35:17,760
that butterfs file system that we

2641
1:35:17,760 --> 1:35:20,800
created and then down here is an ext4

2642
1:35:20,800 --> 1:35:22,880
file system that we created on our

2643
1:35:22,880 --> 1:35:24,719
system so that's all there is to

2644
1:35:24,719 --> 1:35:27,360
creating the various file systems and

2645
1:35:27,360 --> 1:35:28,960
really you can pick whichever one you

2646
1:35:28,960 --> 1:35:30,560
want but you do have to have a partition

2647
1:35:30,560 --> 1:35:32,159
in existence before you can create a

2648
1:35:32,159 --> 1:35
file system on it and while yes there

2649
1:35 --> 1:35:35,760
are a whole bunch of file systems that

2650
1:35:35,760 --> 1:35:37,679
you can use on linux and it supports a

2651
1:35:37,679 --> 1:35:41,040
bunch i really recommend that ext family

2652
1:35:41,040 --> 1:35:43,600
of file systems if you have a choice and

2653
1:35:43,600 --> 1:35:45,040
you're just trying to decide what one to

2654
1:35:45,040 --> 1:35:47,440
use largely because it's used so often

2655
1:35:47,440 --> 1:35:48,960
there's so much support if something

2656
1:35:48,960 --> 1:35:50,800
goes wrong you can find a lot of help

2657
1:35:50,800 --> 1:35:51,840
online

2658
1:35:51,840 --> 1:35:53,679
if we want to be able to access the data

2659
1:35:53,679 --> 1:35:55,600
that's on the drives or the partitions

2660
1:35:55,600 --> 1:35:57,040
of the drives that we put into our

2661
1:35:57,040 --> 1:36:00,080
system we have to mount them into our

2662
1:36:00,080 --> 1:36
local file system now we can do that

2663
1:36 --> 1:36:03,600
manually using tools like mount or

2664
1:36:03,600 --> 1:36:06,719
u-mount or we can use the etc tab file

2665
1:36:06,719 --> 1:36:09,280
to do it automatically on boot but

2666
1:36:09,280 --> 1:36:11,679
conceptually what's going on is that we

2667
1:36:11,679 --> 1:36:13,679
have a new hard drive or a partitioned

2668
1:36:13,679 --> 1:36:15,600
hard drive and we want to

2669
1:36:15,600 --> 1:36
incorporate that into our file system

2670
1:36 --> 1:36:19,679
now it's really important to note that

2671
1:36:19,679 --> 1:36:21,920
when you mount a partition or a hard

2672
1:36:21,920 --> 1:36:24,239
drive it goes into a folder and that

2673
1:36:24,239 --> 1:36:27,440
folder becomes what is in that drive now

2674
1:36:27,440 --> 1:36:29,520
we couldn't mount it on this folder

2675
1:36:29,520 --> 1:36:32,480
because this folder already has things

2676
1:36:32,480 --> 1:36:34,320
inside of it it has to be mounted on an

2677
1:36:34,320 --> 1:36:35,920
empty folder because it doesn't make

2678
1:36:35,920 --> 1:36:36,800
sense

2679
1:36:36,800 --> 1:36:38,800
to have all the things in this hard

2680
1:36:38,800 --> 1:36:40,960
drive in this folder and then have these

2681
1:36:40,960 --> 1:36:42,800
other folders alongside of it so it has

2682
1:36:42,800 --> 1:36:45,040
to be in an empty folder that we mount a

2683
1:36:45,040 --> 1:36:47,440
partition or a drive so we could

2684
1:36:47,440 --> 1:36:49,600
actually take this hard drive and mount

2685
1:36:49,600 --> 1:36:51,440
it into this folder if it's an empty

2686
1:36:51,440 --> 1:36:53,199
folder and that's what we're going to do

2687
1:36:53,199 --> 1:36:55,600
on our system is find an empty folder

2688
1:36:55,600 --> 1:36:58,239
and then this all the files inside this

2689
1:36:58,239 --> 1:37:00,560
drive will become part of our bigger

2690
1:37:00,560 --> 1:37:03,360
linux file system starting at this mount

2691
1:37:03,360 --> 1:37:04,400
point

2692
1:37:04,400 --> 1:37:06,480
now i'm here on an ubuntu system and i

2693
1:37:06,480 --> 1:37:09,280
have the regular route mounted hard

2694
1:37:09,280 --> 1:37:11,119
drive and then i also have an additional

2695
1:37:11,119 --> 1:37
10 gig drive and if we do lsblk we can

2696
1:37 --> 1:37:16,239
see that we have well a bunch of things

2697
1:37:16,239 --> 1:37:18,400
here loop loopback devices but we have

2698
1:37:18,400 --> 1:37:20,880
down here sdb1 okay this is a 10

2699
1:37:20,880 --> 1:37:23,440
gigabyte partition and it's all set up

2700
1:37:23,440 --> 1:37:24,639
and ready to mount but it's not

2701
1:37:24,639 --> 1:37:27,119
currently mounted on our system so in

2702
1:37:27,119 --> 1:37:29,600
order to mount that i actually want to

2703
1:37:29,600 --> 1:37:31,520
mount it in a folder if we look inside

2704
1:37:31,520 --> 1:37:34,239
mnt there's a folder called 10 gig and

2705
1:37:34,239 --> 1:37:36,719
inside that folder

2706
1:37:36,719 --> 1:37:38,639
is nothing it's an empty folder so i

2707
1:37:38,639 --> 1:37:41,760
want to mount it on there now if we do

2708
1:37:41,760 --> 1:37:44,880
blk id we can see a little bit more

2709
1:37:44,880 --> 1:37:47,199
information about the device itself so

2710
1:37:47,199 --> 1:37:50,480
here is dev sdb1 now here is the

2711
1:37:50,480 --> 1:37:52,639
universally unique identifier for this

2712
1:37:52,639 --> 1:37:55,040
partition uh keep note that this is

2713
1:37:55,040 --> 1:37:56,320
something that's specified about the

2714
1:37:56,320 --> 1:37:57,920
partition we'll look at that in a second

2715
1:37:57,920 --> 1:38:00,960
but we know that it's type ext4 okay

2716
1:38:00,960 --> 1:38:02,560
that's good to know and we know that

2717
1:38:02,560 --> 1:38:05,199
this is where the actual partition lives

2718
1:38:05,199 --> 1:38:06,400
so we can say

2719
1:38:06,400 --> 1:38:08,880
mount now i'm going to say dash t for

2720
1:38:08,880 --> 1:38:12,080
type ext4 usually mount can

2721
1:38:12,080 --> 1:38:13,679
automatically figure out what kind of

2722
1:38:13,679 --> 1:38
file system it is but if we know there's

2723
1:38 --> 1:38:18,080
no reason not to do that so i'm going to

2724
1:38:18,080 --> 1:38:20,320
say mount dev

2725
1:38:20,320 --> 1:38:22,159
sdb1

2726
1:38:22,159 --> 1:38:25,920
and where do i want it to mount on mnt

2727
1:38:25,920 --> 1:38:27,040
10 gig

2728
1:38:27,040 --> 1:38:30,639
press enter and now if we go into

2729
1:38:30,639 --> 1:38:32,080
mnt

2730
1:38:32,080 --> 1:38:33,280
10 gig

2731
1:38:33,280 --> 1:38:34,400
we're gonna see sure enough now there's

2732
1:38:34,400 --> 1:38:36,239
a lost and found thing this is the root

2733
1:38:36,239 --> 1:38:38,159
level of that hard drive but now it

2734
1:38:38,159 --> 1:38:40,400
actually lives in our file system right

2735
1:38:40,400 --> 1:38:43,040
here we can type mount alone on the on

2736
1:38:43,040 --> 1:38:44,480
the line it will show us where it's

2737
1:38:44,480 --> 1:38:46,560
mounted right so right here it's mounted

2738
1:38:46,560 --> 1:38:50,080
on mnt 10 gig so let me type cd and then

2739
1:38:50,080 --> 1:38:53,280
we can unmount it by typing u-mount

2740
1:38:53,280 --> 1:38:54,719
mnt

2741
1:38:54,719 --> 1:38:57,280
10 gig it's not unmount it's u-mount all

2742
1:38:57,280 --> 1:38:59,280
right so there now that that's how we

2743
1:38:59,280 --> 1:39:00,880
manually mounted and unmounted if we

2744
1:39:00,880 --> 1:39:03,040
wanted to have it mount automatically on

2745
1:39:03,040 --> 1:39:06,239
boot we would edit the file etc fs

2746
1:39:06,239 --> 1:39:07,920
tab all right and i'm actually going to

2747
1:39:07,920 --> 1:39:10,080
stretch this out so we can see

2748
1:39:10,080 --> 1:39:12,159
everything on here we can see there's

2749
1:39:12,159 --> 1:39:14,960
already an entry in here for the root

2750
1:39:14,960 --> 1:39:19,760
file system sda or s yeah sda1 but

2751
1:39:19,760 --> 1:39:22,159
notice it doesn't specify it by its

2752
1:39:22,159 --> 1:39:24,480
device it specifies it by its

2753
1:39:24,480 --> 1:39:26,800
universally unique identifier which we

2754
1:39:26,800 --> 1:39:29,679
could get by using that blk id command

2755
1:39:29,679 --> 1:39:31,840
it'll get us that uuid for the

2756
1:39:31,840 --> 1:39:33,840
particular partition now we could use

2757
1:39:33,840 --> 1:39:35,520
the uuid for

2758
1:39:35,520 --> 1:39:38,800
a dev sdb1 and we could put that in here

2759
1:39:38,800 --> 1:39:40,560
to mount it but i'm actually going to

2760
1:39:40,560 --> 1:39:43,440
use let me make another entry here i'm

2761
1:39:43,440 --> 1:39:44,800
actually going to

2762
1:39:44,800 --> 1:39:47,520
say that the file system is on

2763
1:39:47,520 --> 1:39:51,040
dev sd b1 we can specify it by device or

2764
1:39:51,040 --> 1:39:53,679
by uuid or we can even use the drive

2765
1:39:53,679 --> 1:39:55,760
label if we want but in this case i'm

2766
1:39:55,760 --> 1:39:58,480
just going to use the the device itself

2767
1:39:58,480 --> 1:40:01,360
and then tab over the next field here is

2768
1:40:01,360 --> 1:40:03,520
the mount point so i want this mounted

2769
1:40:03,520 --> 1:40:04,880
on mnt

2770
1:40:04,880 --> 1:40:06,639
10 gig

2771
1:40:06,639 --> 1:40:09,199
tab over the next thing is type it's an

2772
1:40:09,199 --> 1:40:11,440
ext4

2773
1:40:11,440 --> 1:40:14,719
options i'm just going to say defaults

2774
1:40:14,719 --> 1:40:16,800
and then the last two fields are dump

2775
1:40:16,800 --> 1:40:19,440
and pass now dump is an old school

2776
1:40:19,440 --> 1:40:21,520
backup program it used to dump the files

2777
1:40:21,520 --> 1:40:23,840
to a backup this is really deprecated

2778
1:40:23,840 --> 1:40:25,840
it's not really used anymore at all so

2779
1:40:25,840 --> 1:40:27,679
dump you're going to want to put 0 for

2780
1:40:27,679 --> 1:40:30,960
dump the last line though pass this

2781
1:40:30,960 --> 1:40:32,960
means do you want it to run a file

2782
1:40:32,960 --> 1:40:35,840
system check 0 means never run a file

2783
1:40:35,840 --> 1:40:37,040
system check

2784
1:40:37,040 --> 1:40:39,520
one means run the file system check

2785
1:40:39,520 --> 1:40:42,239
first so you put a one on the root

2786
1:40:42,239 --> 1:40:43,440
partition

2787
1:40:43,440 --> 1:40:45,199
any other partition that you wanna have

2788
1:40:45,199 --> 1:40:47,199
checked when the system boots up you're

2789
1:40:47,199 --> 1:40:48,639
gonna put a two

2790
1:40:48,639 --> 1:40:50,800
so i'm going to put dump of 0 you always

2791
1:40:50,800 --> 1:40:53,360
put 0 for dump and then pass is 2. it's

2792
1:40:53,360 --> 1:40:55,040
the second most important because the

2793
1:40:55,040 --> 1:40:56,400
root is the first one you want to have

2794
1:40:56,400 --> 1:40:57,840
scanned and then everything else is

2795
1:40:57,840 --> 1:40:59,440
going to be 2. so you can have like five

2796
1:40:59,440 --> 1:41:00,880
different partitions mounted they could

2797
1:41:00,880 --> 1:41:03,280
all have pass of 2. now there's more to

2798
1:41:03,280 --> 1:41:05,040
it to get it to scan automatically on

2799
1:41:05,040 --> 1:41:06,400
boot but when you're setting up the

2800
1:41:06,400 --> 1:41:08,480
fstab file this is where you do it so

2801
1:41:08,480 --> 1:41:11,040
save this and now we could just type

2802
1:41:11,040 --> 1:41:13,760
mount minus a and it's going to mount

2803
1:41:13,760 --> 1:41:17,199
everything that is specified in fstab

2804
1:41:17,199 --> 1:41:18,960
and we can look by saying

2805
1:41:18,960 --> 1:41:20,880
mount and it'll show us that sure enough

2806
1:41:20,880 --> 1:41:22,719
it remounted that because we defined it

2807
1:41:22,719 --> 1:41:25,119
in fstab and if we reboot the computer

2808
1:41:25,119 --> 1:41:27,040
it's going to automatically boot it or

2809
1:41:27,040 --> 1:41:28,560
it's going to automatically mount it as

2810
1:41:28,560 --> 1:41:30,480
well it's really easy to mount

2811
1:41:30,480 --> 1:41:32,800
partitions using the manual tools it's

2812
1:41:32,800 --> 1:41:35,440
also pretty easy to use the fstab file

2813
1:41:35,440 --> 1:41:37,840
to specify it and you can either specify

2814
1:41:37,840 --> 1:41:40,880
it by device name or the uuid that we

2815
1:41:40,880 --> 1:41:45,199
can find out using the blk id program

2816
1:41:45,199 --> 1:41:47,679
to scan a linux file system generally

2817
1:41:47,679 --> 1:41:51,199
you use the tool fsck or just fisk as

2818
1:41:51,199 --> 1:41:53,520
it's often referred to now the real key

2819
1:41:53,520 --> 1:41:56,719
though is to have it scan automatically

2820
1:41:56,719 --> 1:41:58,719
periodically on boots so you don't have

2821
1:41:58,719 --> 1:42:00,400
to manually do it because here's the

2822
1:42:00,400 --> 1:42:03,199
deal in order to run fisk the file

2823
1:42:03,199 --> 1:42:05,440
system itself has to be unmounted that's

2824
1:42:05,440 --> 1:42:07,920
not really a problem for secondary or

2825
1:42:07,920 --> 1:42:09,600
tertiary drive mounts like the home

2826
1:42:09,600 --> 1:42:11,440
directory or something like that but the

2827
1:42:11,440 --> 1:42:13,440
root directory it's pretty difficult to

2828
1:42:13,440 --> 1:42:15,679
unmount the root directory and scan it

2829
1:42:15,679 --> 1:42:17,600
unless you're in the boot up process or

2830
1:42:17,600 --> 1:42:19,600
you've booted from a cd or something so

2831
1:42:19,600 --> 1:42:21,760
i want to talk specifically about how to

2832
1:42:21,760 --> 1:42:23,440
set up the system to

2833
1:42:23,440 --> 1:42
scan the the file system on boot

2834
1:42 --> 1:42:28,400
including the root file system so that

2835
1:42:28,400 --> 1:42:30,239
you can you know have it automatically

2836
1:42:30,239 --> 1:42:32,560
maintain itself now when it comes to

2837
1:42:32,560 --> 1:42:34,800
scanning automatically there's a few

2838
1:42:34,800 --> 1:42:36,560
different flowchart things that go on

2839
1:42:36,560 --> 1:42:38,239
the very first thing the kernel looks

2840
1:42:38,239 --> 1:42
for is inside your fstab file if the

2841
1:42 --> 1:42:45,360
pass setting is set up if it's a zero

2842
1:42:45,360 --> 1:42:47,280
you know if you have your your dump and

2843
1:42:47,280 --> 1:42:49,199
pass and if the pass is set to zero then

2844
1:42:49,199 --> 1:42:51,199
it won't scan it just absolutely will

2845
1:42:51,199 --> 1:42:52,800
refuse to scan it doesn't even look any

2846
1:42:52,800 --> 1:42:54,400
further it just stops right there and

2847
1:42:54,400 --> 1:42:56,560
continues booting up the system if

2848
1:42:56,560 --> 1:42:58,639
however you have that partition set up

2849
1:42:58,639 --> 1:43:01,440
with either a one or a two a one for the

2850
1:43:01,440 --> 1:43:03,360
root partition a two for any other kind

2851
1:43:03,360 --> 1:43
of partition if you have it set up then

2852
1:43 --> 1:43:08,800
it looks at the drive itself and it says

2853
1:43:08,800 --> 1:43:09,679
okay

2854
1:43:09,679 --> 1:43:13,520
has the maximum number of allowed mounts

2855
1:43:13,520 --> 1:43:16,480
been reached and if that threshold has

2856
1:43:16,480 --> 1:43:18,480
been reached it will scan the drive

2857
1:43:18,480 --> 1:43:21,440
before it boots up if not if it hasn't

2858
1:43:21,440 --> 1:43:24,080
met this maximum yet then it's not going

2859
1:43:24,080 --> 1:43:25,679
to scan it's going to increment it's

2860
1:43:25,679 --> 1:43:26,960
going to say okay i'm going to mount one

2861
1:43:26,960 --> 1:43:28,480
more time and add it to the number of

2862
1:43:28,480 --> 1:43:30,480
times i've been mounted but i'm not

2863
1:43:30,480 --> 1:43:33,040
going to scan it even if the pass is set

2864
1:43:33,040 --> 1:43:35,440
up to scan it's not going to scan it if

2865
1:43:35,440 --> 1:43:38,320
it hasn't met the max now the max by

2866
1:43:38,320 --> 1:43:40,800
default is negative one which means it's

2867
1:43:40,800 --> 1:43:43,760
never going to scan because that's just

2868
1:43:43,760 --> 1:43:45,360
the way of saying like don't ever

2869
1:43:45,360 --> 1:43:47,119
automatically mount so by default you're

2870
1:43:47,119 --> 1:43:48,880
never going to get an automatic scanning

2871
1:43:48,880 --> 1:43:50,480
which is a little bit frustrating

2872
1:43:50,480 --> 1:43:52,800
because you do want to have your system

2873
1:43:52,800 --> 1:43:55,600
automatically scanned so on ubuntu here

2874
1:43:55,600 --> 1:43:56,800
i have

2875
1:43:56,800 --> 1:43:57,760
dev

2876
1:43:57,760 --> 1:44:01,440
sdb1 mounted on mnt 10 gig okay so this

2877
1:44:01,440 --> 1:44:03,600
is another partition this is not my root

2878
1:44:03,600 --> 1:44:06,800
partition but it's mounted on mnt 10 gig

2879
1:44:06,800 --> 1:44:10,639
all right if i look inside of the fs tab

2880
1:44:10,639 --> 1:44:11,520
file

2881
1:44:11,520 --> 1:44:13,199
we're going to see that on this

2882
1:44:13,199 --> 1:44:14,800
partition that i have automatically

2883
1:44:14,800 --> 1:44:17,840
mount on boot it's set up with a pass of

2884
1:44:17,840 --> 1:44:20,080
2 which means that it is going to check

2885
1:44:20,080 --> 1:44:22,320
to see if it should scan automatically

2886
1:44:22,320 --> 1:44:24,080
okay it's not the root partition so i

2887
1:44:24,080 --> 1:44:26,480
don't have it set up with a pass of 1

2888
1:44:26,480 --> 1:44:28,320
but since it's set up with 2 it's going

2889
1:44:28,320 --> 1:44:30,560
to check and say okay if it's time i'm

2890
1:44:30,560 --> 1:44:32,159
going to scan this

2891
1:44:32,159 --> 1:44:34,159
so let's get out of here and how we can

2892
1:44:34,159 --> 1:44:36,880
see what the maximum number of allowable

2893
1:44:36,880 --> 1:44:39,199
mounts before it will scan is is to use

2894
1:44:39,199 --> 1:44:42,320
the tune 2fs

2895
1:44:42,320 --> 1:44:44,159
we're going to do dash l for a listing

2896
1:44:44,159 --> 1:44:45,040
of

2897
1:44:45,040 --> 1:44:47,360
dev sd b1

2898
1:44:47,360 --> 1:44:49,600
and it's going to show us this now what

2899
1:44:49,600 --> 1:44:51,119
you want to look for in here is this

2900
1:44:51,119 --> 1:44:53,199
maximum amount count remember i said by

2901
1:44:53,199 --> 1:44:55,119
default it doesn't ever scan that's

2902
1:44:55,119 --> 1:44:57,679
because this is set to negative one and

2903
1:44:57,679 --> 1:44:59,360
you're never going to reach that because

2904
1:44:59,360 --> 1:45:01,440
that's just the way of saying disable it

2905
1:45:01,440 --> 1:45:03,520
if we want to have it automatically scan

2906
1:45:03,520 --> 1:45:05,600
every so often we need to change this so

2907
1:45:05,600 --> 1:45:06,800
we would say

2908
1:45:06,800 --> 1:45:09,040
tune to fs

2909
1:45:09,040 --> 1:45
dash c for count and i'm going to say

2910
1:45 --> 1:45:15,600
every 10 months i want it to scan and

2911
1:45:15,600 --> 1:45:19,760
dev sdb1 okay so now the maximum amount

2912
1:45:19,760 --> 1:45
count is 10. we can look at that by

2913
1:45 --> 1:45:23,440
doing the same command over and we can

2914
1:45:23,440 --> 1:45:26,800
see now the maximum amount count is 10.

2915
1:45:26,800 --> 1:45:28,960
okay so what does that mean well every

2916
1:45:28,960 --> 1:45:30,880
time the system boots it mounts the

2917
1:45:30,880 --> 1:45:33,440
partition well we could speed that up we

2918
1:45:33,440 --> 1:45:38,199
could say umount dev sd b1 mount dev

2919
1:45:38,199 --> 1:45:41,679
sdb1 we do that and now if we look it's

2920
1:45:41,679 --> 1:45:43,280
going to increment it by one because we

2921
1:45:43,280 --> 1:45:45,280
unmounted it and remounted it so if we

2922
1:45:45,280 --> 1:45:49,040
do that a bunch of times

2923
1:45:49,040 --> 1:45:51,760
and now we look back and see okay our

2924
1:45:51,760 --> 1:45:54,800
mount count is now 16 and our maximum

2925
1:45:54,800 --> 1:45:57,119
count that is allowed is 10. well why

2926
1:45:57,119 --> 1:45:58,960
didn't it automatically scan well it

2927
1:45:58,960 --> 1:46:01,760
only does that on boot so if we were to

2928
1:46:01,760 --> 1:46:03,760
reboot the system it would go through

2929
1:46:03,760 --> 1:46:06,400
the flow chart and it would say okay you

2930
1:46:06,400 --> 1:46:08,800
have your pass set to two so that means

2931
1:46:08,800 --> 1:46:10,719
i need to check the drive and say okay

2932
1:46:10,719 --> 1:46:13,679
drive is your mount count higher than

2933
1:46:13,679 --> 1:46
the maximum amount count allowed before

2934
1:46 --> 1:46:18,239
a scan and it will be so if we do a

2935
1:46:18,239 --> 1:46:21,360
reboot

2936
1:46:21,360 --> 1:46:24,080
and once it's booted back up we look and

2937
1:46:24,080 --> 1:46:27,520
run that tune 2fs again so sudo

2938
1:46:27,520 --> 1:46:29,360
tune 2fs

2939
1:46:29,360 --> 1:46:30,600
l

2940
1:46:30,600 --> 1:46:32,239
devsdb1

2941
1:46:32,239 --> 1:46:33,920
now we're going to see that the mount

2942
1:46:33,920 --> 1:46:36,159
count is down to 1 which means that it

2943
1:46:36,159 --> 1:46:38,560
scanned it it ran fisk on boot before it

2944
1:46:38,560 --> 1:46:41,040
was mounted and it reset the mount count

2945
1:46:41,040 --> 1:46:42,719
to zero and then of course it mounted it

2946
1:46:42,719 --> 1:46:45,679
so now it's one so now it's not going to

2947
1:46:45,679 --> 1:46:48,159
rescan that on boot until the mount

2948
1:46:48,159 --> 1:46:51,040
count gets above this maximum amount

2949
1:46:51,040 --> 1:46:52,080
count and then it will do it

2950
1:46:52,080 --> 1:46:54,080
automatically and figuring out what

2951
1:46:54,080 --> 1:46:56,719
number to set here can be kind of tricky

2952
1:46:56,719 --> 1:46:58,400
because here's the deal if you're on a

2953
1:46:58,400 --> 1:47:01,040
laptop you might reboot fairly often so

2954
1:47:01,040 --> 1:47:02,480
you're going to want to have that number

2955
1:47:02,480 --> 1:47:04,480
kind of high so it doesn't scan every

2956
1:47:04,480 --> 1:47:06,719
single time but if it's a big file

2957
1:47:06,719 --> 1:47:09,600
server maybe you rarely ever reboot it

2958
1:47:09,600 --> 1:47:11,920
maybe once a year well in that case you

2959
1:47:11,920 --> 1:47:13,679
might want the mount count to be very

2960
1:47:13,679 --> 1:47:16,239
low so that every time it gets rebooted

2961
1:47:16,239 --> 1:47:18,880
it does scan for consistency's sake

2962
1:47:18,880 --> 1:47:21,920
and then one more thing if it's a huge

2963
1:47:21,920 --> 1:47:23,600
partition with just millions and

2964
1:47:23,600 --> 1:47:25,360
millions of files it's going to take

2965
1:47:25,360 --> 1:47:28,320
hours or days to scan so maybe you don't

2966
1:47:28,320 --> 1:47:30,400
want to scan it every time it mounts it

2967
1:47:30,400 --> 1:47:32,480
really depends on your situation so plan

2968
1:47:32,480 --> 1:47:35,040
out how often you want to scan and the

2969
1:47:35,040 --> 1:47:36,960
type of situation that you're in to make

2970
1:47:36,960 --> 1:47:38,560
the best choice for your particular

2971
1:47:38,560 --> 1:47:41,040
partition and honestly the best choice

2972
1:47:41,040 --> 1:47:43,280
for you might actually be just to run

2973
1:47:43,280 --> 1:47:46,080
fisk manually just unmount the partition

2974
1:47:46,080 --> 1:47:48,480
or boot from a cd or usb drive if you

2975
1:47:48,480 --> 1:47:50,719
need to scan the root partition maybe

2976
1:47:50,719 --> 1:47:52,480
you never want to automate the process

2977
1:47:52,480 --> 1:47:54,400
you only want to do it manually for some

2978
1:47:54,400 --> 1:47:56,800
cases that's fine too regardless it's

2979
1:47:56,800 --> 1:47:59,280
important to know how the system works

2980
1:47:59,280 --> 1:48:00,639
so that if you think you're

2981
1:48:00,639 --> 1:48:03,360
automatically scanning you really are

2982
1:48:03,360 --> 1:48:06,400
lvm or logical volume manager is

2983
1:48:06,400 --> 1:48:10,080
basically like a software version of a

2984
1:48:10,080 --> 1:48:13,119
storage area network it allows you to

2985
1:48:13,119 --> 1:48
take a whole bunch of physical devices

2986
1:48 --> 1:48:19,040
and lump them into one big group that

2987
1:48:19,040 --> 1:48:21,440
allows you to kind of carve out slices

2988
1:48:21,440 --> 1:48:23,679
of storage for the use in your local

2989
1:48:23,679 --> 1:48:25,600
system it consists of a bunch of parts

2990
1:48:25,600 --> 1:48:27,520
physical volumes volume groups and

2991
1:48:27,520 --> 1:48:29,440
logical volumes they use the word

2992
1:48:29,440 --> 1:48:30,960
volumes a lot in there

2993
1:48:30,960 --> 1:48:33,920
but nonetheless it's a way of taking raw

2994
1:48:33,920 --> 1:48:36,639
storage and combining it into a thing

2995
1:48:36,639 --> 1:48:38,960
that you can just slice up and expand

2996
1:48:38,960 --> 1:48:41,360
and contract and add more things to it

2997
1:48:41,360 --> 1:48:43,520
without disrupting the existing services

2998
1:48:43,520 --> 1:48
here's how it actually works or looks in

2999
1:48 --> 1:48:47,760
practice so we have we start with

3000
1:48:47,760 --> 1:48:49,679
physical volumes i'm just calling them

3001
1:48:49,679 --> 1:48:52,159
pv and we're going to say that we have

3002
1:48:52,159 --> 1:48:54,880
four 10 gigabyte drives now in the

3003
1:48:54,880 --> 1:48:57,199
standard practice these could be actual

3004
1:48:57,199 --> 1:48:59,920
hard drives they could be raid devices

3005
1:48:59,920 --> 1:49:02,080
or they could be partitions on a hard

3006
1:49:02,080 --> 1:49:03,679
drive it doesn't really matter what they

3007
1:49:03,679 --> 1:49:06,080
are they're just chunks of storage and

3008
1:49:06,080 --> 1:49:08,880
you create physical volumes out of them

3009
1:49:08,880 --> 1:49:10,800
and then you combine those physical

3010
1:49:10,800 --> 1:49:15,280
volumes into volume groups and so then

3011
1:49:15,280 --> 1:49:17,679
all of these are combined into a volume

3012
1:49:17,679 --> 1:49:20,400
group and if you add 10 times 4 you get

3013
1:49:20,400 --> 1:49:22,560
40 gigs so then you have this volume

3014
1:49:22,560 --> 1:49:24,800
group which is like just a big bucket of

3015
1:49:24,800 --> 1:49:27,199
storage and that bucket of storage has

3016
1:49:27,199 --> 1:49:29,199
no protection now i know that's not like

3017
1:49:29,199 --> 1:49:31,119
a feature right but i really want you to

3018
1:49:31,119 --> 1:49:33,520
know that if you just have 10 gigabyte

3019
1:49:33,520 --> 1:49:36,400
drives all in a bucket so you have 40

3020
1:49:36,400 --> 1:49:38,239
gigabytes of storage and you're just

3021
1:49:38,239 --> 1:49:40,719
gonna take and carve out chunks of that

3022
1:49:40,719 --> 1:49:42,560
that doesn't offer you any protection so

3023
1:49:42,560 --> 1:49:45,360
if one of these drives fails

3024
1:49:45,360 --> 1:49:47,280
all of a sudden you could have your end

3025
1:49:47,280 --> 1:49:49,520
result be completely corrupt and useless

3026
1:49:49,520 --> 1:49:52,159
so physical volumes being raw devices

3027
1:49:52,159 --> 1:49:54,080
and not having any redundancy is a

3028
1:49:54,080 --> 1:49:56,159
little bit scary so anyway just wanted

3029
1:49:56,159 --> 1:49:57,840
to throw that in there once you have

3030
1:49:57,840 --> 1:50:01,360
this volume group you carve out a slice

3031
1:50:01,360 --> 1:50
of it and it can be a small slice like

3032
1:50 --> 1:50:05,520
here i just said this is about seven

3033
1:50:05,520 --> 1:50:07,119
gigs i just kind of like spatially

3034
1:50:07,119 --> 1:50:08,719
guessed how much of 40 gigs that would

3035
1:50:08,719 --> 1:50:11,599
be um but you can carve out a big chunk

3036
1:50:11,599 --> 1:50:14,239
so you could have like a 30 gig slice or

3037
1:50:14,239 --> 1:50:16,400
you could have like a 32 gig slice that

3038
1:50:16,400 --> 1:50:18,400
would use like two plus a little of

3039
1:50:18,400 --> 1:50:20,239
another drive basically you don't know

3040
1:50:20,239 --> 1:50:22,800
underneath what's going on the volume

3041
1:50:22,800 --> 1:50:25,040
group is just a big chunk of storage

3042
1:50:25,040 --> 1:50:27,199
that you carve out a slice of and then

3043
1:50:27,199 --> 1:50:30,639
this slice is called a logical volume

3044
1:50:30,639 --> 1:50:33,360
that logical volume is what you format

3045
1:50:33,360 --> 1:50
with a file system and mount on your

3046
1:50 --> 1:50:37,840
local hard drive or on your local file

3047
1:50:37,840 --> 1:50:40,080
system and what you install linux on so

3048
1:50:40,080 --> 1:50:42,080
it's a long step process but it allows

3049
1:50:42,080 --> 1:50:44,719
for a lot of flexibility and so i want

3050
1:50:44,719 --> 1:50:45,920
to show you what it looks like in

3051
1:50:45,920 --> 1:50:48,159
practice even though it's not this

3052
1:50:48,159 --> 1:50
robust system with multiple physical

3053
1:50 --> 1:50:52,400
volumes if you have centos

3054
1:50:52,400 --> 1:50:55,199
installed they actually use lvm even if

3055
1:50:55,199 --> 1:50:58,239
you only have one drive so i'm going to

3056
1:50:58,239 --> 1:51:01,679
show you here if we look at the etc fs

3057
1:51:01,679 --> 1:51:02,480
tab

3058
1:51:02,480 --> 1:51:05,280
file what we have here is our device is

3059
1:51:05,280 --> 1:51:09,040
called dev mapper centos dash root okay

3060
1:51:09,040 --> 1:51:11,119
now this is like dev mapper what is that

3061
1:51:11,119 --> 1:51:13,599
well this is where logical volume

3062
1:51:13,599 --> 1:51:16,239
manager creates those logical volumes

3063
1:51:16,239 --> 1:51:18,639
for us to use and you'll see here this

3064
1:51:18,639 --> 1:51:21,760
dev mapper sent to us root is mounted on

3065
1:51:21,760 --> 1:51:23,679
the root of the hard drive or root of

3066
1:51:23,679 --> 1:51:26,480
the file system it has xfs as a file

3067
1:51:26,480 --> 1:51:27,760
system and it's installed same thing

3068
1:51:27,760 --> 1:51:29,840
down here they have another carved out

3069
1:51:29,840 --> 1:51:32,800
slice called centos swap and that's

3070
1:51:32,800 --> 1:51:35,119
mounted as swap space on the system so

3071
1:51:35,119 --> 1:51:38,239
if we look inside devmapper

3072
1:51:38,239 --> 1:51
we're going to see we have sent to us

3073
1:51 --> 1:51:42,239
root and sent to us swap now i want to

3074
1:51:42,239 --> 1:51:44,080
show you really quickly a handful of

3075
1:51:44,080 --> 1:51:46,239
commands so you can see what's going on

3076
1:51:46,239 --> 1:51:48,800
if we look at pv

3077
1:51:48,800 --> 1:51:51,360
display this is physical volume display

3078
1:51:51,360 --> 1:51:53,119
it's going to show us what's going on

3079
1:51:53,119 --> 1:51:55,119
behind the scenes right like what makes

3080
1:51:55,119 --> 1:51:56,560
up the bucket of data that we're going

3081
1:51:56,560 --> 1:51:59,840
to use we only have one physical volume

3082
1:51:59,840 --> 1:52:01,360
i know it seems weird right why am i

3083
1:52:01,360 --> 1:52:03,679
making a bucket out of one device well

3084
1:52:03,679 --> 1:52:05,679
you can expand it if you want so they're

3085
1:52:05,679 --> 1:52
giving you the room to expand later if

3086
1:52 --> 1:52:09,360
you want to do it after it's already

3087
1:52:09,360 --> 1:52:12,159
installed so we have one physical volume

3088
1:52:12,159 --> 1:52:14,440
and it's a partition it's dev

3089
1:52:14,440 --> 1:52:18,560
sda2 all right it's in a volume group

3090
1:52:18,560 --> 1:52:20,800
named centos

3091
1:52:20,800 --> 1:52:24,320
and that gives us it looks like about 19

3092
1:52:24,320 --> 1:52:27,040
gigabytes of storage okay so this

3093
1:52:27,040 --> 1:52:29,440
physical volume is inside a volume group

3094
1:52:29,440 --> 1:52:32,159
called centos so our our bucket with all

3095
1:52:32,159 --> 1:52:33,760
the data is called sent to us and it

3096
1:52:33,760 --> 1:52:35,760
looks like we carved out root

3097
1:52:35,760 --> 1:52:38,400
and swap from that bucket so let's look

3098
1:52:38,400 --> 1:52:39,599
at that really quick we're just going to

3099
1:52:39,599 --> 1:52:41,360
look at lv

3100
1:52:41,360 --> 1:52:43,920
display logical volume display and we

3101
1:52:43,920 --> 1:52:45,920
should see two and sure enough we have

3102
1:52:45,920 --> 1:52:47,520
two logical volumes i'm going to scroll

3103
1:52:47,520 --> 1:52
up a little bit here our first one

3104
1:52 --> 1:52:53,679
is named swap it's in the centos volume

3105
1:52:53,679 --> 1:52:55,040
group because that's the only volume

3106
1:52:55,040 --> 1:52:57,199
group we have it happens to be two

3107
1:52:57,199 --> 1:52:59,760
gigabytes in size and it lives in dev

3108
1:52:59,760 --> 1:53:02,159
centos swap this is an interesting thing

3109
1:53:02,159 --> 1:53:04,239
you can you can use dev mapper and the

3110
1:53:04,239 --> 1:53:06,400
name of it or you could use

3111
1:53:06,400 --> 1:53:07,599
dev

3112
1:53:07,599 --> 1:53:10,320
the name of the volume group

3113
1:53:10,320 --> 1:53:13,520
the name of the logical volume as like

3114
1:53:13,520 --> 1:53:15,040
in folders here so that's another way

3115
1:53:15,040 --> 1:53:16,560
that you can reference it and find the

3116
1:53:16,560 --> 1:53:18,320
actual logical volumes and then the same

3117
1:53:18,320 --> 1:53:21,040
thing down here dev sent to us root

3118
1:53:21,040 --> 1:53:23,280
the logical volume name is root it's

3119
1:53:23,280 --> 1:53:25,440
carved out of the centos volume group

3120
1:53:25,440 --> 1:53:27,679
and this one looks like it's about 17

3121
1:53:27,679 --> 1:53:30,639
gigabytes so if we look inside

3122
1:53:30,639 --> 1:53:32,960
dev sent to us we're going to see sure

3123
1:53:32,960 --> 1:53:35,040
enough there we have root and swap as

3124
1:53:35,040 --> 1:53:37,119
our two different logical volumes that

3125
1:53:37,119 --> 1:53:39,440
we could one is formatted right this is

3126
1:53:39,440 --> 1:53:41,760
formatted with xfs and this is just swap

3127
1:53:41,760 --> 1:53:43,199
space i know we didn't go through the

3128
1:53:43,199 --> 1:53:45,119
process of actually creating all of the

3129
1:53:45,119 --> 1:53:46,639
different parts but hopefully you

3130
1:53:46,639 --> 1:53:49,520
understand exactly what lvm is doing

3131
1:53:49,520 --> 1:53:51,199
taking physical volumes whether

3132
1:53:51,199 --> 1:53:52,719
partitions or hard drives or raid

3133
1:53:52,719 --> 1:53:55,360
devices combining them into a volume

3134
1:53:55,360 --> 1:53:57,280
group and then carving out logical

3135
1:53:57,280 --> 1:54:00,400
volumes that you can use as regular

3136
1:54:00,400 --> 1:54:02,239
devices on your system and it just

3137
1:54:02,239 --> 1:54:04,480
allows for flexibility kind of like a

3138
1:54:04,480 --> 1:54:08,080
software-based san in your own computer

3139
1:54:08,080 --> 1:54:10,239
building an lvm is actually one of the

3140
1:54:10,239 --> 1:54:12,639
most straightforward things that you can

3141
1:54:12,639 --> 1:54:14,239
do when it comes to block storage

3142
1:54:14,239 --> 1:54:16,239
devices on linux it's surprisingly

3143
1:54:16,239 --> 1:54:18,239
consistent all the way through the

3144
1:54:18,239 --> 1:54
process for you know the names of the

3145
1:54 --> 1:54:22,320
tools and it really is kind of fun and

3146
1:54:22,320 --> 1:54:24,320
once it's built you can expand it by you

3147
1:54:24,320 --> 1:54:27,280
know adding more drives to the system or

3148
1:54:27,280 --> 1:54:28,719
you know stretching your existing

3149
1:54:28,719 --> 1:54:30,239
volumes but let's go ahead and actually

3150
1:54:30,239 --> 1:54:32,719
create from start to finish an lvm

3151
1:54:32,719 --> 1:54:35,360
system on our linux device now here i am

3152
1:54:35,360 --> 1:54:37,920
on ubuntu and if we do lsblk we're going

3153
1:54:37,920 --> 1:54:39,440
to see that well we have a bunch of

3154
1:54:39,440 --> 1:54:41,599
stuff but down here this is the drive

3155
1:54:41,599 --> 1:54:43,040
that our system is installed on so we're

3156
1:54:43,040 --> 1:54:44,400
not going to touch this one we're going

3157
1:54:44,400 --> 1:54:46,400
to use these four

3158
1:54:46,400 --> 1:54:49,360
devices so sdb c d and e which are 10

3159
1:54:49,360 --> 1:54:51,280
gigabyte devices notice i don't have

3160
1:54:51,280 --> 1:54:53,520
partitions created on these now you can

3161
1:54:53,520 --> 1:54:55,760
create partitions some people prefer to

3162
1:54:55,760 --> 1:54:58,239
use partitions for their physical

3163
1:54:58,239 --> 1:55:01,040
volumes in an lvm some people prefer to

3164
1:55:01,040 --> 1:55:02,960
use the raw devices either one works

3165
1:55:02,960 --> 1:55:04,480
fine they work the same

3166
1:55:04,480 --> 1:55:06,880
the advantage of setting up a partition

3167
1:55:06,880 --> 1:55:08,719
is that if somebody else comes to your

3168
1:55:08,719 --> 1:55:10,719
system they're going to see that there's

3169
1:55:10,719 --> 1:55:12,480
partitions on the system and they're

3170
1:55:12,480 --> 1:55:14,159
going to know that something is already

3171
1:55:14,159 --> 1:55:16,239
done there whereas if you leave them raw

3172
1:55:16,239 --> 1:55
devices they might think oh look empty

3173
1:55 --> 1:55
drives now it's kind of far-fetched and

3174
1:55 --> 1:55:20,960
you're not just going to like start

3175
1:55:20,960 --> 1:55:22,960
formatting drives in somebody's system

3176
1:55:22,960 --> 1:55:24,560
but that's the reason some people like

3177
1:55:24,560 --> 1:55:26,560
to use partitions i'm just going to use

3178
1:55:26,560 --> 1:55:28,800
the raw devices and to turn these raw

3179
1:55:28,800 --> 1:55:32,800
devices into physical volumes we use pv

3180
1:55:32,800 --> 1:55:35,119
create and we just make a list of the

3181
1:55:35,119 --> 1:55:38,080
devices we want to use so dev sdb devs

3182
1:55:38,080 --> 1:55:41,920
dc dev sdd and dev sde so it created

3183
1:55:41,920 --> 1:55:44,560
them now we can do pv display if we want

3184
1:55:44,560 --> 1:55:46,239
and it's going to show all the devices

3185
1:55:46,239 --> 1:55:47,679
that we have now each of them is 10

3186
1:55:47,679 --> 1:55:50,239
gigabytes and the name of it is just

3187
1:55:50,239 --> 1:55:52,719
the device itself dev sdc so the next

3188
1:55:52,719 --> 1:55:56,239
step is to create a volume group now to

3189
1:55:56,239 --> 1:55:59,280
do that we just do vg create which is

3190
1:55:59,280 --> 1:56:00,480
very very nice

3191
1:56:00,480 --> 1:56:02,560
uh the first flag or the first command

3192
1:56:02,560 --> 1:56:04,960
argument here is the name of the volume

3193
1:56:04,960 --> 1:56:07,440
group so i'm going to call this

3194
1:56:07,440 --> 1:56:09,679
bucket because it's just a big bucket of

3195
1:56:09,679 --> 1:56:11,360
our hard drives right of our data that's

3196
1:56:11,360 --> 1:56:12,560
available so i'm going to call the

3197
1:56:12,560 --> 1:56:14,560
volume group bucket and then we just

3198
1:56:14,560 --> 1:56:17,280
make a list of the physical volumes that

3199
1:56:17,280 --> 1:56:19,119
we want to add to it so those same

3200
1:56:19,119 --> 1:56:21,199
volumes we just did before

3201
1:56:21,199 --> 1:56:22,880
and then press enter our volume group

3202
1:56:22,880 --> 1:56:24,480
bucket was created we can look at that

3203
1:56:24,480 --> 1:56:27,760
by doing vg display there's four

3204
1:56:27,760 --> 1:56:29,599
metadata areas meaning we have four

3205
1:56:29,599 --> 1:56:32,320
devices our current active pv are four

3206
1:56:32,320 --> 1:56:34,400
we have 40 gigabytes of storage just

3207
1:56:34,400 --> 1:56:36,159
about all together because each one was

3208
1:56:36,159 --> 1:56:37,119
10

3209
1:56:37,119 --> 1:56:39,520
and now we have this thing called bucket

3210
1:56:39,520 --> 1:56:42,320
that we can carve a slice out of if we

3211
1:56:42,320 --> 1:56:45,040
want and use that slice and put a file

3212
1:56:45,040 --> 1:56:46,560
system on it so to do that we're going

3213
1:56:46,560 --> 1:56:49,440
to use i'm sure you guessed it lv create

3214
1:56:49,440 --> 1:56:51,280
i love the consistency of these tools

3215
1:56:51,280 --> 1:56:53,760
it's really nice here we do dash capital

3216
1:56:53,760 --> 1:56:56,960
l and how big of a slice we want in this

3217
1:56:56,960 --> 1:56:58,400
case let's do something that's going to

3218
1:56:58,400 --> 1:57:00,480
span all four disks so i'm going to say

3219
1:57:00,480 --> 1:57:04,239
32 capital g for 32 gigabytes

3220
1:57:04,239 --> 1:57:06,639
and then dash n the name that i want to

3221
1:57:06,639 --> 1:57:09,199
call it i'm going to call this big

3222
1:57:09,199 --> 1:57:10,800
underscore

3223
1:57:10,800 --> 1:57:13,040
slice and then we have to tell it where

3224
1:57:13,040 --> 1:57:15,040
we want to get the data from well in our

3225
1:57:15,040 --> 1:57:17,199
case it's in bucket the name of our

3226
1:57:17,199 --> 1:57:19,599
volume group right there is bucket so

3227
1:57:19,599 --> 1:57:22,239
what we're doing is creating a 32

3228
1:57:22,239 --> 1:57:25,599
gigabyte slice called big slice out of

3229
1:57:25,599 --> 1:57:27,360
the volume group bucket

3230
1:57:27,360 --> 1:57:29,760
press enter logical volume big slice is

3231
1:57:29,760 --> 1:57:33,040
created so we can do lv display

3232
1:57:33,040 --> 1:57:35,760
and sure enough lv size is 32 gigabytes

3233
1:57:35,760 --> 1:57:37,520
so we know if that worked the name is

3234
1:57:37,520 --> 1:57:40,239
big slice it's in bucket the lv path is

3235
1:57:40,239 --> 1:57:41,199
dev

3236
1:57:41,199 --> 1:57:43,599
bucket big slice which is exactly what

3237
1:57:43,599 --> 1:57:45,440
we would expect because we've created

3238
1:57:45,440 --> 1:57:47,679
this volume group called bucket and now

3239
1:57:47,679 --> 1:57:49,760
this logical volume lives inside there

3240
1:57:49,760 --> 1:57:51,280
so the last step is that we would

3241
1:57:51,280 --> 1:57:54,400
actually use this as an actual block

3242
1:57:54,400 --> 1:57:56,320
device or as a hard drive in and of

3243
1:57:56,320 --> 1:57:57,440
itself and then we could just do

3244
1:57:57,440 --> 1:57:59,599
something like mkfs

3245
1:57:59,599 --> 1:58:04,159
ext4 dev bucket big slice

3246
1:58:04,159 --> 1:58:05,760
and there we go so now we've done that

3247
1:58:05,760 --> 1:58:07,440
we could mount it somewhere and every

3248
1:58:07,440 --> 1:58:09,199
time the system starts it's going to be

3249
1:58:09,199 --> 1:58:11,920
available in dev bucket big slice and

3250
1:58:11,920 --> 1:58:13,520
then if we put it in fstab it's going to

3251
1:58:13,520 --> 1:58:15,679
be mounted on boot and then there are

3252
1:58:15,679 --> 1:58:17,599
other tools that we can go and like lv

3253
1:58:17,599 --> 1:58:19,360
extend if we wanted to make it bigger so

3254
1:58:19,360 --> 1:58
we could do something like lv extend

3255
1:58 --> 1:58:26,159
dash l i'm going to say plus 5 gigs dev

3256
1:58:26,159 --> 1:58:29,040
bucket big slice and now it says the

3257
1:58:29,040 --> 1:58:31,920
size has gone from 32 gigabytes to 37

3258
1:58:31,920 --> 1:58:34,639
gigabytes it was resized and we did that

3259
1:58:34,639 --> 1:58:36,480
without adding anything to the system we

3260
1:58:36,480 --> 1:58:39,760
just used the tools to change the size

3261
1:58:39,760 --> 1:58:42,080
of our logical volume the thing to

3262
1:58:42,080 --> 1:58
remember again about lvm is that it

3263
1:58 --> 1:58:46,639
provides flexibility in your system it

3264
1:58:46,639 --> 1:58:48,719
doesn't provide any redundancy so if you

3265
1:58:48,719 --> 1:58:51,440
have one physical volume fail it's going

3266
1:58:51,440 --> 1:58:53,679
to crash the entire volume group and

3267
1:58:53,679 --> 1:58:55,040
logical volumes are going to get messed

3268
1:58:55,040 --> 1:58:57,360
up so you want those pvs to be like a

3269
1:58:57,360 --> 1:58:58,960
raid device if you're worried about

3270
1:58:58,960 --> 1:59:00,480
something going wrong underneath and

3271
1:59:00,480 --> 1:59:02,639
losing data but setting up lvm as you

3272
1:59:02,639 --> 1:59:04,960
can tell is very simple and honestly

3273
1:59:04,960 --> 1:59:08,480
even kind of fun raid is a redundant

3274
1:59:08,480 --> 1:59:11,599
array of independent disks or drives and

3275
1:59:11,599 --> 1:59:13,280
basically what it means is that it you

3276
1:59:13,280 --> 1:59:15,360
take a bunch of drives and put them

3277
1:59:15,360 --> 1:59
together and you end up with a larger

3278
1:59 --> 1:59:19,920
pool of storage now the cool thing about

3279
1:59:19,920 --> 1:59:22,080
raid is that it doesn't just pull things

3280
1:59:22,080 --> 1:59:24,080
together like lvm and give you a bunch

3281
1:59:24,080 --> 1:59:26,560
of data it allows you to do some pretty

3282
1:59:26,560 --> 1:59:28,159
neat things with performance or

3283
1:59:28,159 --> 1:59:29,840
redundancy so i want to talk about the

3284
1:59:29,840 --> 1:59:32,320
different raid levels that we can offer

3285
1:59:32,320 --> 1:59:35,280
using raid specifically linux rate linux

3286
1:59:35,280 --> 1:59:37,840
has a software version of raid which is

3287
1:59:37,840 --> 1:59:39,679
very powerful very robust and

3288
1:59:39,679 --> 1:59:42,080
surprisingly efficient so basically i

3289
1:59:42,080 --> 1:59:43,280
want to make sure we cover all the

3290
1:59:43,280 --> 1:59:45,040
different raid types and to do that i

3291
1:59:45,040 --> 1:59:47,440
want to show you this big scary dragon

3292
1:59:47,440 --> 1:59:49,119
now here's the idea i'm going to i'm

3293
1:59:49,119 --> 1:59:50,400
going to talk about

3294
1:59:50,400 --> 1:59:53,280
raid but instead of a redundant array of

3295
1:59:53,280 --> 1:59:54,639
independent drives we're going to say

3296
1:59:54,639 --> 1:59:57,360
they're a redundant array of independent

3297
1:59:57,360 --> 1:59:59,440
knights of the round table okay and in

3298
1:59:59,440 --> 2:00:01,440
true 80s fashion our knights are going

3299
2:00:01,440 --> 2:00:03,280
to be just squares like from atari's

3300
2:00:03,280 --> 2:00:05,360
adventure anyway here's the deal with

3301
2:00:05,360 --> 2:00:09,199
raid 0 our drives are set up in a stripe

3302
2:00:09,199 --> 2:00:11,840
which means that they work together

3303
2:00:11,840 --> 2:00:13,840
reads and writes happen across two

3304
2:00:13,840 --> 2:00:16,960
drives very very quickly and so with

3305
2:00:16,960 --> 2:00:20,880
raid 0 or a striped array it's very fast

3306
2:00:20,880 --> 2:00:22,800
right you can get dual writes and dual

3307
2:00:22,800 --> 2:00:25,199
reads at the same time the problem is

3308
2:00:25,199 --> 2:00:27,440
let's say that the knights are attacking

3309
2:00:27,440 --> 2:00:29,520
the dragon and the dragon is attacking

3310
2:00:29,520 --> 2:00:31,679
the knights if we lose one of the

3311
2:00:31,679 --> 2:00:33,840
knights well then the dragon can get

3312
2:00:33,840 --> 2:00:36,560
right through to the king because if you

3313
2:00:36,560 --> 2:00:40,239
lose a single drive in a striped array

3314
2:00:40,239 --> 2:00:42,800
or in a raid 0 all of a sudden your data

3315
2:00:42,800 --> 2:00:44,800
is gone because half of your data is

3316
2:00:44,800 --> 2:00:47,440
written on that other drive so while

3317
2:00:47,440 --> 2:00:49,280
it's very fast they better kill the

3318
2:00:49,280 --> 2:00:50,880
dragon quick because if one of them

3319
2:00:50,880 --> 2:00:53,040
fails all of their data is gone and the

3320
2:00:53,040 --> 2:00
king gets destroyed now raid 1 is kind

3321
2:00 --> 2:00:57,920
of the opposite it still has multiple

3322
2:00:57,920 --> 2:01:00,719
drives but they're set up in a mirror

3323
2:01:00,719 --> 2:01:02,480
which means every time you write

3324
2:01:02,480 --> 2:01:04,400
something to the first drive you write

3325
2:01:04,400 --> 2:01:06,080
it to the second drive so you have a

3326
2:01:06,080 --> 2:01:08,880
complete copy of both now because

3327
2:01:08,880 --> 2:01:10,320
they're in a line like this they can

3328
2:01:10,320 --> 2:01:12,560
only attack the dragon one at a time

3329
2:01:12,560 --> 2:01:14,320
right they can't both attack the dragon

3330
2:01:14,320 --> 2:01:16,560
like over here in the striped setup but

3331
2:01:16,560 --> 2:01:18,560
the advantage here is if one of them

3332
2:01:18,560 --> 2:01:21,280
dies there's still another full night

3333
2:01:21,280 --> 2:01:23,280
there protecting the king same thing

3334
2:01:23,280 --> 2:01:24,960
with your data right if one of these

3335
2:01:24,960 --> 2:01:27,760
dies you still have a full set of your

3336
2:01:27,760 --> 2:01:29,520
data because you've been writing it to

3337
2:01:29,520 --> 2:01:32,400
two drives the entire time so a mirror

3338
2:01:32,400 --> 2:01:34,239
doesn't give you any speed increase

3339
2:01:34,239 --> 2:01:36,639
because you're not spreading the writes

3340
2:01:36,639 --> 2:01:38,480
across here you're actually writing all

3341
2:01:38,480 --> 2:01:40,960
of your data two times once to each

3342
2:01:40,960 --> 2:01:42,400
drive so you don't get any advantage

3343
2:01:42,400 --> 2:01:43,760
over a single drive when it comes to

3344
2:01:43,760 --> 2:01:46,400
speed but you do get that advantage of

3345
2:01:46,400 --> 2:01:49,360
either drive can die and you still have

3346
2:01:49,360 --> 2:01:52,480
full protection for your data now raid 5

3347
2:01:52,480 --> 2:01:54,560
this is a little bit different raid 5

3348
2:01:54,560 --> 2:01:57,199
uses a parity disk and how that actually

3349
2:01:57,199 --> 2:02
works is like some digital magic that is

3350
2:02 --> 2:02:02,320
beyond the scope of this nugget and to

3351
2:02:02,320 --> 2:02:04,320
be quite honest it still stumps me a

3352
2:02:04,320 --> 2:02:06,560
little bit but conceptually how it works

3353
2:02:06,560 --> 2:02:08,880
is you have multiple drives three

3354
2:02:08,880 --> 2:02:12,880
minimum and any of these drives can die

3355
2:02:12,880 --> 2:02:14,560
any one of them it doesn't matter which

3356
2:02:14,560 --> 2:02:16,560
one and all of your data is still in

3357
2:02:16,560 --> 2:02:19,360
place so you get the advantage of being

3358
2:02:19,360 --> 2:02:22,480
able to lose any drive in your array the

3359
2:02:22,480 --> 2:02:25,679
disadvantage is you lose one drive's

3360
2:02:25,679 --> 2:02:28,480
worth of storage now what do i mean by

3361
2:02:28,480 --> 2:02:29,840
that let's say these are all five

3362
2:02:29,840 --> 2:02:32,639
gigabyte drives okay if these are all

3363
2:02:32,639 --> 2:02:34,639
five gigabyte drives together that would

3364
2:02:34,639 --> 2:02:38,480
be 15 gigabytes but you lose one drive's

3365
2:02:38,480 --> 2:02:41,840
worth of storage for that parity magic

3366
2:02:41,840 --> 2:02:43,840
and so if you have three five gigabyte

3367
2:02:43,840 --> 2:02:45,920
drives you're only going to have 10

3368
2:02:45,920 --> 2:02
gigabytes of usable space but the

3369
2:02 --> 2:02:49,920
advantage is it's writing to multiple

3370
2:02:49,920 --> 2:02:53,119
drives as it's going along and if one of

3371
2:02:53,119 --> 2:02:55,840
the drives dies you still have all of

3372
2:02:55,840 --> 2:02:58,639
your data represented in the remaining

3373
2:02:58,639 --> 2:03:00,320
drives now if you lose two of course

3374
2:03:00,320 --> 2:03:01,840
then your date is corrupt and and you're

3375
2:03:01,840 --> 2:03:03,760
done but you can lose any drive and it's

3376
2:03:03,760 --> 2:03:05,840
not just like this is the drive you can

3377
2:03:05,840 --> 2:03:07,920
lose no you can lose any one of these

3378
2:03:07,920 --> 2:03
and all of your data is still there it

3379
2:03 --> 2:03:12,239
really is magical and so that means that

3380
2:03:12,239 --> 2:03:14,480
you can lose a knight and the dragon is

3381
2:03:14,480 --> 2:03:16,480
still going to be stopped by whatever

3382
2:03:16,480 --> 2:03:18,800
two of the knights are still protecting

3383
2:03:18,800 --> 2:03:20,400
the king hopefully that makes sense with

3384
2:03:20,400 --> 2:03:21,679
the different raid levels and just

3385
2:03:21,679 --> 2:03:23,520
briefly i want to talk about there are

3386
2:03:23,520 --> 2:03:26,560
some hybrid levels as well so raid 0

3387
2:03:26,560 --> 2:03:28,480
could be raid 0 1

3388
2:03:28,480 --> 2:03:31,119
where you have like four drives and what

3389
2:03:31,119 --> 2:03:33,760
happens here is you have a stripe of

3390
2:03:33,760 --> 2:03:35,679
mirrors your drives are mirrored and

3391
2:03:35,679 --> 2:03:37,679
then striped across the mirror or raid

3392
2:03:37,679 --> 2:03
1-0 which is a mirror of stripes or vice

3393
2:03 --> 2:03:42,320
versa but basically four drives and

3394
2:03:42,320 --> 2:03:44,560
you're mirroring two two of them and

3395
2:03:44,560 --> 2:03:47,360
then striping those two mirrors and vice

3396
2:03:47,360 --> 2:03:48,800
versa you're going to stripe them and

3397
2:03:48,800 --> 2:03:51,599
then mirror those two stripes with raid

3398
2:03:51,599 --> 2:03:54,400
5 there's actually a raid 6 which is

3399
2:03:54,400 --> 2:03:56,639
cool but it requires another drive and

3400
2:03:56,639 --> 2:03:59,360
then you can lose up to two drives and

3401
2:03:59,360 --> 2:04:00,960
still have your data there's two of

3402
2:04:00,960 --> 2:04:03,119
those parity drives in place now the

3403
2:04:03,119 --> 2:04:05,920
downside is you lose two drives worth of

3404
2:04:05,920 --> 2:04:08,400
storage on your full array but it's

3405
2:04:08,400 --> 2:04:09,760
awesome because you can lose more than

3406
2:04:09,760 --> 2:04:11,840
one drive now even if you don't follow

3407
2:04:11,840 --> 2:04:13,679
along with my awesome dragons and

3408
2:04:13,679 --> 2:04:15,840
knights kind of scenario hopefully the

3409
2:04:15,840 --> 2:04:18,480
raid levels make sense now my trick my

3410
2:04:18,480 --> 2:04:20,079
little mental trick to remember what it

3411
2:04:20,079 --> 2:04:23,199
is i look at the number after raid and i

3412
2:04:23,199 --> 2:04:25,440
say how many disks can i lose because

3413
2:04:25,440 --> 2:04:27,280
for years i would confuse raid 0 and

3414
2:04:27,280 --> 2:04:29,679
raid 1. but here's the deal with raid 0

3415
2:04:29,679 --> 2:04:32,560
you can lose zero drives right because

3416
2:04:32,560 --> 2:04:34,400
if you lose one you lose your data with

3417
2:04:34,400 --> 2:04:36,800
raid 1 you can lose one drive and you

3418
2:04:36,800 --> 2:04:38,880
still have another drive raid five i

3419
2:04:38,880 --> 2:04:41,040
guess you could lose one of five i don't

3420
2:04:41,040 --> 2:04:42,400
know it kind of falls apart but rate

3421
2:04:42,400 --> 2:04:43,920
zero and raid one are the ones that i

3422
2:04:43,920 --> 2:04:45,679
would always struggle with so i think of

3423
2:04:45,679 --> 2:04:47,280
that number as how many drives i could

3424
2:04:47,280 --> 2:04:50,480
lose and still have my data

3425
2:04:50,480 --> 2:04:52,800
you can go to the store and buy a raid

3426
2:04:52,800 --> 2:04:54,400
card like a hardware raid device and

3427
2:04:54,400 --> 2:04:56,639
then you can use that on your system and

3428
2:04:56,639 --> 2:04:58,480
you'll be able to have hardware raid but

3429
2:04:58,480 --> 2:05:01,040
linux has a really awesome and powerful

3430
2:05:01,040 --> 2:05:03,840
software raid program that will use

3431
2:05:03,840 --> 2:05:05,840
kernel level tools to allow you to

3432
2:05:05,840 --> 2:05:07,760
create your own raid devices without

3433
2:05:07,760 --> 2:05:10,239
needing any specialty hardware at all

3434
2:05:10,239 --> 2:05:11,679
now there's a couple things we need to

3435
2:05:11,679 --> 2:05:13,920
discuss like partitions versus using raw

3436
2:05:13,920 --> 2:05:15,679
devices i want to make sure we cover all

3437
2:05:15,679 --> 2:05:17,920
the configuration stuff but conceptually

3438
2:05:17,920 --> 2:05
it's really easy rather than having a

3439
2:05 --> 2:05:22,480
hardware based card we just use our

3440
2:05:22,480 --> 2:05:24,639
regular sata controllers and then our

3441
2:05:24,639 --> 2:05:27,040
hard drives can all work together in a

3442
2:05:27,040 --> 2:05:29,119
raid array that we choose now when i

3443
2:05:29,119 --> 2:05:31,599
talk about partitions versus raw devices

3444
2:05:31,599 --> 2:05:33,760
let's say we have 200 gigabyte hard

3445
2:05:33,760 --> 2:05:34,800
drives but they're from different

3446
2:05:34,800 --> 2:05:37,119
manufacturers now they both say that

3447
2:05:37,119 --> 2:05:39,440
they're 100 gigabytes however if you

3448
2:05:39,440 --> 2:05:41,119
look close they might have slightly

3449
2:05:41,119 --> 2:05:43,280
different number of sectors and slightly

3450
2:05:43,280 --> 2:05:45,360
different size so this one says it's 100

3451
2:05:45,360 --> 2:05:48,079
gigabytes but it might be actually 1028

3452
2:05:48,079 --> 2:05:49,440
megabytes and this one says 100

3453
2:05:49,440 --> 2:05:51,920
gigabytes but it might actually be 1022

3454
2:05:51,920 --> 2:05:54,239
megabytes now they round for marketing

3455
2:05:54,239 --> 2:05:56,560
purposes and that's perfectly fine and

3456
2:05:56,560 --> 2:05:58,639
usually on a system it doesn't matter

3457
2:05:58,639 --> 2:06:01,440
but if you have like this drive fail in

3458
2:06:01,440 --> 2:06:03,119
a raid array and you need to replace it

3459
2:06:03,119 --> 2:06:05,280
with another drive and you try to use

3460
2:06:05,280 --> 2:06:07,360
this drive and all of a sudden oh you

3461
2:06:07,360 --> 2:06:10,320
created a raw disk device raid array

3462
2:06:10,320 --> 2:06:11,560
unit and it has

3463
2:06:11,560 --> 2:06
1028 megabytes of space and you try to

3464
2:06 --> 2:06:15,920
replace it with another 100 gigabit

3465
2:06:15,920 --> 2:06:18,159
drive but this one only has 1022

3466
2:06:18,159 --> 2:06:20,960
megabytes you're not going to be able to

3467
2:06:20,960 --> 2:06:23,679
work it because this isn't big enough so

3468
2:06:23,679 --> 2:06:26,239
generally what people do is you take and

3469
2:06:26,239 --> 2:06:27,840
make a partition

3470
2:06:27,840 --> 2:06:30,880
inside of your drive that is slightly

3471
2:06:30,880 --> 2:06:33,040
smaller than the hard drive itself so it

3472
2:06:33,040 --> 2:06:34,280
might be

3473
2:06:34,280 --> 2:06:37,440
99.9 gigabytes and then the same thing

3474
2:06:37,440 --> 2:06:39,119
when you have a new drive you're going

3475
2:06:39,119 --> 2:06:42,880
to have enough room to create a 99.9

3476
2:06:42,880 --> 2:06:44,960
gigabyte partition and so even though

3477
2:06:44,960 --> 2:06:47,599
this drive itself is slightly different

3478
2:06:47,599 --> 2:06:49,440
the underlying partition is going to be

3479
2:06:49,440 --> 2:06:51,840
the exact same size so you're going to

3480
2:06:51,840 --> 2:06:53,760
be able to use it to replace a failed

3481
2:06:53,760 --> 2:06:55,679
drive in an array so that's why we

3482
2:06:55,679 --> 2:06:57,520
generally use partitions even though

3483
2:06:57,520 --> 2:07:00,159
using a raw device would work until you

3484
2:07:00,159 --> 2:07:02,639
need to replace it with a smaller drive

3485
2:07:02,639 --> 2:07:04,560
that is your replacement now here on our

3486
2:07:04,560 --> 2:07:06,880
ubuntu system if we do lsb lk we're

3487
2:07:06,880 --> 2:07:09,199
going to see we have four 10 gigabyte

3488
2:07:09,199 --> 2:07:10,560
drives that are installed in here we're

3489
2:07:10,560 --> 2:07:11,840
going to make a right array with those

3490
2:07:11,840 --> 2:07:13,440
this sda1

3491
2:07:13,440 --> 2:07:14,880
this is our root partition this is where

3492
2:07:14,880 --> 2:07:16,960
our system is installed but these drives

3493
2:07:16,960 --> 2:07:18,719
down here are the ones that we're going

3494
2:07:18,719 --> 2:07:20,880
to use to create our raid array now i've

3495
2:07:20,880 --> 2:07:22,800
already partitioned the first three

3496
2:07:22,800 --> 2:07:25,040
you'll notice it's a 10 gigabyte drive

3497
2:07:25,040 --> 2:07:27,440
and the partitions are 9.9 gigabytes

3498
2:07:27,440 --> 2:07:29,440
awesome we're going to do the sde the

3499
2:07:29,440 --> 2:07:34,400
last one together and so f disk dev sd e

3500
2:07:34,400 --> 2:07:35,920
and the first thing well we can press m

3501
2:07:35,920 --> 2:07:37,280
to see all of our different options but

3502
2:07:37,280 --> 2:07:38,480
i'm going to go kind of quickly i'm

3503
2:07:38,480 --> 2:07:40,480
going to say o to create a new partition

3504
2:07:40,480 --> 2:07
type and it's going to be a dos one it

3505
2:07 --> 2:07:43,520
doesn't have to be dos but i just

3506
2:07:43,520 --> 2:07:45,760
decided dos and then i'm gonna say n for

3507
2:07:45,760 --> 2:07:47,760
a new partition and i want the partition

3508
2:07:47,760 --> 2:07:50,560
to be primary so default number one

3509
2:07:50,560 --> 2:07:52,719
default the start point on the drive

3510
2:07:52,719 --> 2:07:54,880
default and here's where rather if i

3511
2:07:54,880 --> 2:07:56,239
choose default it's going to be 10

3512
2:07:56,239 --> 2:07:58,320
gigabytes in size and that would be fine

3513
2:07:58,320 --> 2:08
as long as our replacement was the exact

3514
2:08 --> 2:08
same kind but i want to do it slightly

3515
2:08 --> 2:08
smaller than the drive itself so here

3516
2:08 --> 2:08:05,520
i'm going to say plus

3517
2:08:05,520 --> 2:08:07,040
9.9

3518
2:08:07,040 --> 2:08:10,639
g and press enter and now we have it 9.9

3519
2:08:10,639 --> 2:08:12,480
gigabytes in size so any 10 gigabyte

3520
2:08:12,480 --> 2:08:13,920
drive we'll be able to replace it with

3521
2:08:13,920 --> 2:08:15,760
because we'll just create a 9.9 gigabyte

3522
2:08:15,760 --> 2:08:18,159
partition inside now the one last thing

3523
2:08:18,159 --> 2:08:21,440
if we do t for type and press enter it's

3524
2:08:21,440 --> 2:08:23,920
going to say okay what partition type do

3525
2:08:23,920 --> 2:08:25,360
you want here it says it created a new

3526
2:08:25,360 --> 2:08:27,440
partition with type of linux but if we

3527
2:08:27,440 --> 2:08:29,280
type capital l we're going to see all of

3528
2:08:29,280 --> 2:08:32,159
the available codes here now this is not

3529
2:08:32,159 --> 2:08:34,320
a format this is just like a flag to

3530
2:08:34,320 --> 2:08:37,040
give the kernel a hint as to what sort

3531
2:08:37,040 --> 2:08:39,440
of partition this is supposed to be so

3532
2:08:39,440 --> 2:08:41,280
the one that we want to put on here is

3533
2:08:41,280 --> 2:08:43,280
actually f d

3534
2:08:43,280 --> 2:08:45,760
for linux auto raid so i'm going to type

3535
2:08:45,760 --> 2:08:47,119
fd

3536
2:08:47,119 --> 2:08:49,040
and now it says change type of partition

3537
2:08:49,040 --> 2:08:51,440
to linux auto raid or linux right auto

3538
2:08:51,440 --> 2:08:53,280
detect i'm going to press w to write

3539
2:08:53,280 --> 2:08:55,599
this change to the disk and now if we do

3540
2:08:55,599 --> 2:08
lsb lk we're going to see we have all of

3541
2:08 --> 2:09:00,079
them here now that partition type is

3542
2:09:00,079 --> 2:09:01,840
just to give the kernel a hint if you

3543
2:09:01,840 --> 2:09:03,679
put these drives in a new system it's

3544
2:09:03,679 --> 2:09:05,679
going to say oh look at those partitions

3545
2:09:05,679 --> 2:09:08,239
those are part of a linux array or of a

3546
2:09:08,239 --> 2:09:10,400
raid array so we're going to treat it as

3547
2:09:10,400 --> 2:09:12,079
such so it's just a hint but it works

3548
2:09:12,079 --> 2:09:13,840
even if you don't change that partition

3549
2:09:13,840 --> 2:09:15,679
type all right so now it's pretty easy

3550
2:09:15,679 --> 2:09:18,320
to create the actual raid device we're

3551
2:09:18,320 --> 2:09
going to create a raid 5 device with

3552
2:09 --> 2:09:22,560
four 10 gigabyte devices well about 10

3553
2:09:22,560 --> 2:09:24,400
gigabytes and so we should end up with

3554
2:09:24,400 --> 2:09:27,520
about a 30 gigabyte usable space with

3555
2:09:27,520 --> 2:09:30,840
our raid 5 array now the tool we use is

3556
2:09:30,840 --> 2:09:33,280
mdadm and then we're going to say dash

3557
2:09:33,280 --> 2:09:35,040
dash create because we want to create a

3558
2:09:35,040 --> 2:09:37,280
brand new one i'm going to say verbose

3559
2:09:37,280 --> 2:09:39,119
just so we can see it do things as we

3560
2:09:39,119 --> 2:09:41,520
type it in and now what device do i want

3561
2:09:41,520 --> 2:09:44,560
to create well the devices are dev

3562
2:09:44,560 --> 2:09:46,880
md and then the number of the raid

3563
2:09:46,880 --> 2:09:48,079
device you're creating so we're going to

3564
2:09:48,079 --> 2:09:50,719
start with md0 because that's our first

3565
2:09:50,719 --> 2:09:52,079
device and we don't have any raid

3566
2:09:52,079 --> 2:09:54,320
devices on here yet i'm going to do dash

3567
2:09:54,320 --> 2:09:55,199
dash

3568
2:09:55,199 --> 2:09:56,960
level equals

3569
2:09:56,960 --> 2:10:00,079
5 i want it to be a raid 5 device and

3570
2:10:00,079 --> 2:10:02,719
then dash dash raid

3571
2:10:02,719 --> 2:10:04,320
devices

3572
2:10:04,320 --> 2:10:07,280
equals 4 because we have 4 devices and

3573
2:10:07,280 --> 2:10:09,119
now we need to list those devices out

3574
2:10:09,119 --> 2:10:10,159
and we're going to list the actual

3575
2:10:10,159 --> 2:10:11,520
partition so

3576
2:10:11,520 --> 2:10:12,840
dev

3577
2:10:12,840 --> 2:10:14,400
sdb1

3578
2:10:14,400 --> 2:10:16,719
dev sdc1

3579
2:10:16,719 --> 2:10
dev sdd1 and dev sd e1 and press enter

3580
2:10 --> 2:10:23,679
boom it created it that quickly now we

3581
2:10:23,679 --> 2:10
can see the details of it if we were to

3582
2:10 --> 2:10:27,280
look at

3583
2:10:27,280 --> 2:10:29,679
md stat this is the virtual file system

3584
2:10:29,679 --> 2:10:32,239
proc and this is going to show us the md

3585
2:10:32,239 --> 2:10:34,560
stat which is the current rate arrays in

3586
2:10:34,560 --> 2:10:36,480
our system so here we have

3587
2:10:36,480 --> 2:10:38,800
it's currently a raid 5 array it shows

3588
2:10:38,800 --> 2:10:40,880
our devices here lots of information it

3589
2:10:40,880 --> 2:10:42,159
says recovery that's because it's

3590
2:10:42,159 --> 2:10:43,920
building the array but we can use it

3591
2:10:43,920 --> 2:10:45,679
while it's currently using the array

3592
2:10:45,679 --> 2:10:48,320
which is really awesome okay so we look

3593
2:10:48,320 --> 2:10:49,520
into

3594
2:10:49,520 --> 2:10:50,719
dev

3595
2:10:50,719 --> 2:10:52,560
grip for md we're going to see there we

3596
2:10:52,560 --> 2:10:55,520
have md0 so we have a device all created

3597
2:10:55,520 --> 2:10:57,760
and we can now use this as a hard drive

3598
2:10:57,760 --> 2:10:59,760
in our system before we do that though i

3599
2:10:59,760 --> 2:11:01,760
want to save this configuration of this

3600
2:11:01,760 --> 2:11:04,560
raid 5 array into our system so that on

3601
2:11:04,560 --> 2:11:06,960
boot it knows exactly what sort of array

3602
2:11:06,960 --> 2:11:10,239
to build to do that we just do md mdadm

3603
2:11:10,239 --> 2:11:11,599
detail

3604
2:11:11,599 --> 2:11:12,560
scan

3605
2:11:12,560 --> 2:11:13,840
and if we do that it's going to show us

3606
2:11:13,840 --> 2:11:15,119
the configuration so that's the

3607
2:11:15,119 --> 2:11:17,199
configuration for our current array what

3608
2:11:17,199 --> 2:11:18,800
we want to do is save that so i'm going

3609
2:11:18,800 --> 2:11:22,960
to redirect it into etc mdadm

3610
2:11:22,960 --> 2:11
md mdadm dot conf so we're going to save

3611
2:11 --> 2:11:28,159
that result into this file

3612
2:11:28,159 --> 2:11:29,840
and now every time we boot the system

3613
2:11:29,840 --> 2:11:31,920
md0 is going to be created and then we

3614
2:11:31,920 --> 2:11
just treat it like any other hard drive

3615
2:11 --> 2:11:35,360
on our system so

3616
2:11:35,360 --> 2:11:39,119
mkfs

3617
2:11:39,119 --> 2:11:42,960
dev md 0 and boom it created it and now

3618
2:11:42,960 --> 2:11:44,320
it's part of our system and it's going

3619
2:11:44,320 --> 2:11:47,119
to be about 30 gigs in size let's see ls

3620
2:11:47,119 --> 2:11:50,639
blk and we look down here md0 shows up

3621
2:11:50,639 --> 2:11:53,920
as 29.6 gigabytes about 30 gigabytes of

3622
2:11:53,920 --> 2:11:57,040
raid 5 storage on our system if you're

3623
2:11:57,040 --> 2:11:58,800
thinking that was a little bit too easy

3624
2:11:58,800 --> 2:12:01,280
well you're right linux raid is awesome

3625
2:12:01,280 --> 2:12:03,360
it's super simple to set up it allows

3626
2:12:03,360 --> 2:12:05,280
you to use the regular drives in your

3627
2:12:05,280 --> 2:12:08,239
system and set them up as a raid device

3628
2:12:08,239 --> 2:12:10,560
so as long as you can save that file

3629
2:12:10,560 --> 2:12:13,840
into mdadm.com that detail scan that we

3630
2:12:13,840 --> 2:12:15,920
did and you can check for the progress

3631
2:12:15,920 --> 2:12
or the status of your current rate array

3632
2:12 --> 2:12:20,639
in md stat you are really set that's all

3633
2:12:20,639 --> 2:12:23,280
it takes to use raid on a system using

3634
2:12:23,280 --> 2:12:24,800
nothing but software provided with the

3635
2:12:24,800 --> 2:12:27,119
linux kernel installing tar balls sounds

3636
2:12:27,119 --> 2:12:28,480
like some sort of prank you might pull

3637
2:12:28,480 --> 2:12
on somebody in high school but really

3638
2:12 --> 2:12:31,679
this is the way that we would install

3639
2:12:31,679 --> 2:12:33,679
software on linux for years before

3640
2:12:33,679 --> 2:12:35,599
package management systems came out now

3641
2:12:35,599 --> 2:12:38,480
you can still download tarball files of

3642
2:12:38,480 --> 2:12:40,159
source code for programs and install

3643
2:12:40,159 --> 2:12:42,239
them although it's not terribly common

3644
2:12:42,239 --> 2:12
anymore now we used to refer to this as

3645
2:12 --> 2:12:46,880
the three step we would extract compile

3646
2:12:46,880 --> 2:12:48,719
and install and this is the process to

3647
2:12:48,719 --> 2:12:50,880
convert source code into an executable

3648
2:12:50,880 --> 2:12:52,480
program now i'll show you how to do that

3649
2:12:52,480 --> 2:12:54,320
really quick i've downloaded already a

3650
2:12:54,320 --> 2:12:57,199
very simple program as a tarball file

3651
2:12:57,199 --> 2:12:58,639
it's called sun weight it's just a

3652
2:12:58,639 --> 2:13:00,400
simple program that waits until the sun

3653
2:13:00,400 --> 2:13:02,239
goes down and then executes so if you

3654
2:13:02,239 --> 2:13:03,440
have a script that you want to run at

3655
2:13:03,440 --> 2:13:05,440
sunset that's kind of a cool tool to use

3656
2:13:05,440 --> 2:13:07,119
to do it but the first step is to

3657
2:13:07,119 --> 2:13:08,800
extract it so we're going to say tar

3658
2:13:08,800 --> 2:13:10,880
minus zxvf

3659
2:13:10,880 --> 2:13:12,960
sun weight we'll go into the folder

3660
2:13:12,960 --> 2:13:15,360
that's created if we type ls we'll see

3661
2:13:15,360 --> 2:13:16,719
there's a couple files in here this is

3662
2:13:16,719 --> 2:13:19,920
the source code and also a make file now

3663
2:13:19,920 --> 2:13:21,599
sometimes there's more complicated

3664
2:13:21,599 --> 2:13:23,360
things like dependencies sometimes

3665
2:13:23,360 --> 2:13:24,880
there's going to be a config file so

3666
2:13:24,880 --> 2:13:25,920
we'll run

3667
2:13:25,920 --> 2:13:27,840
config and go through that process and

3668
2:13:27,840 --> 2:13:28,880
it'll tell you if you need other

3669
2:13:28,880 --> 2:13:30,639
dependencies since we don't have a

3670
2:13:30,639 --> 2:13:32,800
config file i'm just going to type make

3671
2:13:32,800 --> 2:13:35,119
because make will compile it into an

3672
2:13:35,119 --> 2:13:36,880
executable program now you'll notice we

3673
2:13:36,880 --> 2:13:39,040
got some warnings but we didn't get any

3674
2:13:39,040 --> 2:13:40,880
errors a lot of times if it's a big

3675
2:13:40,880 --> 2:13:42,719
program it'll say oh i need this

3676
2:13:42,719 --> 2:13:45,040
dependency or oh you forgot this library

3677
2:13:45,040 --> 2:13:46,560
and you'll have to download and install

3678
2:13:46,560 --> 2:13
those dependencies before you can

3679
2:13 --> 2:13
compile it but this one is very very

3680
2:13 --> 2:13:51,760
simple if we type ls again we're going

3681
2:13:51,760 --> 2:13
to see now we have a result here we have

3682
2:13 --> 2:13:56,480
the sun weight program now we can

3683
2:13:56,480 --> 2:13
execute it right here by saying dot

3684
2:13 --> 2:14
forward slash sun wait and we'll see

3685
2:14 --> 2:14:01,520
sure enough there it runs and we could

3686
2:14:01,520 --> 2:14:03,840
use this to wait until sunset to execute

3687
2:14:03,840 --> 2:14:05,920
a program if we want to install it

3688
2:14:05,920 --> 2:14:08,480
though we have to either copy it to our

3689
2:14:08,480 --> 2:14:10,960
user local bin folder or sometimes

3690
2:14:10,960 --> 2:14:12,719
they'll include in the make file an

3691
2:14:12,719 --> 2:14:15,199
installer so we could say something like

3692
2:14:15,199 --> 2:14:17,360
make install this one doesn't actually

3693
2:14:17,360 --> 2:14:19,360
have that ability to install it it's a

3694
2:14:19,360 --> 2:14:21,280
very simple program so if we wanted to

3695
2:14:21,280 --> 2:14:23,199
install it if you get an error like this

3696
2:14:23,199 --> 2:14
you just simply say okay i'm gonna move

3697
2:14 --> 2:14:29,760
sun weight to user local bin and now if

3698
2:14:29,760 --> 2:14:31,760
we type sunway it's going to execute

3699
2:14:31,760 --> 2:14:33,840
because it's in our path now i told you

3700
2:14:33,840 --> 2:14:35,520
that three-step process is really really

3701
2:14:35,520 --> 2:14:37,360
simple and it is you just basically type

3702
2:14:37,360 --> 2:14:39,119
make and it compiles and then you have a

3703
2:14:39,119 --> 2:14:40,880
binary that you can install either using

3704
2:14:40,880 --> 2:14:42,719
a script or just putting it in your user

3705
2:14:42,719 --> 2:14:44,400
local bin file there is a big

3706
2:14:44,400 --> 2:14:45,920
disadvantage though if you compile

3707
2:14:45,920 --> 2:14
things from source and that is there are

3708
2:14 --> 2:14:50,639
no update mechanisms for getting a newer

3709
2:14:50,639 --> 2:14:52,800
version if you use a package manager

3710
2:14:52,800 --> 2:14:55,040
it'll update old software but if you

3711
2:14:55,040 --> 2:14:56,719
just compile it yourself and install it

3712
2:14:56,719 --> 2:14:59,199
manually there's no way to update it and

3713
2:14:59,199 --> 2:15:00,960
that can be a real problem especially

3714
2:15:00,960 --> 2:15:02,880
when security concerns come up so while

3715
2:15:02,880 --> 2:15:04,719
it's important to understand how to use

3716
2:15:04,719 --> 2:15:07,199
tarballs to compile and install programs

3717
2:15:07,199 --> 2:15:09,280
it's not really the best way to go about

3718
2:15:09,280 --> 2:15:12,159
it if you have any other options

3719
2:15:12,159 --> 2:15:14,159
deb files are the way that programs are

3720
2:15:14,159 --> 2:15:16,800
packaged up in the debian and ubuntu

3721
2:15:16,800 --> 2:15:18,239
world now there's a couple different

3722
2:15:18,239 --> 2:15:20,560
ways that we can manage the subsystem

3723
2:15:20,560 --> 2:15:22,079
and there's a little bit of confusion as

3724
2:15:22,079 --> 2:15:23,760
far as what tool to use now behind the

3725
2:15:23,760 --> 2:15:26,159
scenes they all use d package which is

3726
2:15:26,159 --> 2:15:28,400
like the the lowest level of interaction

3727
2:15:28,400 --> 2:15:29,920
with dev files and i'll show you why

3728
2:15:29,920 --> 2:15:31,920
this is not what you use on a regular

3729
2:15:31,920 --> 2:15
basis in order to actually install

3730
2:15 --> 2:15:36,480
packages on debian or ubuntu there are

3731
2:15:36,480 --> 2:15:38,560
three different options though for

3732
2:15:38,560 --> 2:15:40,480
installing packages using the proper

3733
2:15:40,480 --> 2:15:43,599
system apt apt-get and aptitude now i

3734
2:15:43,599 --> 2:15:45,760
want to talk about them because they do

3735
2:15:45,760 --> 2:15:48,719
the same thing but it's just a matter of

3736
2:15:48,719 --> 2:15:50,880
being replaced by something better so

3737
2:15:50,880 --> 2:15:53,840
apt just apt all on its own is the

3738
2:15:53,840 --> 2:15:56,400
newest program to interact with the app

3739
2:15:56,400 --> 2:15:59,119
system it's new it's simple this is the

3740
2:15:59,119 --> 2:16:01,280
one to use so just use apps i'm going to

3741
2:16:01,280 --> 2:16:04,320
try to use apt if i can aptitude you may

3742
2:16:04,320 --> 2:16:06,239
find online instructions people telling

3743
2:16:06,239 --> 2:16:07,760
you how to install packages with

3744
2:16:07,760 --> 2:16:09,920
aptitude this is older but it still

3745
2:16:09,920 --> 2:16:11,599
works i don't recommend you use it

3746
2:16:11,599 --> 2:16:13,040
though it's a little bit strange when it

3747
2:16:13,040 --> 2:16:15,119
comes to dependencies but it's been

3748
2:16:15,119 --> 2:16:17,520
outmoded and now apt is the way to go

3749
2:16:17,520 --> 2:16:20,079
now here's the other thing apt-get has

3750
2:16:20,079 --> 2:16:21,840
been around for a very long time it's

3751
2:16:21,840 --> 2:16:24,480
the oldest of the three it still works

3752
2:16:24,480 --> 2:16:26,320
but i don't recommend you use it because

3753
2:16:26,320 --> 2:16:29,040
again apt is by far the best way that

3754
2:16:29,040 --> 2:16:30,800
you can go about installing packages

3755
2:16:30,800 --> 2:16:33,040
here's the real problem though i've been

3756
2:16:33,040 --> 2:16:35,040
installing packages on debian and ubuntu

3757
2:16:35,040 --> 2:16:37,040
for so long that sometimes if you're

3758
2:16:37,040 --> 2:16:39,040
watching me in a nugget i might use

3759
2:16:39,040 --> 2:16:41,439
apt-get by mistake just because it's a

3760
2:16:41,439 --> 2:16:43,599
habit it still works there's nothing

3761
2:16:43,599 --> 2:16:45,760
wrong with doing it but the proper way

3762
2:16:45,760 --> 2:16:47,920
to go about installing packages is to

3763
2:16:47,920 --> 2:16:49,519
use apt that's what i'm going to try to

3764
2:16:49,519 --> 2:16:50,479
do and that's what i'm going to show you

3765
2:16:50,479 --> 2:16:52,880
now now on our ubuntu system if we type

3766
2:16:52,880 --> 2:16:55,200
ls we're going to see i have a deb file

3767
2:16:55,200 --> 2:16:57,840
so it's kate kate is a text editor that

3768
2:16:57,840 --> 2:17:00,240
works in the kde environment and this is

3769
2:17:00,240 --> 2:17:02,080
the installer the dev file now remember

3770
2:17:02,080 --> 2:17:04,479
i said that d package is the program

3771
2:17:04,479 --> 2:17:05,920
that is used behind the scenes that's

3772
2:17:05,920 --> 2:17:08,080
how you interact with dub files here's

3773
2:17:08,080 --> 2:17:10,319
the problem so i'm going to say sudo d

3774
2:17:10,319 --> 2:17:14,240
package minus i for install kate.deb

3775
2:17:14,240 --> 2:17:16,240
it's going to try to do it but here's

3776
2:17:16,240 --> 2:17:18,559
the problem it doesn't resolve any

3777
2:17:18,559 --> 2:17:20,880
dependencies so if i want to use d

3778
2:17:20,880 --> 2:17:23,040
package to install it i'm going to have

3779
2:17:23,040 --> 2:17:25,519
to find every one of these deb files on

3780
2:17:25,519 --> 2:17:27,519
the internet download them install them

3781
2:17:27,519 --> 2:17:29,200
one by one find out if they have

3782
2:17:29,200 --> 2:17
dependencies and it can be a real mess

3783
2:17 --> 2:17:34,319
so thankfully the apt system takes care

3784
2:17:34,319 --> 2:17:36,880
of all the dependencies for us so i have

3785
2:17:36,880 --> 2:17:39,599
to erase this so i'm going to say pseudo

3786
2:17:39,599 --> 2:17:42,719
d package minus r kate and it's going to

3787
2:17:42,719 --> 2:17:44,800
undo the mess that i made and now we're

3788
2:17:44,800 --> 2:17:46,319
back to square one rather than

3789
2:17:46,319 --> 2:17:48,319
downloading the deb file we can use the

3790
2:17:48,319 --> 2:17:50,160
app package management system and just

3791
2:17:50,160 --> 2:17:52,639
say sudo apt

3792
2:17:52,639 --> 2:17:53,679
install

3793
2:17:53,679 --> 2:17:54,559
kate

3794
2:17:54,559 --> 2:17:56,080
and it's going to look for the latest

3795
2:17:56,080 --> 2:17:58,399
version and get all of the dependencies

3796
2:17:58,399 --> 2:18:00,639
and you can see there are a ton it would

3797
2:18:00,639 --> 2:18:02,319
have taken me a week to come up with all

3798
2:18:02,319 --> 2:18:04,399
these dependencies so if i say yes it's

3799
2:18:04,399 --> 2:18:08,960
going to install them all

3800
2:18:08,960 --> 2:18:10,399
and it's finally finished that took like

3801
2:18:10,399 --> 2:18:12,160
over three minutes i sped it up so i

3802
2:18:12,160 --> 2:18:13,200
didn't have to sit here with me the

3803
2:18:13,200 --> 2:18:15,200
whole time but now all we have to do is

3804
2:18:15,200 --> 2:18:16,880
run kate because it's installed with all

3805
2:18:16,880 --> 2:18:18,800
of its dependencies on the system and

3806
2:18:18,800 --> 2:18:20,800
here it is our little text editor kate

3807
2:18:20,800 --> 2:18:22,399
now another nice thing about using a

3808
2:18:22,399 --> 2:18:24,559
package management system is we can keep

3809
2:18:24,559 --> 2:18:27,439
things updated so we could say sudo apt

3810
2:18:27,439 --> 2:18:29,040
update which is going to download the

3811
2:18:29,040 --> 2:18:31,519
latest repository information to find

3812
2:18:31,519 --> 2:18:32,960
out all the updates that are out there

3813
2:18:32,960 --> 2:18:34,800
for us to install and then once we have

3814
2:18:34,800 --> 2:18:36,559
the freshest versions of what's out

3815
2:18:36,559 --> 2:18:39,280
there we can use that same program apt

3816
2:18:39,280 --> 2:18:42,639
and say sudo apt upgrade and looks like

3817
2:18:42,639 --> 2:18:43,920
we have a couple things we could upgrade

3818
2:18:43,920 --> 2:18:45,200
hit enter and it's going to keep our

3819
2:18:45,200 --> 2:18:47,760
system up to date that easy not worrying

3820
2:18:47,760 --> 2:18:49,760
about dependencies it does all that on

3821
2:18:49,760 --> 2:18:51,840
its own so while all three of these will

3822
2:18:51,840 --> 2:18:53,439
technically work for installing and

3823
2:18:53,439 --> 2:18:55,519
updating packages you really want to use

3824
2:18:55,519 --> 2:18:57,439
just the simplest one which is apt it's

3825
2:18:57,439 --> 2:18:59,040
the newest and it's the easiest to

3826
2:18:59,040 --> 2:19:01,120
remember

3827
2:19:01,120 --> 2:19:04,240
rpm is the red hat package manager and

3828
2:19:04,240 --> 2:19:07,040
it does just that it manages packages on

3829
2:19:07,040 --> 2:19:09,040
a red hat based meaning red hat or sent

3830
2:19:09,040 --> 2:19:11,120
to us or anything else that uses the rpm

3831
2:19:11,120 --> 2:19:13,040
system that's how it manages their

3832
2:19:13,040 --> 2:19:14,719
dependencies and their installation and

3833
2:19:14,719 --> 2:19:16,559
their programs and updates etc now

3834
2:19:16,559 --> 2:19:18,399
there's a few tools we need to know how

3835
2:19:18,399 --> 2:19:20,880
to use in order to really utilize rpm

3836
2:19:20,880 --> 2:19:22,639
yum is kind of the de facto standard but

3837
2:19:22,639 --> 2:19:24,080
there's a new kit on the block called

3838
2:19:24,080 --> 2:19:26,240
dnf when i talk about that and then of

3839
2:19:26,240 --> 2:19:28,719
course rpm itself is not only a package

3840
2:19:28,719 --> 2:19:31,439
management system but it's also the tool

3841
2:19:31,439 --> 2:19:32,960
the low-level tool that we use to

3842
2:19:32,960 --> 2:19:35,200
actually handle packages now the cool

3843
2:19:35,200 --> 2:19:37,679
thing about rpm is there's no two steps

3844
2:19:37,679 --> 2:19:40,080
required when it comes to installing now

3845
2:19:40,080 --> 2:19
what do i mean by the two-step process

3846
2:19 --> 2:19:44,240
well here we have our multiple programs

3847
2:19:44,240 --> 2:19:47,359
i just mentioned now yum is yellow dog

3848
2:19:47,359 --> 2:19
updater modified which may seem silly

3849
2:19 --> 2:19:52,479
but just for a brief second yellowdog

3850
2:19:52,479 --> 2:19:55,359
was a linux distribution that ran on

3851
2:19:55,359 --> 2:19
powerpc or old apple hardware and its

3852
2:19 --> 2:20
claim to fame was actually that it

3853
2:20 --> 2:20:02,560
started this yum program for managing

3854
2:20:02,560 --> 2:20:04,319
packages now the

3855
2:20:04,319 --> 2:20:06,160
operating system itself didn't do well

3856
2:20:06,160 --> 2:20
after the power pc platform kind of

3857
2:20 --> 2:20:10,720
faded out but yum is still around today

3858
2:20:10,720 --> 2:20:12,160
and in fact that's the program that we

3859
2:20:12,160 --> 2:20:14,399
use on almost every rpm distribution it

3860
2:20:14,399 --> 2:20:17,040
handles dependencies um it is it updates

3861
2:20:17,040 --> 2:20:19,120
the repo information as it's installing

3862
2:20:19,120 --> 2:20:21,200
and upgrading so unlike app you don't

3863
2:20:21,200 --> 2:20:23,280
have to say like yum update and then yum

3864
2:20:23,280 --> 2:20:25,680
upgrade when you upgrade yum updates

3865
2:20:25,680 --> 2:20:28,240
before it does anything else now dnf

3866
2:20:28,240 --> 2:20:29,920
which and i'm not kidding here it stands

3867
2:20:29,920 --> 2:20:32,640
for dandified yum

3868
2:20:32,640 --> 2:20:35,120
but dnf is the new program it's in

3869
2:20:35,120 --> 2:20:37,359
fedora right now it's not incent os but

3870
2:20:37,359 --> 2:20:39,760
it's going to replace yum it's just a

3871
2:20:39,760 --> 2:20:41,760
rewrite it has some features that are

3872
2:20:41,760 --> 2:20:44,240
that it worked better but similarly

3873
2:20:44,240 --> 2:20:46,080
structured and how it works and then of

3874
2:20:46,080 --> 2:20:48,560
course rpm is what happens behind the

3875
2:20:48,560 --> 2:20:50,479
scene there's a program called rpm and

3876
2:20:50,479 --> 2:20:52,880
this is the low-level tool but it

3877
2:20:52,880 --> 2:20:54,479
doesn't handle dependencies so we

3878
2:20:54,479 --> 2:20:57,280
generally don't use the rpm tool on its

3879
2:20:57,280 --> 2:20:59,280
own let me show you what i mean i'm on

3880
2:20:59,280 --> 2:21:01,359
centos here and we're going to use yum

3881
2:21:01,359 --> 2:21:03,040
to install packages but first i want to

3882
2:21:03,040 --> 2:21:05,040
show you rpm now if we look i have

3883
2:21:05,040 --> 2:21:06,960
downloaded this program called kate this

3884
2:21:06,960 --> 2:21:09,040
is just a text editor that works in the

3885
2:21:09,040 --> 2:21:10,880
kde environment but if we were to

3886
2:21:10,880 --> 2:21:12,640
install it with rpm we would have a

3887
2:21:12,640 --> 2:21:15,680
problem if we say rpm dash i for install

3888
2:21:15,680 --> 2:21:17,359
the name of the package it's going to

3889
2:21:17,359 --> 2:21:19,680
say i can't do that because you have 110

3890
2:21:19,680 --> 2:21:21,840
billion different dependencies that

3891
2:21:21,840 --> 2:21:23,280
aren't installed so what you'd have to

3892
2:21:23,280 --> 2:21:26,560
do is find every dependency every rpm

3893
2:21:26,560 --> 2:21:28,479
install them one by one

3894
2:21:28,479 --> 2:21:30,160
these probably have dependencies of

3895
2:21:30,160 --> 2:21:31,600
their own that we'd have to track down

3896
2:21:31,600 --> 2:21:33,200
but thankfully that's where the package

3897
2:21:33,200 --> 2:21:35,520
management system yum comes into play so

3898
2:21:35,520 --> 2:21:37,280
we could simply just say

3899
2:21:37,280 --> 2:21:38,160
yum

3900
2:21:38,160 --> 2:21:40,720
install kate and it's going to go to our

3901
2:21:40,720 --> 2:21:43,200
repositories it's going to update the

3902
2:21:43,200 --> 2:21:45,359
cached information like show us the

3903
2:21:45,359 --> 2:21:46,800
latest information from those

3904
2:21:46,800 --> 2:21:49,120
repositories and then it's going to

3905
2:21:49,120 --> 2:21:50,880
search for kate it's going to find all

3906
2:21:50,880 --> 2:21:53,040
of the dependencies right here say it's

3907
2:21:53,040 --> 2:21:54,720
looking for all the dependencies and the

3908
2:21:54,720 --> 2:21:57,120
dependencies of the dependencies and now

3909
2:21:57,120 --> 2:21:58,479
it says would you like to install it

3910
2:21:58,479 --> 2:22:01,200
along with the 77 dependent packages

3911
2:22:01,200 --> 2:22:02,880
okay i'm going to say yes actually i'm

3912
2:22:02,880 --> 2:22:04,960
going to say no if we install it then it

3913
2:22:04,960 --> 2:22:06,560
would just download install all of those

3914
2:22:06,560 --> 2:22:08,720
packages and life would be good and we

3915
2:22:08,720 --> 2:22:11,040
would have kate installed but what i'm

3916
2:22:11,040 --> 2:22:12,560
going to do is now show you that's how

3917
2:22:12,560 --> 2:22:14,080
we would install a package but if we

3918
2:22:14,080 --> 2:22:15,920
want to update the system all we need to

3919
2:22:15,920 --> 2:22:17,600
do is type yum

3920
2:22:17,600 --> 2:22:19,760
upgrade and it's going to query all of

3921
2:22:19,760 --> 2:22:22,319
our repositories it's going to download

3922
2:22:22,319 --> 2:22:24,240
all the package information dependency

3923
2:22:24,240 --> 2:22
information that we need and now it's

3924
2:22 --> 2:22:27,680
just telling us if we want to get our

3925
2:22:27,680 --> 2:22:29,520
system updated we're going to have to

3926
2:22:29,520 --> 2:22:32,800
download 116 packages install one new

3927
2:22:32,800 --> 2:22:34,720
package and it's going to take 308

3928
2:22:34,720 --> 2:22:36,720
megabytes of space do we want to do that

3929
2:22:36,720 --> 2:22:38,399
i'm just going to say yes and it's going

3930
2:22:38,399 --> 2:22:39,760
to go through the whole process of

3931
2:22:39,760 --> 2:22:42,160
downloading all those rpms it's going to

3932
2:22:42,160 --> 2:22:44,240
use the rpm tool in the background

3933
2:22:44,240 --> 2:22:46,399
install each one of them one by one

3934
2:22:46,399 --> 2:22:48,560
until they're all updated and all

3935
2:22:48,560 --> 2:22:51,120
installed to the latest version so yum

3936
2:22:51,120 --> 2:22:53,680
is very simple to use and knowing that

3937
2:22:53,680 --> 2:22:55,920
it comes from you know a distribution

3938
2:22:55,920 --> 2:22:57,760
that's no longer even a valid

3939
2:22:57,760 --> 2:22:59,280
distribution i don't know that's just

3940
2:22:59,280 --> 2:23:01,520
cool for me that you know yum is still

3941
2:23:01,520 --> 2:23:03,040
around even though yellow dog hasn't

3942
2:23:03,040 --> 2:23:05,200
been a distro for many years now i don't

3943
2:23:05,200 --> 2:23:07,200
have a fedora system to show you dnf

3944
2:23:07,200 --> 2:23:09,200
first hand but it's a very similar

3945
2:23:09,200 --> 2:23:11,200
program to yum it's going to work very

3946
2:23:11,200 --> 2:23:13,120
very similarly so if you find yourself

3947
2:23:13,120 --> 2:23:15,200
on fedora just use it very similarly to

3948
2:23:15,200 --> 2:23:17,040
how you'd use yum and you'd be fine one

3949
2:23:17,040 --> 2:23:18,160
of the big things i want to point out

3950
2:23:18,160 --> 2:23:19,840
though is that there's no two-step

3951
2:23:19,840 --> 2:23:22,160
process like there is with the apt

3952
2:23:22,160 --> 2:23:24,240
environment meaning you don't have to

3953
2:23:24,240 --> 2:23
update your repositories before you

3954
2:23 --> 2:23:28,399
install it you just run yum and it's

3955
2:23:28,399 --> 2:23:30,560
going to update and upgrade all the

3956
2:23:30,560 --> 2:23:32,240
information before it does any

3957
2:23:32,240 --> 2:23:35,280
installing or upgrading

3958
2:23:35,280 --> 2:23:36,960
one of the nicest things about the app

3959
2:23:36,960 --> 2:23:38,800
package management system is that you

3960
2:23:38,800 --> 2:23:41,200
can add repositories which are just

3961
2:23:41,200 --> 2:23:43,680
different groups of software packages so

3962
2:23:43,680 --> 2:23:45,200
if something's not in the standard

3963
2:23:45,200 --> 2:23:47,359
ubuntu or debian system and somebody

3964
2:23:47,359 --> 2:23:49,280
else has written something you can add a

3965
2:23:49,280 --> 2:23:52,399
whole repository of new software and

3966
2:23:52,399 --> 2:23:54,800
then the app system can use it just like

3967
2:23:54,800 --> 2:23:56,800
any other package on your system it's

3968
2:23:56,800 --> 2:23:57,840
pretty cool now we're going to look how

3969
2:23:57,840 --> 2:23:59,520
to add something and there are a few

3970
2:23:59,520 --> 2:24:01,040
gotchas that we need to look at but

3971
2:24:01,040 --> 2:24:03,760
thankfully it's a fairly simple system

3972
2:24:03,760 --> 2:24:05,840
when it comes to configuring new

3973
2:24:05,840 --> 2:24:08,399
repositories so i'm here in the etc apt

3974
2:24:08,399 --> 2:24:10,319
folder on an ubuntu system if we do an

3975
2:24:10,319 --> 2:24:11,760
ls we're going to see there are two

3976
2:24:11,760 --> 2:24:12,800
things i want to show you there's

3977
2:24:12,800 --> 2:24:14,720
sources.list sources.list.d this is a

3978
2:24:14,720 --> 2:24:16,479
folder and there's actually nothing

3979
2:24:16,479 --> 2:24:18,399
inside there right now but we could

3980
2:24:18,399 --> 2:24:21,520
create a new file.list in here and it

3981
2:24:21,520 --> 2:24:24,120
would be read just like this

3982
2:24:24,120 --> 2:24:25,600
systemdefaultsources.list so it doesn't

3983
2:24:25,600 --> 2:24:27,439
matter where things go i'll just add

3984
2:24:27,439 --> 2:24:29,600
something to the existing sources.list

3985
2:24:29,600 --> 2:24:30,640
so we're going to look and you'll see

3986
2:24:30,640 --> 2:24:32,399
there's already a bunch of repositories

3987
2:24:32,399 --> 2:24:34,399
added each one of these lines is a

3988
2:24:34,399 --> 2:24:36,800
repository containing software that the

3989
2:24:36,800 --> 2:24:39,359
app system can install now some of them

3990
2:24:39,359 --> 2:24:41,040
are commented so we would just uncomment

3991
2:24:41,040 --> 2:24:42,399
the existing ones like here this is a

3992
2:24:42,399 --> 2:24:44,479
partner archive we could uncomment this

3993
2:24:44,479 --> 2:24:45,760
and then this would be an active

3994
2:24:45,760 --> 2:24:48,080
repository but if we want to add a third

3995
2:24:48,080 --> 2:24:50,319
party repository we can like i said

3996
2:24:50,319 --> 2:24
either add it at the end of this file or

3997
2:24 --> 2:24:54,800
create a new file in that sources.list.d

3998
2:24:54,800 --> 2:24:57,600
folder and call it like new program.list

3999
2:24:57,600 --> 2:24:59,040
but i'm just going to add it in here and

4000
2:24:59,040 --> 2:25:01,840
i'm going to add the opera browser

4001
2:25:01,840 --> 2:25:03,439
repository in here let's say we wanted

4002
2:25:03,439 --> 2:25:05,600
to add the opera browser it looks like

4003
2:25:05,600 --> 2:25:06,640
this

4004
2:25:06,640 --> 2:25:08,560
it's okay if every field here doesn't

4005
2:25:08,560 --> 2:25:10,080
make perfect sense to you this is just

4006
2:25:10,080 --> 2:25:11,600
the format it says what kind of a

4007
2:25:11,600 --> 2:25
package it is where it's stored what

4008
2:25 --> 2:25:16,240
folder in there and then what version of

4009
2:25:16,240 --> 2:25:18,399
the software we want to actually add the

4010
2:25:18,399 --> 2:25:20,720
stable and then it's non-free as far as

4011
2:25:20,720 --> 2:25:22,640
like what what type of repository it is

4012
2:25:22,640 --> 2:25:24,560
so this is the line right this is where

4013
2:25:24,560 --> 2:25:26,800
the opera browser is stored on the opera

4014
2:25:26,800 --> 2:25:28,960
website so if we save this we would be

4015
2:25:28,960 --> 2:25:31,520
able to do apt update

4016
2:25:31,520 --> 2:25:33,280
no dash

4017
2:25:33,280 --> 2:25:36,240
apt space update and if you look it is

4018
2:25:36,240 --> 2:25:37,600
updating them all but i do want to show

4019
2:25:37,600 --> 2:25:40,160
you back at the top here it gave us a

4020
2:25:40,160 --> 2:25:42,160
little warning slash error oh and it

4021
2:25:42,160 --> 2:25:43,439
repeated the error down here so i'm

4022
2:25:43,439 --> 2:25:44,479
going to show you here it says this

4023
2:25:44,479 --> 2:25:47,520
repository is not signed so what that

4024
2:25:47,520 --> 2:25:49,840
means is we don't have their key because

4025
2:25:49,840 --> 2:25:51,040
we don't want there to be a man in

4026
2:25:51,040 --> 2:25:52,960
middle attack where somebody you know

4027
2:25:52,960 --> 2:25:55,280
takes over opera.com and then starts

4028
2:25:55,280 --> 2:25:57,439
sending us bogus packages so they do

4029
2:25:57,439 --> 2:25:58,880
signing key signing in order to make

4030
2:25:58,880 --> 2:26:00,560
sure that we get the right software so

4031
2:26:00,560 --> 2:26:02,720
if we want to use the repository we have

4032
2:26:02,720 --> 2:26
to add their gpg key to our system now

4033
2:26 --> 2:26:08,080
it's not difficult to do we just do kind

4034
2:26:08,080 --> 2:26:09,600
of a two-step here we have to download

4035
2:26:09,600 --> 2:26:12,160
the key itself so wget

4036
2:26:12,160 --> 2:26:13,600
so we're going to download the file and

4037
2:26:13,600 --> 2:26:15,680
then pipe that into

4038
2:26:15,680 --> 2:26:18,720
app key add all right so we'll do that

4039
2:26:18,720 --> 2:26:20,160
it's going to download the key and it's

4040
2:26:20,160 --> 2:26:21,760
going to add it to our system and it

4041
2:26:21,760 --> 2:26:24,240
just says ok we can see if it's there by

4042
2:26:24,240 --> 2:26:26,160
typing apt key

4043
2:26:26,160 --> 2:26:27,600
list and it's going to list all of the

4044
2:26:27,600 --> 2:26:29,920
keys in our system and if we look we

4045
2:26:29,920 --> 2:26:31,439
should be able to find sure enough

4046
2:26:31,439 --> 2:26:33,520
here's the opera one so there's the

4047
2:26:33,520 --> 2:26:35,200
upper key that we installed now if we do

4048
2:26:35,200 --> 2:26:36,479
app update

4049
2:26:36,479 --> 2:26
notice there's no errors at all it

4050
2:26 --> 2:26:39,840
updated and now we could just install it

4051
2:26:39,840 --> 2:26:42,960
using our apt system app install

4052
2:26:42,960 --> 2:26
opera stable and it would install our

4053
2:26 --> 2:26:47,600
needed packages you know it would

4054
2:26:47,600 --> 2:26:49,439
resolve dependencies even if they're in

4055
2:26:49,439 --> 2:26:51,120
other distributions and it would install

4056
2:26:51,120 --> 2:26:53,120
it for us just fine i'm going to say no

4057
2:26:53,120 --> 2:26:54,240
because i want to show you another way

4058
2:26:54,240 --> 2:26:55,920
you can add a repository and this is

4059
2:26:55,920 --> 2:26:57,520
kind of a cool thing that ubuntu added

4060
2:26:57,520 --> 2:27:00,880
it's called a ppa or a personal package

4061
2:27:00,880 --> 2:27:03,359
archive there's a particular text editor

4062
2:27:03,359 --> 2:27:05,840
that i really like it's called adam atom

4063
2:27:05,840 --> 2:27:07,840
and they have a ppa which is a

4064
2:27:07,840 --> 2:27:10,479
repository and to add it you just say

4065
2:27:10,479 --> 2:27:14,800
add apt repository ppa colon and then

4066
2:27:14,800 --> 2:27:18,240
where it lives or what user it is web

4067
2:27:18,240 --> 2:27:21,399
up date team and the name of the

4068
2:27:21,399 --> 2:27:23,840
repository is atom

4069
2:27:23,840 --> 2:27:25,680
press enter it's going to do a couple

4070
2:27:25,680 --> 2:27:27,200
things it's going to add it to our

4071
2:27:27,200 --> 2:27:29,760
sources.list but it's also going to

4072
2:27:29,760 --> 2:27:31,600
download that key for us so all we have

4073
2:27:31,600 --> 2:27:33,600
to do is say press enter and it's going

4074
2:27:33,600 --> 2:27
to install the key it even does an apt

4075
2:27 --> 2:27:38,080
update for us and then we would just do

4076
2:27:38,080 --> 2:27:40,399
apt install adam and sure enough it

4077
2:27:40,399 --> 2:27:42,319
would be able to do it from that package

4078
2:27:42,319 --> 2:27:43,920
or from that repository that we just

4079
2:27:43,920 --> 2:27:46,080
added it can be a bit overwhelming once

4080
2:27:46,080 --> 2:27:48,240
you have to start adding gpg keys for

4081
2:27:48,240 --> 2:27:49,760
the repositories that you put into your

4082
2:27:49,760 --> 2:27:52,720
sources.list but ppas make it really

4083
2:27:52,720 --> 2:27:54,160
really really simple they do everything

4084
2:27:54,160 --> 2:27:55,920
for you i really like ppas i think it's

4085
2:27:55,920 --> 2:27:58,080
been a wonderful addition to the way we

4086
2:27:58,080 --> 2:28:01,120
handle apt packages

4087
2:28:01,120 --> 2:28:03,840
repositories in an rpm system using yum

4088
2:28:03,840 --> 2:28:05,680
are very similar to that of an app

4089
2:28:05,680 --> 2:28:08,720
system adding them is maybe even easier

4090
2:28:08,720 --> 2:28:10,720
and editing the config is about the same

4091
2:28:10,720 --> 2:28:12,319
just with different files let me show

4092
2:28:12,319 --> 2:28:13,359
you what i mean now the main

4093
2:28:13,359 --> 2:28:15,760
configuration file in centos is going to

4094
2:28:15,760 --> 2:28:17,840
be the yum.com file so let's look at

4095
2:28:17,840 --> 2:28:20,200
that it's in etc and it's

4096
2:28:20,200 --> 2:28:22,640
yum.com here's where we can do a couple

4097
2:28:22,640 --> 2:28:25,040
things one we set the main configuration

4098
2:28:25,040 --> 2:28:27,359
things like where the cache is stored

4099
2:28:27,359 --> 2:28:28,960
and things like this one thing i want to

4100
2:28:28,960 --> 2:28:31,760
point out in here is this gpg check now

4101
2:28:31,760 --> 2:28:34,960
you can actually turn off yum's ability

4102
2:28:34,960 --> 2:28:38,080
to verify using signed key pairs and

4103
2:28:38,080 --> 2:28:40,240
this will just allow it to install any

4104
2:28:40,240 --> 2:28:42,479
repo or install from any repo that you

4105
2:28:42,479 --> 2:28:44,160
install in your system it's not a good

4106
2:28:44,160 --> 2:28:45,760
idea to turn this off though because

4107
2:28:45,760 --> 2:28:47,200
again this is a safety check to make

4108
2:28:47,200 --> 2:28:48,640
sure you're not getting a man in the

4109
2:28:48,640 --> 2:28:50,479
middle attack but the main section is at

4110
2:28:50,479 --> 2:28:53,439
top you can put new repos in the bottom

4111
2:28:53,439 --> 2:28:55,040
or like it says right here you can put

4112
2:28:55,040 --> 2:28:56,600
them in etc

4113
2:28:56,600 --> 2:28:59,439
yum.repose.d as individual files with

4114
2:28:59,439 --> 2:29
the format file dot repo that's usually

4115
2:29 --> 2:29:03,439
what's done but we could add them here

4116
2:29:03,439 --> 2:29:05,160
let's look inside the

4117
2:29:05,160 --> 2:29:07,280
yum.repos.d folder so let's get out of

4118
2:29:07,280 --> 2:29:09,680
here go into etc

4119
2:29:09,680 --> 2:29:12,560
yum.repost.d

4120
2:29:12,560 --> 2:29:14,560
and here's where all of the repos that

4121
2:29:14,560 --> 2:29:16,720
are currently installed on our system

4122
2:29:16,720 --> 2:29:19,120
live so let's look at one really quick

4123
2:29:19,120 --> 2:29:20,960
look at the base file here and we're

4124
2:29:20,960 --> 2:29:23,520
gonna see how it is set up so there's

4125
2:29:23,520 --> 2:29:25,040
the base configuration up here the name

4126
2:29:25,040 --> 2:29:28,080
of it the release where the actual files

4127
2:29:28,080 --> 2:29:30,240
are stored gpg check you can turn this

4128
2:29:30,240 --> 2:29:32,640
on and off for individual repos as well

4129
2:29:32,640 --> 2:29:34,160
so if you set up a repo and you don't

4130
2:29:34,160 --> 2:29:35,920
have signed key pair you could turn it

4131
2:29:35,920 --> 2:29:37,920
off for just one repo and then this

4132
2:29:37,920 --> 2:29:40,560
tells us where the actual key file if

4133
2:29:40,560 --> 2:29:43,040
it's turned on lives so we can put our

4134
2:29:43,040 --> 2:29:44,720
put it in there manually so that yum

4135
2:29:44,720 --> 2:29:47,439
knows where to look to find that key now

4136
2:29:47,439 --> 2:29:49,280
normally these aren't added manually but

4137
2:29:49,280 --> 2:29:51,040
you could type all of these in these are

4138
2:29:51,040 --> 2:29:53,439
all individual repos that are defined in

4139
2:29:53,439 --> 2:29:55,760
here in this bracketed section usually

4140
2:29:55,760 --> 2:29:57,439
what you do though it's really elegant

4141
2:29:57,439 --> 2:29:59,120
is let's get out of here you just

4142
2:29:59,120 --> 2:30:00,800
install the package so one of the really

4143
2:30:00,800 --> 2:30:02,800
popular packages is called apple which

4144
2:30:02,800 --> 2:30:05,280
stands for extra packages for enterprise

4145
2:30:05,280 --> 2:30:07,840
linux and to do that we just do yum

4146
2:30:07,840 --> 2:30:10,479
install apple release

4147
2:30:10,479 --> 2:30:12,800
i'm gonna say yes to install it and now

4148
2:30:12,800 --> 2:30:14,720
if we look in here we're gonna see here

4149
2:30:14,720 --> 2:30:17,520
we go the apple.repo has been added so

4150
2:30:17,520 --> 2:30:19,600
now if we were to install packages apple

4151
2:30:19,600 --> 2:30:21,200
would also be one of the places that we

4152
2:30:21,200 --> 2:30:23,359
could pull packages from we can just cap

4153
2:30:23,359 --> 2:30:25,200
this to look at it

4154
2:30:25,200 --> 2:30:27,520
and we can see it's enabled the gpg

4155
2:30:27,520 --> 2:30:30,160
check is on it tells us to use this key

4156
2:30:30,160 --> 2:30:32,319
file for checking the signatures and

4157
2:30:32,319 --> 2:30:34,240
that's all there is to installing a

4158
2:30:34,240 --> 2:30:36,640
repository in yum and since yum

4159
2:30:36,640 --> 2:30:38,160
automatically updates we don't have to

4160
2:30:38,160 --> 2:30:40,080
like update the cache when we install a

4161
2:30:40,080 --> 2:30:41,760
package it's going to automatically fill

4162
2:30:41,760 --> 2:30:43,439
in the blanks for us yum is an

4163
2:30:43,439 --> 2:30:45,439
incredibly awesome and powerful package

4164
2:30:45,439 --> 2:30:47,359
manager and we can tell just by how easy

4165
2:30:47,359 --> 2:30:49,840
it is to add a repo and edit that config

4166
2:30:49,840 --> 2:30:52,240
either using the yum.com file or the

4167
2:30:52,240 --> 2:30:57,680
individual files inside etc yum.repo.d

4168
2:30:57,680 --> 2:30:59,520
apt and yum are certainly the most

4169
2:30:59,520 --> 2:31:01,280
common package managers out there but

4170
2:31:01,280 --> 2:31:03,280
there are a few less common package

4171
2:31:03,280 --> 2:31:05,280
managers that you should still be aware

4172
2:31:05,280 --> 2:31:08,240
of now arch linux uses a program called

4173
2:31:08,240 --> 2:31:11,040
pacman for managing their packages and

4174
2:31:11,040 --> 2:31:13,840
open souza uses zipper now i'm not

4175
2:31:13,840 --> 2:31:15,760
saying that the mascot for zipper is a

4176
2:31:15,760 --> 2:31:17,680
purple horse but i'm just saying maybe

4177
2:31:17,680 --> 2:31
it should be nevertheless it's not too

4178
2:31 --> 2:31:21,760
difficult to use them even if you're not

4179
2:31:21,760 --> 2:31:23,760
familiar here i have two terminal

4180
2:31:23,760 --> 2:31:25,439
windows to two different linux

4181
2:31:25,439 --> 2:31:27,040
distributions the first one is arch

4182
2:31:27,040 --> 2:31:29,680
linux which uses the pacman package

4183
2:31:29,680 --> 2:31:32,399
manager so if we just do pacman minus h

4184
2:31:32,399 --> 2:31:34,160
we're gonna see here are a list of the

4185
2:31:34,160 --> 2:31:36,800
commands now it's not immediately clear

4186
2:31:36,800 --> 2:31:38,880
how you go about installing a package

4187
2:31:38,880 --> 2:31:40,800
unfortunately it's not just install it's

4188
2:31:40,800 --> 2:31:43,200
actually capital s for sync we kind of

4189
2:31:43,200 --> 2:31:46,080
want to sync the system into a state

4190
2:31:46,080 --> 2:31:47,760
that we wanted so to install a package

4191
2:31:47,760 --> 2:31:49,200
it isn't difficult once you know what to

4192
2:31:49,200 --> 2:31:52,080
do just pac-man minus capital s and

4193
2:31:52,080 --> 2:31:53,840
let's install vim my favorite text

4194
2:31:53,840 --> 2:31:55,680
editor you have to actually spell

4195
2:31:55,680 --> 2:31
pac-man correctly pac-man

4196
2:31 --> 2:32:00,560
minus capital s vim it'll say do you

4197
2:32:00,560 --> 2:32:02,960
want to install it and say yes it's

4198
2:32:02,960 --> 2:32:04,640
installed it and now if we type vim you

4199
2:32:04,640 --> 2:32:06,160
can see sure enough there's vim my

4200
2:32:06,160 --> 2:32:08,080
favorite text editor now over here in

4201
2:32:08,080 --> 2:32:10,319
open souza it's a little bit different

4202
2:32:10,319 --> 2:32:12,880
here we use a program called zipper zy

4203
2:32:12,880 --> 2:32:15,840
pper and you do zipper minus h

4204
2:32:15,840 --> 2:32:17,600
and it'll show us all of the help

4205
2:32:17,600 --> 2:32:19,760
commands that are available this one it

4206
2:32:19,760 --> 2:32:22,080
is pretty easy you just do install or

4207
2:32:22,080 --> 2:32
you can shorten it to just in so we

4208
2:32 --> 2:32:24,960
could say

4209
2:32:24,960 --> 2:32:27,040
zipper in

4210
2:32:27,040 --> 2:32:29,280
vim we'll install them again press enter

4211
2:32:29,280 --> 2:32:31,520
it's going to retrieve the repositories

4212
2:32:31,520 --> 2:32:33,760
online just like yum or apt would do and

4213
2:32:33,760 --> 2:32:36,240
then it's going to install the vim

4214
2:32:36,240 --> 2:32:37,840
package for us and we'll be able to use

4215
2:32:37,840 --> 2:32:41,200
it on open souza

4216
2:32:41,200 --> 2:32:42,960
it'll ask us so we want to continue i'm

4217
2:32:42,960 --> 2:32:44,720
going to say yes

4218
2:32:44,720 --> 2:32:47,040
and it installs all of the packages and

4219
2:32:47,040 --> 2:32:48,560
the dependencies so now same thing here

4220
2:32:48,560 --> 2:32:50,319
we get startup vim and sure enough

4221
2:32:50,319 --> 2:32:53,200
there's vim this time on open souza

4222
2:32:53,200 --> 2:32:55,520
pac-man and zipper are really two of the

4223
2:32:55,520 --> 2:32:57,600
more popular alternative package

4224
2:32:57,600 --> 2:32:59,439
managers but there are some others if

4225
2:32:59,439 --> 2:33:00,479
you're on slack where you're going to

4226
2:33:00,479 --> 2:33:02,479
have to install things by hand using

4227
2:33:02,479 --> 2:33:05,200
tar.gz files but these two along with

4228
2:33:05,200 --> 2:33:07,200
apt and yum will get you through most

4229
2:33:07,200 --> 2:33:09,120
systems

4230
2:33:09,120 --> 2:33:11,680
managing local users on your server is

4231
2:33:11,680 --> 2:33:13,520
really easy and there's a bunch of tools

4232
2:33:13,520 --> 2:33:15,439
that make it even easier now there's the

4233
2:33:15,439 --> 2:33:16,960
standard command line tools that allow

4234
2:33:16,960 --> 2:33:19,280
you to add modify and delete accounts

4235
2:33:19,280 --> 2:33:21,439
and there's this super cool script that

4236
2:33:21,439 --> 2:33:24,160
i really like which makes adding a user

4237
2:33:24,160 --> 2:33:27,359
very very easy there are a whole bunch

4238
2:33:27,359 --> 2:33:29,280
of different facts about a user that is

4239
2:33:29,280 --> 2:33:31,280
stored in the system though full name

4240
2:33:31,280 --> 2:33:33,359
username password all of these things

4241
2:33:33,359 --> 2:33:35,359
plus some others that aren't even listed

4242
2:33:35,359 --> 2:33:37,439
are on there and it's important to know

4243
2:33:37,439 --> 2:33:39,359
that the tools will manipulate all of

4244
2:33:39,359 --> 2:33:41,520
these but you don't have to specify

4245
2:33:41,520 --> 2:33:43,520
every single thing every time especially

4246
2:33:43,520 --> 2:33:45,280
things like office number those aren't

4247
2:33:45,280 --> 2:33
even really used anymore but there are

4248
2:33 --> 2:33:50,479
possibilities that you can add specific

4249
2:33:50,479 --> 2:33:52,240
information in the local group now i

4250
2:33:52,240 --> 2:33:53,840
just want to go right to the command

4251
2:33:53,840 --> 2:33:55,280
line so we can actually start adding

4252
2:33:55,280 --> 2:33:57,760
users and at first we're going to use

4253
2:33:57,760 --> 2:33:59,520
the tools that you know kind of come

4254
2:33:59,520 --> 2:34:01,920
with it like the low level tools user

4255
2:34:01,920 --> 2:34:03,920
add user dell in user mod so first of

4256
2:34:03,920 --> 2:34:05,280
all i want to say

4257
2:34:05,280 --> 2:34:07,840
user add because we don't have any extra

4258
2:34:07,840 --> 2:34:09,760
users on our thing i'm going to do dash

4259
2:34:09,760 --> 2:34:11,760
h and that'll give us the help screen

4260
2:34:11,760 --> 2:34:13,439
now you can see there are tons of

4261
2:34:13,439 --> 2:34
options for adding users but the format

4262
2:34 --> 2:34:18,240
is pretty much the same user add

4263
2:34:18,240 --> 2:34
whatever options you want to add and

4264
2:34 --> 2:34:22,479
then the login or the username for the

4265
2:34:22,479 --> 2:34:24,479
new user now we're going to use just a

4266
2:34:24,479 --> 2:34:25,680
couple and i want to show you the

4267
2:34:25,680 --> 2:34:28,319
problem with using user ad as opposed to

4268
2:34:28,319 --> 2:34:30,640
that fancy script add user

4269
2:34:30,640 --> 2:34:32,240
we have to determine like a home

4270
2:34:32,240 --> 2:34:35,439
directory and a user shell and all sorts

4271
2:34:35,439 --> 2:34:36,800
of things like that so let's say we

4272
2:34:36,800 --> 2:34:38,160
wanted to make a user we're just going

4273
2:34:38,160 --> 2:34:39,840
to say now notice i'm root we have to be

4274
2:34:39,840 --> 2:34:41,760
root to make a system user but we would

4275
2:34:41,760 --> 2:34:46,160
say user add and i want to do minus d

4276
2:34:46,160 --> 2:34:49,200
home susie minus s for shell i'm going

4277
2:34:49,200 --> 2:34:50,800
to use the bin

4278
2:34:50,800 --> 2:34:53,359
bash shell and her username is going to

4279
2:34:53,359 --> 2:34:55,040
be susie

4280
2:34:55,040 --> 2:34:56,800
press enter it's all done now there is

4281
2:34:56,800 --> 2:34:58,560
no password for susie we'd have to

4282
2:34:58,560 --> 2:34:59,760
actually do that with the password

4283
2:34:59,760 --> 2:35:03,120
command uh we'll actually say p a swd

4284
2:35:03,120 --> 2:35:05,040
susie alright so now she has a new

4285
2:35:05,040 --> 2:35:07,040
password and we can here let's start a

4286
2:35:07,040 --> 2:35:08,399
new window

4287
2:35:08,399 --> 2:35:11,840
ssh suzy at

4288
2:35:11,840 --> 2:35:12,800
susie

4289
2:35:12,800 --> 2:35
and we're logged in as susie oh but see

4290
2:35 --> 2:35:17,760
it says unable to change to directory

4291
2:35:17,760 --> 2:35:19,520
home susie there's no such file or

4292
2:35:19,520 --> 2:35:21,359
directory well dog on it we said that

4293
2:35:21,359 --> 2:35:23,760
that's our home directory but by default

4294
2:35:23,760 --> 2:35:25,680
it doesn't make that directory we

4295
2:35:25,680 --> 2:35:27,600
actually have to make that directory or

4296
2:35:27,600 --> 2:35:29,439
there's another command dash m which

4297
2:35:29,439 --> 2:35:31,520
will create it as we're adding the user

4298
2:35:31,520 --> 2:35:33,920
so it's possible again to use this tool

4299
2:35:33,920 --> 2:35:36,640
and set all of those different flags up

4300
2:35:36,640 --> 2:35:38,479
as we create the user if we go through

4301
2:35:38,479 --> 2:35:40,160
all of these things but it's much easier

4302
2:35:40,160 --> 2:35:42,080
to use the add user script and i'll show

4303
2:35:42,080 --> 2:35:45,200
you what i mean add user frank and now

4304
2:35:45,200 --> 2:35:47,520
it says okay i'm creating the frank user

4305
2:35:47,520 --> 2:35:49,760
added a new group for frank created

4306
2:35:49,760 --> 2:35:51,760
frank's home directory copying all the

4307
2:35:51,760 --> 2:35:53,760
files from etsy scale and now it's

4308
2:35:53,760 --> 2:35:55,760
asking me put to give frank a password

4309
2:35:55,760 --> 2:35:57,920
so i'm going to do that now the full

4310
2:35:57,920 --> 2:36:00,399
name of frank his room number which

4311
2:36:00,399 --> 2:36:02,080
again we don't use room number work

4312
2:36:02,080 --> 2:36:04,160
phone all those things anymore really

4313
2:36:04,160 --> 2:36:05,760
but full name is nice to have in there

4314
2:36:05,760 --> 2:36:07,200
and is this information correct i'm

4315
2:36:07,200 --> 2:36:08,399
going to say yes

4316
2:36:08,399 --> 2:36:11,359
and so now we have a really nicely set

4317
2:36:11,359 --> 2:36:13,680
up user so if we were to open a new tab

4318
2:36:13,680 --> 2:36:17,760
again and do ssh frank at localhost log

4319
2:36:17,760 --> 2:36:19,600
in with frank i have to type frank's

4320
2:36:19,600 --> 2:36:21,359
password correctly and now you'll see

4321
2:36:21,359 --> 2:36:23,200
sure enough if we do pwd we're gonna see

4322
2:36:23,200 --> 2:36:25,040
we're in frank's home directory he has a

4323
2:36:25,040 --> 2:36:27,040
perfectly usable account because that ad

4324
2:36:27,040 --> 2:36:29,200
user script goes through and remembers

4325
2:36:29,200 --> 2:36:31,280
all the various things that we need to

4326
2:36:31,280 --> 2:36:34,240
do so let's get out of here now there is

4327
2:36:34,240 --> 2:36:36,640
another tool we can use user dell so we

4328
2:36:36,640 --> 2:36:39,760
can say user dell let's do minus h so we

4329
2:36:39,760 --> 2:36:41,600
can see the options there's really only

4330
2:36:41,600 --> 2:36:43,200
one option that's ever really important

4331
2:36:43,200 --> 2:36:45,760
that is minus r which removes the user's

4332
2:36:45,760 --> 2:36:48,880
files so we could say user dell

4333
2:36:48,880 --> 2:36:52,800
minus r for remove frank and it removed

4334
2:36:52,800 --> 2:36
all those files that said there wasn't

4335
2:36 --> 2:36:55,520
any mail form so i couldn't remove that

4336
2:36:55,520 --> 2:36:58,399
but now frank's home directory is gone

4337
2:36:58,399 --> 2:37:00,960
now we could modify susie's account if

4338
2:37:00,960 --> 2:37:04,560
we use user mod so let's see user mod

4339
2:37:04,560 --> 2:37:06,479
minus h and we're gonna see same thing

4340
2:37:06,479 --> 2:37:07,920
we have a whole bunch of tools and this

4341
2:37:07,920 --> 2:37:11,439
is just to modify an existing user so we

4342
2:37:11,439 --> 2:37:13,280
could do something like change her shell

4343
2:37:13,280 --> 2:37:14,960
like right now it's been bashed but we

4344
2:37:14,960 --> 2:37:16,960
could change her shell so we could say

4345
2:37:16,960 --> 2:37:18,479
user mod

4346
2:37:18,479 --> 2:37:21,040
minus s let's say bin

4347
2:37:21,040 --> 2:37:22,720
false susie

4348
2:37:22,720 --> 2:37
what this is going to do it's going to

4349
2:37 --> 2:37:26,800
change her shell so if she tries to log

4350
2:37:26,800 --> 2:37:28,720
in it's going to fail so let's open up a

4351
2:37:28,720 --> 2:37
new tab and try to log in as her ssh

4352
2:37 --> 2:37:35,520
suzy at localhost it logged in and then

4353
2:37:35,520 --> 2:37:37,760
immediately logged out see it says it

4354
2:37:37,760 --> 2:37:39,280
still doesn't have a user account we are

4355
2:37:39,280 --> 2:37:40,640
a user directory we didn't make her a

4356
2:37:40,640 --> 2:37
home directory but then it says

4357
2:37 --> 2:37:44,560
connection to localhost closed that's

4358
2:37:44,560 --> 2:37:46,479
because as soon as it logged in her

4359
2:37:46,479 --> 2:37:48,560
shell is been false which immediately

4360
2:37:48,560 --> 2:37:50,640
exits and then we're back to being

4361
2:37:50,640 --> 2:37:52,399
logged out we're logged in as bob here

4362
2:37:52,399 --> 2:37:55,359
so the ability to modify a user account

4363
2:37:55,359 --> 2:37:57,280
is really important but if you're going

4364
2:37:57,280 --> 2:37:59,760
to add a user i highly recommend you use

4365
2:37:59,760 --> 2:38:02,560
that script you can certainly use the

4366
2:38:02,560 --> 2:38:04,960
manual tools with all the flags to add

4367
2:38:04,960 --> 2:38:06,640
that account but add user just makes it

4368
2:38:06,640 --> 2:38:09,040
so easy by remembering all the steps and

4369
2:38:09,040 --> 2:38:10,720
i'll be honest i often have a difficult

4370
2:38:10,720 --> 2:38:13,040
time remembering is it add user or user

4371
2:38:13,040 --> 2:38:16,399
ad add user user ad for my own sake i

4372
2:38:16,399 --> 2:38:18,640
like to think okay alphabetically add

4373
2:38:18,640 --> 2:38:20,880
user is first and that's the first tool

4374
2:38:20,880 --> 2:38:22,880
i want to use for adding a user so

4375
2:38:22,880 --> 2:38:24,720
that's just the trick i use regardless

4376
2:38:24,720 --> 2:38:26,960
of what tools you use to add users it's

4377
2:38:26,960 --> 2:38:28,880
important to understand that modifying

4378
2:38:28,880 --> 2:38:30,399
them on the command line is fairly

4379
2:38:30,399 --> 2:38:33,760
simple and not that difficult to learn

4380
2:38:33,760 --> 2:38:35,280
local groups on a linux system are

4381
2:38:35,280 --> 2:38:36,960
fairly straightforward to handle but

4382
2:38:36,960 --> 2:38
it's important to understand the

4383
2:38 --> 2:38:39,840
difference between primary groups and

4384
2:38:39,840 --> 2:38:42,560
secondary or supplementary groups on

4385
2:38:42,560 --> 2:38:45,120
each individual user now every user on

4386
2:38:45,120 --> 2:38:47,840
the system is going to have their own

4387
2:38:47,840 --> 2:38:50,479
personal primary group now usually

4388
2:38:50,479 --> 2:38
that's going to be the same as their

4389
2:38 --> 2:38:53,840
username so bob is going to have a

4390
2:38:53,840 --> 2:38:55,520
username of bob and he's also going to

4391
2:38:55,520 --> 2:38:57,680
have a primary group of bob and that's

4392
2:38:57,680 --> 2:38:59,840
usually how it goes it could be a it

4393
2:38:59,840 --> 2:39:01,280
could be a different group that says

4394
2:39:01,280 --> 2:39:03,040
primary group but almost always that's

4395
2:39:03,040 --> 2:39:04,960
how the primary group is going to be on

4396
2:39:04,960 --> 2:39:07,200
a linux system and then there are all of

4397
2:39:07,200 --> 2:39:09,600
the supplementary groups which happen to

4398
2:39:09,600 --> 2:39:11,840
be like things that he belongs to like

4399
2:39:11,840 --> 2:39:13,439
maybe he's in the admin group maybe he's

4400
2:39:13,439 --> 2:39:15,920
in the sales group marketing third floor

4401
2:39:15,920 --> 2:39:18,240
public all of these groups are in

4402
2:39:18,240 --> 2:39:19,920
addition to his primary group and it

4403
2:39:19,920 --> 2:39:22,800
will give him access to certain folders

4404
2:39:22,800 --> 2:39:24,319
on the system that he might not have

4405
2:39:24,319 --> 2:39:26,240
access to if he didn't have these

4406
2:39:26,240 --> 2:39:28,640
different group memberships now in order

4407
2:39:28,640 --> 2:39:30,960
to actually create groups the tools are

4408
2:39:30,960 --> 2:39:32,479
very straightforward just like adding

4409
2:39:32,479 --> 2:39:35,120
users with much fewer options so let's

4410
2:39:35,120 --> 2:39:36,319
actually look at that and i want to show

4411
2:39:36,319 --> 2:39:39,359
you how to manipulate users in groups on

4412
2:39:39,359 --> 2:39:41,439
a system now here we are on an ubuntu

4413
2:39:41,439 --> 2:39:43,520
system and we can simply say

4414
2:39:43,520 --> 2:39:45,040
group add

4415
2:39:45,040 --> 2:39:46,880
public it's going to add the group

4416
2:39:46,880 --> 2:39:48,960
public to our system we could say

4417
2:39:48,960 --> 2:39:50,800
group add

4418
2:39:50,800 --> 2:39:52,479
sales and it's going to do that now we

4419
2:39:52,479 --> 2:39:53,920
could look at the different options

4420
2:39:53,920 --> 2:39:56,560
group add minus h you see there aren't

4421
2:39:56,560 --> 2:39:58,399
too many options we could specify a

4422
2:39:58,399 --> 2:40:00,960
group id number if we wanted we could do

4423
2:40:00,960 --> 2:40:03,840
some things with group mod to change

4424
2:40:03,840 --> 2:40:05,840
some of those features like the group id

4425
2:40:05,840 --> 2:40:07,439
and then of course we could delete them

4426
2:40:07,439 --> 2:40:10,160
with group dell and the same sort of

4427
2:40:10,160 --> 2:40:12,240
thing you know we just delete them as we

4428
2:40:12,240 --> 2:40:14,479
would use user dell on a system to get

4429
2:40:14,479 --> 2:40:16,319
rid of a user so this is pretty

4430
2:40:16,319 --> 2:40:17,760
straightforward but the part about

4431
2:40:17,760 --> 2:40:20,160
primary and secondary can be confusing

4432
2:40:20,160 --> 2:40:23,200
so right now if we type groups bob we're

4433
2:40:23,200 --> 2:40:25,359
going to see that bob is in all of these

4434
2:40:25,359 --> 2:40:27,279
groups the first one listed is his

4435
2:40:27,279 --> 2:40:29,600
primary group so bob's primary group is

4436
2:40:29,600 --> 2:40:31,520
bob and then these are all of his

4437
2:40:31,520 --> 2:40:34,479
supplementary or secondary groups now i

4438
2:40:34,479 --> 2:40:37,040
want to show you user mod minus h

4439
2:40:37,040 --> 2:40:39,040
because it shows us how we can

4440
2:40:39,040 --> 2:40:42,080
manipulate groups right here so

4441
2:40:42,080 --> 2:40:45,600
lowercase g is how we force a user to a

4442
2:40:45,600 --> 2:40:47,520
new primary group so we could change

4443
2:40:47,520 --> 2:40:49,920
bob's primary group using the lowercase

4444
2:40:49,920 --> 2:40:53,439
g flag on user mod in order to change

4445
2:40:53,439 --> 2:40:56,399
his secondary or supplementary groups we

4446
2:40:56,399 --> 2:40:58,800
use a capital g but here's where the

4447
2:40:58,800 --> 2:41:01,680
gotcha comes into play if we do like

4448
2:41:01,680 --> 2:41:04,160
minus capital g public it's going to

4449
2:41:04,160 --> 2:41
delete all of his other supplementary

4450
2:41 --> 2:41:07,920
groups and only make him part of the

4451
2:41:07,920 --> 2:41:09,600
public group and that's not what you

4452
2:41:09,600 --> 2:41:12,640
almost ever want so there's this nice

4453
2:41:12,640 --> 2:41:16,319
dash a which means append the user to

4454
2:41:16,319 --> 2:41:18,160
another supplementary group without

4455
2:41:18,160 --> 2:41:19,920
getting rid of the additional groups

4456
2:41:19,920 --> 2:41:21,600
that he already belongs to so let's

4457
2:41:21,600 --> 2:41:22,800
actually do that in practice so we're

4458
2:41:22,800 --> 2:41
going to say user mod minus a for append

4459
2:41 --> 2:41:27,840
minus capital g

4460
2:41:27,840 --> 2:41:31,279
public bob okay and now if we do groups

4461
2:41:31,279 --> 2:41:32,800
bob we're going to see that bob still

4462
2:41:32,800 --> 2:41:35,120
belongs to all those secondary groups

4463
2:41:35,120 --> 2:41:37,120
and also to the public group which is

4464
2:41:37,120 --> 2:41:39,200
exactly what we wanted to have happen

4465
2:41:39,200 --> 2:41:41,120
because if we wouldn't have used that a

4466
2:41:41,120 --> 2:41:42,560
this is what would have happened if we

4467
2:41:42,560 --> 2:41:46,160
would have done user mod minus g

4468
2:41:46,160 --> 2:41:49,200
let's do sales for bob this seems like

4469
2:41:49,200 --> 2:41:51,040
it's going to do the right thing no

4470
2:41:51,040 --> 2:41:52,640
errors but then if we do

4471
2:41:52,640 --> 2:41:54,640
groups bob we're going to see

4472
2:41:54,640 --> 2:41:56,640
he still has his primary group of bob

4473
2:41:56,640 --> 2:41:58,720
and then just sales and so we'd have to

4474
2:41:58,720 --> 2:42:01,040
manually go back through and add him to

4475
2:42:01,040 --> 2:42:03,359
each individual group which is really a

4476
2:42:03,359 --> 2:42:05,359
pain in the butt so you don't want to do

4477
2:42:05,359 --> 2:42:06,880
that you want to always remember to use

4478
2:42:06,880 --> 2:42:08,880
the dash a now in function the

4479
2:42:08,880 --> 2:42:10,720
difference between a primary group and a

4480
2:42:10,720 --> 2:42:12,960
secondary group the primary group is

4481
2:42:12,960 --> 2:42:15,439
what is used if bob were to create a

4482
2:42:15,439 --> 2:42:18,240
file so let's open up a new tab here we

4483
2:42:18,240 --> 2:42:19,279
are bob

4484
2:42:19,279 --> 2:42:21,439
say this is in our home folder if bob

4485
2:42:21,439 --> 2:42:24,319
were to touch a file and we do ls minus

4486
2:42:24,319 --> 2:42:26,160
l we're going to see the file that we

4487
2:42:26,160 --> 2:42:29,200
just created is owned by bob and the

4488
2:42:29,200 --> 2:42:31,359
group membership is bob's primary group

4489
2:42:31,359 --> 2:42:32,720
of bob so that's really the difference

4490
2:42:32,720 --> 2:42:35,040
between primary and secondary is when

4491
2:42:35,040 --> 2:42:37,359
you have a primary group that's what the

4492
2:42:37,359 --> 2:42:38,960
group membership of a new file you

4493
2:42:38,960 --> 2:42:40,800
create is going to belong to now

4494
2:42:40,800 --> 2:42:42,800
creating groups is really easy with the

4495
2:42:42,800 --> 2:42:45,120
group ad group mod group dell tool so i

4496
2:42:45,120 --> 2:42:46,560
didn't even go into that very much in

4497
2:42:46,560 --> 2:42:48,960
depth the real important takeaway is the

4498
2:42:48,960 --> 2:42:51,040
idea of primary versus secondary or

4499
2:42:51,040 --> 2:42:53,760
supplementary and how to take individual

4500
2:42:53,760 --> 2:42:56,640
users and put them into groups without

4501
2:42:56,640 --> 2:42:57,920
deleting all of their other

4502
2:42:57,920 --> 2:42:59,520
supplementary groups that they already

4503
2:42:59,520 --> 2:43:01,120
belong to i hope this has been

4504
2:43:01,120 --> 2:43:02,560
informative for you and i'd like to

4505
2:43:02,560 --> 2:43:04,479
thank you for viewing figuring out what

4506
2:43:04,479 --> 2:43:06,319
users are on your system and what

4507
2:43:06,319 --> 2:43:07,920
accounts they're using and what they're

4508
2:43:07,920 --> 2:43:09,600
doing is really an important part of

4509
2:43:09,600 --> 2:43:11,600
forensics but also it's an important

4510
2:43:11,600 --> 2:43:13,279
part of a sanity check like why is my

4511
2:43:13,279 --> 2:43
computer running slow or what user am i

4512
2:43 --> 2:43:18,399
logged in as and there's a handful of

4513
2:43:18,399 --> 2:43:19,760
simple command line tools that we're

4514
2:43:19,760 --> 2:43:21,520
going to go over that will just help you

4515
2:43:21,520 --> 2:43:24,160
figure out the users on your system now

4516
2:43:24,160 --> 2:43:25,760
the first scenario this happens a lot if

4517
2:43:25,760 --> 2:43:28,080
you log into embedded systems like

4518
2:43:28,080 --> 2:43:29,760
routers and stuff where you don't get a

4519
2:43:29,760 --> 2:43:31,359
prompt that tells you who you are you

4520
2:43:31,359 --> 2:43:33,439
just get like a hashtag here well what

4521
2:43:33,439 --> 2:43:35,600
you can do is say who am i which seems a

4522
2:43:35,600 --> 2:43:37,439
little bit silly but it will just give

4523
2:43:37,439 --> 2:43:38,960
you the user that you're currently

4524
2:43:38,960 --> 2:43:40,560
logged in as if you're starting to use

4525
2:43:40,560 --> 2:43:43,200
sudo and su and you're sshing from one

4526
2:43:43,200 --> 2:43:44,800
computer to another sometimes just

4527
2:43:44,800 --> 2:43:46,720
figuring out what user you're logged in

4528
2:43:46,720 --> 2:43:49,200
as is really important so that's it

4529
2:43:49,200 --> 2:43:50,479
seems silly but it's something that i

4530
2:43:50,479 --> 2:43:52,399
use in nuggets even you'll see me use

4531
2:43:52,399 --> 2:43:53,600
that quite a bit

4532
2:43:53,600 --> 2:43:56,240
another one if we just do who it'll show

4533
2:43:56,240 --> 2:43:58,800
us who is logged into our current system

4534
2:43:58,800 --> 2:44:00,080
it actually gives us quite a bit of

4535
2:44:00,080 --> 2:44:01,760
information we have bob frank and looks

4536
2:44:01,760 --> 2:44
like susie is logged in twice and it

4537
2:44 --> 2:44:06,720
tells us when that person logged in and

4538
2:44:06,720 --> 2:44:09,279
where they're logged in from so bob is

4539
2:44:09,279 --> 2:44:11,760
our current user and i'm logged in on

4540
2:44:11,760 --> 2:44:14,160
the display zero meaning i'm using an x

4541
2:44:14,160 --> 2:44
windows session here and then frank and

4542
2:44 --> 2:44:17,920
susie are both logged into localhost

4543
2:44:17,920 --> 2:44:20,160
probably ssh and then susie is logged in

4544
2:44:20,160 --> 2:44:22,960
from a remote computer probably over ssh

4545
2:44:22,960 --> 2:44
as well so who tells you that w which is

4546
2:44 --> 2:44:27,760
like what although you don't have to

4547
2:44:27,760 --> 2:44:29,600
type the rest of it it's just a w gives

4548
2:44:29,600 --> 2:44:31,520
you the same information with a little

4549
2:44:31,520 --> 2:44:33,439
bit more so these are the users where

4550
2:44:33,439 --> 2:44:35,760
they're coming from when they logged in

4551
2:44:35,760 --> 2:44:38,399
how long they've been idle and then what

4552
2:44:38,399 --> 2:44:40,080
again that's where that what came from

4553
2:44:40,080 --> 2:44:41,840
what they're actually doing so here i'm

4554
2:44:41,840 --> 2:44:43,840
using a gdmx session

4555
2:44:43,840 --> 2:44:46,319
looks like frank is sleeping on the job

4556
2:44:46,319 --> 2:44:48,479
frank judging you buddy

4557
2:44:48,479 --> 2:44:51,439
and then susie's just logged into a bash

4558
2:44:51,439 --> 2:44:53,279
terminal so these are tools that give

4559
2:44:53,279 --> 2:44
you information another one is pinky

4560
2:44 --> 2:44:57,760
which seems like a silly tool but it

4561
2:44:57,760 --> 2:45:00,319
replaces the older tool finger that has

4562
2:45:00,319 --> 2:45:02,240
kind of been abandoned about 10 years

4563
2:45:02,240 --> 2:45
ago but this gives you even more

4564
2:45 --> 2:45:06,479
information but not the what's going on

4565
2:45:06,479 --> 2:45:09,040
this gives you the login name full name

4566
2:45:09,040 --> 2:45:10,560
when they logged in how long they've

4567
2:45:10,560 --> 2:45:12,560
been idle where they're coming from and

4568
2:45:12,560 --> 2:45:14,399
a combination of these really usually

4569
2:45:14,399 --> 2:45:15,680
any one of them will give you the

4570
2:45:15,680 --> 2:45:17,520
information that you want but these are

4571
2:45:17,520 --> 2:45:19,680
all here to give you information on

4572
2:45:19,680 --> 2:45:21,200
who's logged into the system now if you

4573
2:45:21,200 --> 2:45:22,880
want further information about it you

4574
2:45:22,880 --> 2:45:25,600
could also do id susie and it will give

4575
2:45:25,600 --> 2:45:27,359
you information about susie's id

4576
2:45:27,359 --> 2:45:30,479
including her user id her primary group

4577
2:45:30,479 --> 2:45:32,720
id what groups she belongs to looks like

4578
2:45:32,720 --> 2:45:34,560
she only belongs to the susie group so

4579
2:45:34,560 --> 2:45:37,120
let's do an id on bob and yeah bob

4580
2:45:37,120 --> 2:45:38,800
belongs to a whole bunch of other groups

4581
2:45:38,800 --> 2:45:40,640
so it'll give you all of that and then

4582
2:45:40,640 --> 2:45:43,920
lastly lastly there's the command last

4583
2:45:43,920 --> 2:45:46,640
hahaha if you type last it gives you a

4584
2:45:46,640 --> 2:45:48,160
history of the people that have been

4585
2:45:48,160 --> 2:45:50,880
logged into the system recently so it

4586
2:45:50,880 --> 2:45:52,640
looks like we go back all the way to

4587
2:45:52,640 --> 2:45:55,040
march 7th here today's march 13th and i

4588
2:45:55,040 --> 2:45:56,479
logged in a bunch of times just so we

4589
2:45:56,479 --> 2:45:58,399
would get some results here and we can

4590
2:45:58,399 --> 2:46:00,560
see who logged in where they logged in

4591
2:46:00,560 --> 2:46:03,200
from and when they logged out or if

4592
2:46:03,200 --> 2:46:05,279
they're still logged in so you can see i

4593
2:46:05,279 --> 2:46:07,840
logged in at 1001 logged out at 1001 up

4594
2:46:07,840 --> 2:46:10,800
here logged in at 1003 still logged in

4595
2:46:10,800 --> 2:46
from the local host computer and that is

4596
2:46 --> 2:46
suzy so there's a lot of tools that you

4597
2:46 --> 2:46:17,840
can use to figure out who's logged into

4598
2:46:17,840 --> 2:46:19,439
your system how long they've been there

4599
2:46:19,439 --> 2:46:20,800
where they're coming from what they're

4600
2:46:20,800 --> 2:46:22,560
doing and these really might seem like

4601
2:46:22,560 --> 2:46:24,399
throwaway commands like why would i need

4602
2:46:24,399 --> 2:46:25,840
to figure out who's logged into the

4603
2:46:25,840 --> 2:46:27,840
system but knowing the simple little

4604
2:46:27,840 --> 2:46:30,960
tools like who and w and last can really

4605
2:46:30,960 --> 2:46:32,800
be convenient when you're tracking down

4606
2:46:32,800 --> 2:46:34,640
what's going on in your server who's

4607
2:46:34,640 --> 2:46:36,800
logged in who was logged in did somebody

4608
2:46:36,800 --> 2:46:38,560
log in bob said he logged in did he

4609
2:46:38,560 --> 2:46:40,479
really log in well check out last and

4610
2:46:40,479 --> 2:46:42,080
it'll tell you the point is there's a

4611
2:46:42,080 --> 2:46:43,439
bunch of tools that are available

4612
2:46:43,439 --> 2:46:45,840
that'll give you information on users on

4613
2:46:45,840 --> 2:46:47,680
your system whether they're logged in

4614
2:46:47,680 --> 2:46:49,439
not logged in or have been logged in in

4615
2:46:49,439 --> 2:46:51,359
the past

4616
2:46:51,359 --> 2:46:53,040
passwords and group memberships are

4617
2:46:53,040 --> 2:46:54,960
things in linux that are stored in text

4618
2:46:54,960 --> 2:46:56,880
files just like everything else but the

4619
2:46:56,880 --> 2:46:59,120
problem is we don't want people to have

4620
2:46:59,120 --> 2:47:01,680
access to our passwords and so there's

4621
2:47:01,680 --> 2:47
kind of this elegant system of shadow

4622
2:47 --> 2:47:05,520
files that has been invented this is

4623
2:47:05,520 --> 2:47
fairly recent in the world of technology

4624
2:47 --> 2:47:10,240
it used to be everything was stored in a

4625
2:47:10,240 --> 2:47:12,319
single file called etc password but

4626
2:47:12,319 --> 2:47:14,240
things have been changed now so that

4627
2:47:14,240 --> 2:47:16,880
everybody doesn't have access to seeing

4628
2:47:16,880 --> 2:47:19,200
the encrypted password so how it works

4629
2:47:19,200 --> 2:47:21,600
now is this let's say this is our user

4630
2:47:21,600 --> 2:47:24,479
bob now bob when he logs into a system

4631
2:47:24,479 --> 2:47:26,479
has to be able to see what his home

4632
2:47:26,479 --> 2:47:28,880
directory is so he needs to have access

4633
2:47:28,880 --> 2:47:31,040
to a lot of information about his

4634
2:47:31,040 --> 2:47:33,600
account however we don't want bob to

4635
2:47:33,600 --> 2:47:35,520
have access to everybody's encrypted

4636
2:47:35,520 --> 2:47:37,760
passwords so that's kept over in another

4637
2:47:37,760 --> 2:47:40,640
file called a shadow file so what we

4638
2:47:40,640 --> 2:47:42,319
have in the password file is we have

4639
2:47:42,319 --> 2:47:44,240
bob's username and then literally just

4640
2:47:44,240 --> 2:47:46,160
an x that takes the place of where the

4641
2:47:46,160 --> 2:47:48,800
password used to be stored and if this x

4642
2:47:48,800 --> 2:47:50,960
is here then the system knows okay i

4643
2:47:50,960 --> 2:47:52,720
need to go over and look in the shadow

4644
2:47:52,720 --> 2:47:55,359
file for the actual encrypted password

4645
2:47:55,359 --> 2:47:57,200
of bob and then it does system

4646
2:47:57,200 --> 2:47:59,840
authentication with root access as

4647
2:47:59,840 --> 2:48:02,640
opposed to bob's access which is to read

4648
2:48:02,640 --> 2:48:04,080
the password file

4649
2:48:04,080 --> 2:48:05,600
but he doesn't have access to

4650
2:48:05,600 --> 2:48:07,520
everybody's encrypted password the

4651
2:48:07,520 --> 2:48:09,520
reason we don't want that is if he were

4652
2:48:09,520 --> 2:48:11,920
to do like a brute force attack if he

4653
2:48:11,920 --> 2:48:14,240
had access to everybody's encrypted

4654
2:48:14,240 --> 2:48:16,080
password he could just keep hammering

4655
2:48:16,080 --> 2:48:18,080
away at it until he finally figured out

4656
2:48:18,080 --> 2:48:20,080
what the password was we don't want that

4657
2:48:20,080 --> 2:48:22,240
so we don't want every user to have

4658
2:48:22,240 --> 2:48:24,960
access we just want root or the system

4659
2:48:24,960 --> 2:48:27,439
to be able to authenticate and check out

4660
2:48:27,439 --> 2:48:29,520
you know the encrypted password files so

4661
2:48:29,520 --> 2:48:31,279
anyway there's a neat and elegant system

4662
2:48:31,279 --> 2:48:33,520
of how this works now notice obviously

4663
2:48:33,520 --> 2:48:35,920
the etc password file is readable by all

4664
2:48:35,920 --> 2:48:38,399
the et cetera shadow file is only

4665
2:48:38,399 --> 2:48:40,720
accessible by the root user but when it

4666
2:48:40,720 --> 2:48:42,800
comes to editing those there are special

4667
2:48:42,800 --> 2:48:44,640
tools to make sure that we do it

4668
2:48:44,640 --> 2:48:46,800
properly now first let's actually look

4669
2:48:46,800 --> 2:48:48,800
at the file so if we do an ls minus all

4670
2:48:48,800 --> 2:48:51,760
of etc pass sswd we're going to see that

4671
2:48:51,760 --> 2:48:54,319
sure enough it's owned by root and

4672
2:48:54,319 --> 2:48:56,479
everybody on the system can read it

4673
2:48:56,479 --> 2:48:58,080
right only root can write to it but

4674
2:48:58,080 --> 2:49:00,399
everybody can read it but if we look at

4675
2:49:00,399 --> 2:49:02,880
the etc shadow file we're going to see

4676
2:49:02,880 --> 2:49
that only root can write to it and only

4677
2:49 --> 2:49:07,840
people in the shadow group can read to

4678
2:49:07,840 --> 2:49:09,359
it everybody else in the system can't

4679
2:49:09,359 --> 2:49:11,359
even read it so our encrypted passwords

4680
2:49:11,359 --> 2:49:13,600
are protected now there's also if we do

4681
2:49:13,600 --> 2:49:15,680
ls minus l etc

4682
2:49:15,680 --> 2:49:17,600
group we'll see the same scenario where

4683
2:49:17,600 --> 2:49:20,399
this is the group definitions for users

4684
2:49:20,399 --> 2:49:22,399
on the system and the same settings

4685
2:49:22,399 --> 2:49:25,040
permission wise as etc password has and

4686
2:49:25,040 --> 2:49:26,960
if we do ls minus l

4687
2:49:26,960 --> 2:49:28,080
etc

4688
2:49:28,080 --> 2:49:30,640
g shadow we're gonna see it's the exact

4689
2:49:30,640 --> 2:49:32,960
same thing as the shadow file now groups

4690
2:49:32,960 --> 2:49:35,120
don't normally have passwords associated

4691
2:49:35,120 --> 2:49:37,279
with them but they can so the shadow

4692
2:49:37,279 --> 2:49:39,120
system does the same with the group file

4693
2:49:39,120 --> 2:49:41,439
as it does with the password file now if

4694
2:49:41,439 --> 2:49:43,439
we wanted to edit one of these files we

4695
2:49:43,439 --> 2:49:47,439
could do something like sudo vi etc pass

4696
2:49:47,439 --> 2:49:50,960
s wd and it's going to let us edit this

4697
2:49:50,960 --> 2:49:52,880
file using our text editor but this is

4698
2:49:52,880 --> 2:49:55,040
not the ideal way to go about it because

4699
2:49:55,040 --> 2:49:57,200
we want to do it the shadowy way right

4700
2:49:57,200 --> 2:49:59,200
we want to be able to edit it and then

4701
2:49:59,200 --> 2:50:02,080
be sure that the shadow file matches so

4702
2:50:02,080 --> 2:50:03,680
let's get out of here let's not make any

4703
2:50:03,680 --> 2:50:05,840
changes to properly edit these files

4704
2:50:05,840 --> 2:50:08,439
what you do is say sudo

4705
2:50:08,439 --> 2:50:11,520
vipw this is part of the shadow package

4706
2:50:11,520 --> 2:50:13,840
and it's going to ask us what editor we

4707
2:50:13,840 --> 2:50:15,359
want to use if you want to use nano this

4708
2:50:15,359 --> 2:50:16,720
is the easiest one like it says right

4709
2:50:16,720 --> 2:50:18,800
here easiest you can use this i prefer

4710
2:50:18,800 --> 2:50:20,399
to use vim so i'm just going to choose

4711
2:50:20,399 --> 2:50:22,479
selection number two but number one is

4712
2:50:22,479 --> 2:50:24,880
perfectly fine and it opens up and looks

4713
2:50:24,880 --> 2:50:26,720
exactly the same and we make changes

4714
2:50:26,720 --> 2:50:29,200
here and we could like go down here

4715
2:50:29,200 --> 2:50:30,880
you'll notice all the things about bob

4716
2:50:30,880 --> 2:50:32,560
are listed in this line right here's his

4717
2:50:32,560 --> 2:50:34,640
username his password is just a

4718
2:50:34,640 --> 2:50:36,479
placeholder here as an x because the

4719
2:50:36,479 --> 2:50:37,920
actual encrypted password is in the

4720
2:50:37,920 --> 2:50:40,640
shadow file but his user id is group id

4721
2:50:40,640 --> 2:50:43,040
his full name his home directory his

4722
2:50:43,040 --> 2:50:44,800
shell we can make any changes we wanted

4723
2:50:44,800 --> 2:50:47,600
here and then we would just go and save

4724
2:50:47,600 --> 2:50:49,040
the changes

4725
2:50:49,040 --> 2:50:50,319
and this is what it would tell us it

4726
2:50:50,319 --> 2:50:52,240
would say okay you've modified the etc

4727
2:50:52,240 --> 2:50:54,399
password file you may want to modify the

4728
2:50:54,399 --> 2:50:56,800
shadow file too and to do that you do

4729
2:50:56,800 --> 2:50:59,600
vipw dash s for shadow so the same thing

4730
2:50:59,600 --> 2:51:00,720
we would say

4731
2:51:00,720 --> 2:51:02,880
sudo vi pw

4732
2:51:02,880 --> 2:51:04,560
dash s

4733
2:51:04,560 --> 2:51:06,880
and now this is the actual shadow file

4734
2:51:06,880 --> 2:51:08,880
that we're editing and we can go through

4735
2:51:08,880 --> 2:51:10,319
and if we wanted to make changes here

4736
2:51:10,319 --> 2:51:12,720
this is bob's encrypted password now

4737
2:51:12,720 --> 2:51:15,200
this is obviously not bob's plain text

4738
2:51:15,200 --> 2:51:16,880
password his plain text password is just

4739
2:51:16,880 --> 2:51:18,560
the word bob we know that

4740
2:51:18,560 --> 2:51:21,040
but this is what it's like encrypted but

4741
2:51:21,040 --> 2:51:22,880
since this is only accessible to root

4742
2:51:22,880 --> 2:51:24,160
there's nobody who's going to be able to

4743
2:51:24,160 --> 2:51:25,840
do a brute force attack to try to

4744
2:51:25,840 --> 2:51:27,120
decrypt this

4745
2:51:27,120 --> 2:51:28,880
because they don't have access to the

4746
2:51:28,880 --> 2:51:31,040
passwords encrypted themselves so we'll

4747
2:51:31,040 --> 2:51:32,800
get out of here and now the exact same

4748
2:51:32,800 --> 2:51:35,200
thing with the group password or the

4749
2:51:35,200 --> 2:51:37,200
group file in the group shadow file is

4750
2:51:37,200 --> 2:51:40,560
done too we can say sudo vi gr and this

4751
2:51:40,560 --> 2:51:43,520
is going to edit the group file and sudo

4752
2:51:43,520 --> 2:51:45,120
vi gr

4753
2:51:45,120 --> 2:51:47,680
s and that's going to edit the g shadow

4754
2:51:47,680 --> 2:51:49,439
file all right so that's the proper way

4755
2:51:49,439 --> 2:51:51,760
to go about editing those files manually

4756
2:51:51,760 --> 2:51:53,439
if you man if you edit these files it's

4757
2:51:53,439 --> 2:51:55,120
going to do the same thing as if we did

4758
2:51:55,120 --> 2:51:57,359
like user mod and changed somebody's

4759
2:51:57,359 --> 2:51:59,040
home directory it just does it by

4760
2:51:59,040 --> 2:52:01,200
editing the underlying configuration

4761
2:52:01,200 --> 2:52:03,760
files so yes group and password files

4762
2:52:03,760 --> 2:52:05,439
are still just text files but there is

4763
2:52:05,439 --> 2:52:08,160
this elegant shadow system that allows

4764
2:52:08,160 --> 2:52
us to make sure that the right people

4765
2:52 --> 2:52:11,760
have access to the encrypted passwords

4766
2:52:11,760 --> 2:52:13,439
and not everyone on the system can see

4767
2:52:13,439 --> 2:52:16,720
everyone else's encrypted passwords

4768
2:52:16,720 --> 2:52:18,640
quotas are the way that we make sure

4769
2:52:18,640 --> 2:52
users or groups don't overuse the hard

4770
2:52 --> 2:52:23,680
drive we don't want a particular user a

4771
2:52:23,680 --> 2:52:25,439
particular group to use up too much of a

4772
2:52:25,439 --> 2:52:27,520
hard drive and stop other people from

4773
2:52:27,520 --> 2:52:29,600
saving files now there's soft quota

4774
2:52:29,600 --> 2:52:31,359
limits and hard quota limits the

4775
2:52:31,359 --> 2:52:33,680
difference is with a soft limit you're

4776
2:52:33,680 --> 2:52:35,279
warned every day hey you've gone over

4777
2:52:35,279 --> 2:52:36,800
your limit hey you've gone over your

4778
2:52:36,800 --> 2:52:38,640
limit whereas if you reach the hard

4779
2:52:38,640 --> 2:52:41,120
limit you're no longer able to save

4780
2:52:41,120 --> 2:52:42,800
files at all now there's a couple things

4781
2:52:42,800 --> 2:52:44,240
that we have to do to get our system

4782
2:52:44,240 --> 2:52:47,120
ready for using quotas and keeping track

4783
2:52:47,120 --> 2:52:48,800
of things but the first thing is we have

4784
2:52:48,800 --> 2:52:50,319
to make sure that our partition is

4785
2:52:50,319 --> 2:52:53,200
mounted correctly so on our system here

4786
2:52:53,200 --> 2:52:56,240
i have a disk mounted or a 10 gigabyte

4787
2:52:56,240 --> 2:52:58,160
drive mounted on

4788
2:52:58,160 --> 2:52:59,359
mnt

4789
2:52:59,359 --> 2:53:02,960
disk okay now if we look into our etc fs

4790
2:53:02,960 --> 2:53:04,960
tab file i'm going to show you how you

4791
2:53:04,960 --> 2:53:07,120
mount it so that quotas are enabled so

4792
2:53:07,120 --> 2:53:09,840
here's our drive it's dev sdb1 and it's

4793
2:53:09,840 --> 2:53:13,840
mounted on mnt disk it's ext4 i've used

4794
2:53:13,840 --> 2:53:15,840
default mounting options and then i've

4795
2:53:15,840 --> 2:53:19,279
added a comma and usr quota now we could

4796
2:53:19,279 --> 2:53:21,760
also put grp quota we put another comma

4797
2:53:21,760 --> 2:53:24,240
and grp quota i'm just going to do user

4798
2:53:24,240 --> 2:53:26,240
quotas group quotas work the same way so

4799
2:53:26,240 --> 2:53:27,520
we'll learn one and we'll know how to

4800
2:53:27,520 --> 2:53:29,279
use both but we have to make sure that

4801
2:53:29,279 --> 2:53:31,040
it's mounted this way so if you're

4802
2:53:31,040 --> 2:53:32,479
making this change you want going to

4803
2:53:32,479 --> 2:53:33,920
want to reboot your system to make sure

4804
2:53:33,920 --> 2:53:36,160
that it actually takes effect

4805
2:53:36,160 --> 2:53:38,080
and then if we type mount we're gonna

4806
2:53:38,080 --> 2:53:40,960
see that sure enough mount disk or mnt

4807
2:53:40,960 --> 2:53:43,760
disk is mounted with quotas enabled

4808
2:53:43,760 --> 2:53:47,359
specifically user quota management okay

4809
2:53:47,359 --> 2:53:49,520
so we know that the drive is able to

4810
2:53:49,520 --> 2:53:51,920
support it but out of the box quotas are

4811
2:53:51,920 --> 2:53:55,120
not turned on so what we need to do is

4812
2:53:55,120 --> 2:53:58,479
first of all scan the existing drive for

4813
2:53:58,479 --> 2:54:00,800
files owned by a particular user so we

4814
2:54:00,800 --> 2:54:04,399
need to actually do sudo quota check

4815
2:54:04,399 --> 2:54:06,720
dash a for all partitions that support

4816
2:54:06,720 --> 2:54:10,720
quotas dash u for user owned files press

4817
2:54:10,720 --> 2:54
enter it's going to go through it's

4818
2:54 --> 2:54:13,840
going to check our drive and now if we

4819
2:54:13,840 --> 2:54:15,600
look in mnt

4820
2:54:15,600 --> 2:54:16,800
disk

4821
2:54:16,800 --> 2:54:18,160
we're going to see sure enough now

4822
2:54:18,160 --> 2:54:20,160
there's a quota file that has been

4823
2:54:20,160 --> 2:54:22,240
created and it shows just you know all

4824
2:54:22,240 --> 2:54:23,840
the files on the drive who owns them

4825
2:54:23,840 --> 2:54:25,359
which is none right now but we're going

4826
2:54:25,359 --> 2:54:26,800
to change that in a minute now the other

4827
2:54:26,800 --> 2:54:28,399
thing is so that prepares the drive but

4828
2:54:28,399 --> 2:54
we actually have to turn quotas on so

4829
2:54 --> 2:54:32,720
we're going to say sudo quota on

4830
2:54:32,720 --> 2:54:35,359
dash a for all supported partitions

4831
2:54:35,359 --> 2:54:38,160
so now quota quota ing

4832
2:54:38,160 --> 2:54:40,560
is actually turned on but if we want to

4833
2:54:40,560 --> 2:54:42,640
set a particular quota for a user we're

4834
2:54:42,640 --> 2:54:46,479
going to have to use ed quota so sudo ed

4835
2:54:46,479 --> 2:54:48,960
quota and i want to do this for the user

4836
2:54:48,960 --> 2:54:50,720
bob on our system so we're going to do

4837
2:54:50,720 --> 2:54:51,680
it for

4838
2:54:51,680 --> 2:54:53,600
bob and then we get this list now it's

4839
2:54:53,600 --> 2:54:54,880
going to show us all the file systems

4840
2:54:54,880 --> 2:54:56,800
that support quotas in our case that's

4841
2:54:56,800 --> 2:54:59,600
just this one devsdb1 now i have to

4842
2:54:59,600 --> 2:55:01,520
explain really quickly there's two kinds

4843
2:55:01,520 --> 2:55:03,840
of quotas we can do we can set up quotas

4844
2:55:03,840 --> 2:55:06,560
for inodes or we can set up quotas for

4845
2:55:06,560 --> 2:55:10,319
block usage now an inode means a file so

4846
2:55:10,319 --> 2:55:13,200
we could say how many files a person can

4847
2:55:13,200 --> 2:55:15,760
store on a particular partition but this

4848
2:55:15,760 --> 2:55:17,359
isn't all that useful right i mean what

4849
2:55:17,359 --> 2:55:19,760
if they have two files but those two

4850
2:55:19,760 --> 2:55:22,399
files are like 27 gigabytes each so

4851
2:55:22,399 --> 2:55:24,880
rather than set limits on inodes i tend

4852
2:55:24,880 --> 2:55:27,279
to like to set them based on blocks now

4853
2:55:27,279 --> 2:55:30,160
by default these are one kilobyte blocks

4854
2:55:30,160 --> 2:55:32,240
so this zero means how many are

4855
2:55:32,240 --> 2:55:33,600
currently in use and there's nothing on

4856
2:55:33,600 --> 2:55:35,600
the drive owned by bob so that's set to

4857
2:55:35,600 --> 2:55:36,960
zero right now

4858
2:55:36,960 --> 2:55:38,720
but i'm going to make some changes here

4859
2:55:38,720 --> 2:55:42,399
i'm going to say i want the soft limit

4860
2:55:42,399 --> 2:55:44,399
to be 500 kilobytes

4861
2:55:44,399 --> 2:55:47,439
and i want the hard limit to be 1000

4862
2:55:47,439 --> 2:55:49,680
kilobytes okay or like one megabyte this

4863
2:55:49,680 --> 2:55:51,200
is not practical number you'd probably

4864
2:55:51,200 --> 2:55:52,880
do something bigger in real life but

4865
2:55:52,880 --> 2:55:56,080
we're going to save this say yes and now

4866
2:55:56,080 --> 2:55:59,600
as bob if we go over to mount disk ls

4867
2:55:59,600 --> 2:56:00,640
we're going to see that's in there now

4868
2:56:00,640 --> 2:56:02,880
there's no usage currently but let's say

4869
2:56:02,880 --> 2:56:05,279
i were to create a file now to do that

4870
2:56:05,279 --> 2:56:06,720
i'm going to use dd it's okay if you

4871
2:56:06,720 --> 2:56:08,800
don't use the dd command basically we're

4872
2:56:08,800 --> 2:56
going to say an input file of dev zero

4873
2:56 --> 2:56:16,240
output file of file one block size

4874
2:56:16,240 --> 2:56:18,800
equals one kilobyte so that we can know

4875
2:56:18,800 --> 2:56:20,640
exactly how many kilobytes we're using

4876
2:56:20,640 --> 2:56:22,160
up and

4877
2:56:22,160 --> 2:56:24,319
count equals let's say 400 so this

4878
2:56:24,319 --> 2:56:26,319
should make a 400 kilobyte file if i

4879
2:56:26,319 --> 2:56:28,560
press enter and do ls minus l we're

4880
2:56:28,560 --> 2:56:30,399
going to see sure enough we have a 400

4881
2:56:30,399 --> 2:56:32,880
kilobyte file on here and this is fine

4882
2:56:32,880 --> 2:56:34,800
this isn't meeting our quota at all we

4883
2:56:34,800 --> 2:56:36,560
haven't done anything bad we're not even

4884
2:56:36,560 --> 2:56:38,319
up to our soft quota but if we do this

4885
2:56:38,319 --> 2:56:39,680
again i'm just going to push the up

4886
2:56:39,680 --> 2:56:42,560
arrow and change this to file 2 and

4887
2:56:42,560 --> 2:56:44,399
press enter okay it's done the same

4888
2:56:44,399 --> 2:56:47,040
thing we do ls minus l now there's 800

4889
2:56:47,040 --> 2:56:49,760
kilobytes stored on this particular disk

4890
2:56:49,760 --> 2:56:51,600
what this means is it hasn't stopped us

4891
2:56:51,600 --> 2:56:53,520
from creating it but every day we're

4892
2:56:53,520 --> 2:56:54,880
going to get an email from the system

4893
2:56:54,880 --> 2:56:57,439
that says uh hey you've gone over your

4894
2:56:57,439 --> 2:56:58,880
soft limit you really need to delete

4895
2:56:58,880 --> 2:57:01,279
some files and we'll maybe do that maybe

4896
2:57:01,279 --> 2:57:03,120
we won't do that but here's what happens

4897
2:57:03,120 --> 2:57:06,240
if we try to create another 400 kilobyte

4898
2:57:06,240 --> 2:57:08,560
file which will take us over the limit

4899
2:57:08,560 --> 2:57:11,040
right because 400 plus 400 plus 400

4900
2:57:11,040 --> 2:57:13,359
would be 1200 but we only have a

4901
2:57:13,359 --> 2:57:15,520
thousand kilobyte limit so what's gonna

4902
2:57:15,520 --> 2:57:17,520
happen if we press enter it says that

4903
2:57:17,520 --> 2:57:19,600
there's an error writing file three the

4904
2:57:19,600 --> 2:57:21,840
disk quota is exceeded so let's do ls

4905
2:57:21,840 --> 2:57:23,439
minus l and see what happened so it

4906
2:57:23,439 --> 2:57:24,560
looks like it went along and it was

4907
2:57:24,560 --> 2:57:26,160
creating fine creating fine it got to

4908
2:57:26,160 --> 2:57:28,479
200 kilobytes and all of a sudden it

4909
2:57:28,479 --> 2:57
couldn't write anymore and that makes

4910
2:57 --> 2:57:33,120
sense because 800 or 400 plus 400 is 800

4911
2:57:33,120 --> 2:57:35,439
plus 200 it is a thousand so we hit our

4912
2:57:35,439 --> 2:57
hard limit and that's exactly how quotas

4913
2:57 --> 2:57:40,080
work on the system once quotas are

4914
2:57:40,080 --> 2:57:42,319
turned on it's really a hands-off kind

4915
2:57:42,319 --> 2:57:43,680
of thing they take care of themselves

4916
2:57:43,680 --> 2:57:45,680
the emails go out automatically every

4917
2:57:45,680 --> 2:57:47,439
day if the user goes over their soft

4918
2:57:47,439 --> 2:57:49,520
quota and at the hard quota it stops

4919
2:57:49,520 --> 2:57:51,840
them no matter what so quotas are easy

4920
2:57:51,840 --> 2:57:54,240
to set up once you remember to use quota

4921
2:57:54,240 --> 2:57:56,160
on to turn it on make sure that it's

4922
2:57:56,160 --> 2:57:59,040
mounted with the proper options and run

4923
2:57:59,040 --> 2:58:00,880
that initial quota check so that it

4924
2:58:00,880 --> 2:58:02,560
knows what files are on there so it

4925
2:58:02,560 --> 2:58:05,120
knows when it is or isn't getting close

4926
2:58:05,120 --> 2:58:07,680
to the actual quota that you set

4927
2:58:07,680 --> 2:58:10,160
user profiles are where initial settings

4928
2:58:10,160 --> 2:58:12,720
are set for a particular user like if if

4929
2:58:12,720 --> 2:58:14,640
they're going to set up like aliases or

4930
2:58:14,640 --> 2:58:16,319
they need their path variables those are

4931
2:58:16,319 --> 2:58:18,160
the sort of things that profiles will do

4932
2:58:18,160 --> 2:58:20,479
and there are system-wide profiles and

4933
2:58:20,479 --> 2:58:23,200
also individual profiles and it can be a

4934
2:58:23,200 --> 2:58:25,520
little bit overwhelming because not

4935
2:58:25,520 --> 2:58:27,279
every linux system is the same now there

4936
2:58:27,279 --> 2:58:29,040
are some commonalities usually there's

4937
2:58:29,040 --> 2:58:31,920
an etc environment file and that file

4938
2:58:31,920 --> 2:58:32,720
will

4939
2:58:32,720 --> 2:58:35,359
often but not always set up the path

4940
2:58:35,359 --> 2:58:37,359
variables so that the users who log in

4941
2:58:37,359 --> 2:58:38,880
get a particular

4942
2:58:38,880 --> 2:58:41,439
path set up now there's almost always an

4943
2:58:41,439 --> 2:58:44,960
etc profile in the system-wide file in a

4944
2:58:44,960 --> 2:58:48,080
profile is something that is run on a

4945
2:58:48,080 --> 2:58
login shell so like the very first time

4946
2:58 --> 2:58:51,520
you log into a system like if you're

4947
2:58:51,520 --> 2:58:53,120
logging into a gui

4948
2:58:53,120 --> 2:58:54,720
that first time you log in you will

4949
2:58:54,720 --> 2:58:56,319
execute the profile these are settings

4950
2:58:56,319 --> 2:58:58,720
that only need to be executed one time

4951
2:58:58,720 --> 2:59:00,319
like it doesn't matter if you're going

4952
2:59:00,319 --> 2:59:02,479
to open a new terminal you only need to

4953
2:59:02,479 --> 2:59:03,920
set these settings

4954
2:59:03,920 --> 2:59:06,720
one time and then there's also going to

4955
2:59:06,720 --> 2:59:08,960
be one of these not both of these it's

4956
2:59:08,960 --> 2:59:10,479
usually either one or the other either

4957
2:59:10,479 --> 2:59:14,880
the etc bash rc or etc bash dot bash rc

4958
2:59:14,880 --> 2:59:17,279
uh this one is pretty common in ubuntu

4959
2:59:17,279 --> 2:59:19,760
this one is pretty common in centos but

4960
2:59:19,760 --> 2:59:21,359
nonetheless these are they serve the

4961
2:59:21,359 --> 2:59:22,560
same function so you're going to have

4962
2:59:22,560 --> 2:59:25,439
one or the other and these are profile

4963
2:59:25,439 --> 2:59:27,359
settings that need to be set every time

4964
2:59:27,359 --> 2:59:28,800
you open a shell so let's say you're

4965
2:59:28,800 --> 2:59:30,640
already logged in to

4966
2:59:30,640 --> 2:59:32,720
x windows like in a gui session you're

4967
2:59:32,720 --> 2:59:34,479
in there and you click on an icon to

4968
2:59:34,479 --> 2:59:36,880
open up a new terminal window well

4969
2:59:36,880 --> 2:59:38,880
that's not considered a login shell this

4970
2:59:38,880 --> 2:59:41,120
is just considered a sub shell of your

4971
2:59:41,120 --> 2:59:43,680
main system login so you will not

4972
2:59:43,680 --> 2:59:46,240
execute a profile you will only execute

4973
2:59:46,240 --> 2:59:49,760
your bash rc now this is again system

4974
2:59:49,760 --> 2:59:51,600
wide so that happens to everybody when

4975
2:59:51,600 --> 2:59:53,600
you log in you get the systemid profiles

4976
2:59:53,600 --> 2:59:56,640
applied and then every individual has

4977
2:59:56,640 --> 2:59:59,040
the possibility to have these individual

4978
2:59:59,040 --> 3:00:00,960
files in their home folders now they all

4979
3:00:00,960 --> 3:00:02,960
start with a dot so they're all hidden

4980
3:00:02,960 --> 3:00:04,800
you have to do ls minus a if you want to

4981
3:00:04,800 --> 3:00:05,760
see them

4982
3:00:05,760 --> 3:00
but these are the same things up here

4983
3:00 --> 3:00:09,600
it's just if you have any changes or

4984
3:00:09,600 --> 3:00:10,880
additions you want to make to the

4985
3:00:10,880 --> 3:00:12,560
system-wide settings you put them in

4986
3:00:12,560 --> 3:00:14,960
your own personal folder and you put it

4987
3:00:14,960 --> 3:00:17,359
in like bash rc and that'll run every

4988
3:00:17,359 --> 3:00:18,960
time you open a sub shell everything in

4989
3:00:18,960 --> 3:00:21,040
here will be set up and then the dot

4990
3:00:21,040 --> 3:00:23,520
profile or bash underscore profile

4991
3:00:23,520 --> 3:00:25,200
depending on which system you have

4992
3:00:25,200 --> 3:00:26,240
you're going to have one or the other

4993
3:00:26,240 --> 3:00:28,800
one of these but this is executed

4994
3:00:28,800 --> 3:00:30,479
the very first time you log in just like

4995
3:00:30,479 --> 3:00:32,640
the system-wide profile your personal

4996
3:00:32,640 --> 3:00:35,120
profile only gets executed that initial

4997
3:00:35,120 --> 3:00:37,520
time when you log into the system any

4998
3:00:37,520 --> 3:00:40,399
sub shells will only apply the bashrc

4999
3:00:40,399 --> 3:00:41,840
files but that's the way it works i'll

5000
3:00:41,840 --> 3:00
show you really quick how it's set up on

5001
3:00 --> 3:00:45,120
a system

5002
3:00:45,120 --> 3:00:46,640
but the hierarchy is really the

5003
3:00:46,640 --> 3:00:48,960
important thing to understand now this

5004
3:00:48,960 --> 3:00:51,600
is bob's home folder i did an ls minus

5005
3:00:51,600 --> 3:00:53,439
la so you can see all of the things in

5006
3:00:53,439 --> 3:00:56,479
here he has a dot bash rc file and he

5007
3:00:56,479 --> 3:00:59,279
also has a dot profile that means that

5008
3:00:59,279 --> 3:01:01,359
these are going to be applied after the

5009
3:01:01,359 --> 3:01:03,200
system-wide settings because the

5010
3:01:03,200 --> 3:01:04,479
system-wide settings are given to

5011
3:01:04,479 --> 3:01:06,160
everybody and then any personalizations

5012
3:01:06,160 --> 3:01:07,600
like if you have an alias that you want

5013
3:01:07,600 --> 3:01:09,120
to set on your own you would put it in

5014
3:01:09,120 --> 3:01:12,720
your own personal bashrc file now inside

5015
3:01:12,720 --> 3:01:16,319
etc there are those common files like ls

5016
3:01:16,319 --> 3:01:18,880
minus l grep4

5017
3:01:18,880 --> 3:01:21,520
profile we're going to see we have etc

5018
3:01:21,520 --> 3:01:25,120
profile and also etc profile.d this is a

5019
3:01:25,120 --> 3:01:27,279
folder if we go in there we're going to

5020
3:01:27,279 --> 3:01:29,680
see there's a bunch of sh scripts all of

5021
3:01:29,680 --> 3:01:32,479
these are included in the dot profile in

5022
3:01:32,479 --> 3:01:34,160
fact i'll show you what i mean vi dot

5023
3:01:34,160 --> 3:01:35,200
dot

5024
3:01:35,200 --> 3:01:37,279
let's look at that system-wide profile

5025
3:01:37,279 --> 3:01:38,560
file

5026
3:01:38,560 --> 3:01:40,160
and if we look all the way down on the

5027
3:01:40,160 --> 3:01:43,359
bottom here it's going to call in all of

5028
3:01:43,359 --> 3:01:46,560
those files inside profile.d so when i

5029
3:01:46,560 --> 3:01:48,640
say that the profile is executed by

5030
3:01:48,640 --> 3:01:51,600
everybody not only etc profile but also

5031
3:01:51,600 --> 3:01:55,040
etc profile.d everything in here is

5032
3:01:55,040 --> 3:01:57,600
going to be executed as well to every

5033
3:01:57,600 --> 3:01:59,760
user on the system now there's a couple

5034
3:01:59,760 --> 3:02:01,760
important things to remember don't worry

5035
3:02:01,760 --> 3:02:03,920
so much about what exactly is the name

5036
3:02:03,920 --> 3:02:05,520
of the file when you look in the etc

5037
3:02:05,520 --> 3:02:07,359
folder you're either going to find an

5038
3:02:07,359 --> 3:02:11,520
etc bash rc file or an etc bash dot bash

5039
3:02:11,520 --> 3:02:12,640
rc file

5040
3:02:12,640 --> 3:02:14,160
don't worry too much about which system

5041
3:02:14,160 --> 3:02
has which whichever one is there is the

5042
3:02 --> 3:02:18,399
one that you need to use now as far as

5043
3:02:18,399 --> 3:02:20,479
the hierarchy goes it's important to

5044
3:02:20,479 --> 3:02:22,479
remember that the system-wide stuff is

5045
3:02:22,479 --> 3:02:24,560
executed for everybody so everything in

5046
3:02:24,560 --> 3:02:27,279
etc is executed for all users and then

5047
3:02:27,279 --> 3:02:29,439
if you have changes or additions you put

5048
3:02:29,439 --> 3:02:32,319
them in your personal dot profile or dot

5049
3:02:32,319 --> 3:02:35,120
bash rc user profiles are pretty easy to

5050
3:02:35,120 --> 3:02:36,800
track down and once you understand how

5051
3:02:36,800 --> 3:02:38,800
the system-wide and individual settings

5052
3:02:38,800 --> 3:02:40,720
work it's a snap to figure out which

5053
3:02:40,720 --> 3:02:42,560
comes first

5054
3:02:42,560 --> 3:02:44,080
if you're working on the command line a

5055
3:02:44,080 --> 3:02:46,160
text editor is going to be an invaluable

5056
3:02:46,160 --> 3:02:47,840
tool because pretty much everything in

5057
3:02:47,840 --> 3:02:50,640
linux is text based now you should use

5058
3:02:50,640 --> 3:02:53,359
nano nano is the editor you should use

5059
3:02:53,359 --> 3:02:55,680
it's a wonderfully simplistic

5060
3:02:55,680 --> 3:02:58,880
straightforward intuitive text editor

5061
3:02:58,880 --> 3:03:01,680
that works just fine and then there's vi

5062
3:03:01,680 --> 3:03:04,960
vi is clunky it's hard to use it doesn't

5063
3:03:04,960 --> 3:03:07,200
make a whole lot of sense and it's the

5064
3:03:07,200 --> 3:03:10,399
editor that i use almost exclusively now

5065
3:03:10,399 --> 3:03:12,479
i know that doesn't make any sense but

5066
3:03:12,479 --> 3:03:15,279
here's the deal vi has been around for a

5067
3:03:15,279 --> 3:03:16,960
very very long time like since the

5068
3:03:16,960 --> 3:03:19,200
beginning so even though it's difficult

5069
3:03:19,200 --> 3:03:21,840
to use i've managed to learn to use it

5070
3:03:21,840 --> 3:03:23,840
and it's just what my fingers do with

5071
3:03:23,840 --> 3:03:26,720
muscle memory so i encourage you use

5072
3:03:26,720 --> 3:03:29,520
nano unless you've been using vi long

5073
3:03:29,520 --> 3:03:31,840
enough that it's the only option that

5074
3:03:31,840 --> 3:03:34,319
seems to make sense now there is one

5075
3:03:34,319 --> 3:03:36,240
scenario that you may want to learn at

5076
3:03:36,240 --> 3:03:38,240
least the basics of vi

5077
3:03:38,240 --> 3:03:39,840
sometimes you're going to come across a

5078
3:03:39,840 --> 3:03:42,399
system that doesn't have nano installed

5079
3:03:42,399 --> 3:03:44,640
most systems do but if you end up on a

5080
3:03:44,640 --> 3:03:47,920
system that only has vi these couple

5081
3:03:47,920 --> 3:03:50,240
commands are going to kind of save your

5082
3:03:50,240 --> 3:03:52,640
bacon so here's the deal this is what

5083
3:03:52,640 --> 3:03:55,200
makes vi so confusing there are two

5084
3:03:55,200 --> 3:03:57,439
modes there's command mode which is what

5085
3:03:57,439 --> 3:04:00,080
it starts in an insert mode which is

5086
3:04:00,080 --> 3:04:02,560
what you use when you actually type text

5087
3:04:02,560 --> 3:04:05,040
now the way that i can kind of describe

5088
3:04:05,040 --> 3:04:07,200
this is if you're sitting down and

5089
3:04:07,200 --> 3:04:09,840
typing you're going to be in insert mode

5090
3:04:09,840 --> 3:04:11,680
because insert mode is where you insert

5091
3:04:11,680 --> 3:04
text and delete text and use your arrow

5092
3:04 --> 3:04:16,240
keys to you know go around and change

5093
3:04:16,240 --> 3:04:19,040
text but then if you need to do some

5094
3:04:19,040 --> 3:04:20,399
command

5095
3:04:20,399 --> 3:04:23,520
like save or quit or anything like that

5096
3:04:23,520 --> 3:04:25,359
you're gonna go into command mode and

5097
3:04:25,359 --> 3:04:27,200
the way i think about it is let's say

5098
3:04:27,200 --> 3:04:29,840
you are on a standard word processor if

5099
3:04:29,840 --> 3:04:33,279
you're typing you're in insert mode if

5100
3:04:33,279 --> 3:04:34,479
all of a sudden you need to reach for

5101
3:04:34,479 --> 3:04:36,960
the mouse and click on something

5102
3:04:36,960 --> 3:04:38,800
you're going to be in command mode so

5103
3:04:38,800 --> 3:04:40,720
while it's not a perfect analogy if you

5104
3:04:40,720 --> 3:04:42,880
want to do something like save you're

5105
3:04:42,880 --> 3:04:44,720
going to want to go into command mode so

5106
3:04:44,720 --> 3:04:46,399
that you can save and quit now since

5107
3:04:46,399 --> 3:04:49,359
there's no mouse it's all still text

5108
3:04:49,359 --> 3:04:51,600
things that you're doing but think

5109
3:04:51,600 --> 3:04:53,600
mentally okay i'm in the mode where i'd

5110
3:04:53,600 --> 3:04:56,319
be using my mouse to save things instead

5111
3:04:56,319 --> 3:04:58,960
of just typing out text now to go back

5112
3:04:58,960 --> 3:05:01,200
and forth that can be confusing too so

5113
3:05:01,200 --> 3:05:03,760
you start out when you open vi you're in

5114
3:05:03,760 --> 3:05:05,760
command mode if you want to start typing

5115
3:05:05,760 --> 3:05:08,640
something you press either i for insert

5116
3:05:08,640 --> 3:05:10,880
or a for append meaning like do you want

5117
3:05:10,880 --> 3:05:13,040
to insert right where the cursor is or

5118
3:05:13,040 --> 3:05:14,720
to the right of where the cursor is but

5119
3:05:14,720 --> 3:05
either one is going to work fine so

5120
3:05 --> 3:05:18,880
either i or a and then if you want to

5121
3:05:18,880 --> 3:05:20,240
get back

5122
3:05:20,240 --> 3:05:23,279
into command mode you press escape so

5123
3:05:23,279 --> 3:05:25,120
those are your magic keys to go back and

5124
3:05:25,120 --> 3:05:28,240
forth right i or a i usually use i to go

5125
3:05:28,240 --> 3:05:30,560
into your typing text mode or insert

5126
3:05:30,560 --> 3:05:33,279
mode escape to go back so that back and

5127
3:05:33,279 --> 3:05:35,279
forth that's how it works

5128
3:05:35,279 --> 3:05:39,439
now the actual commands to save or quit

5129
3:05:39,439 --> 3:05:42,080
or save and quit are right here and they

5130
3:05:42,080 --> 3:05:43,760
may not make sense but if you're in

5131
3:05:43,760 --> 3:05:47,680
command mode you're going to press colon

5132
3:05:47,680 --> 3:05:50,960
and then type w and then q

5133
3:05:50,960 --> 3:05:52,479
and press enter that's going to save

5134
3:05:52,479 --> 3:05:54,640
your document and quit a lot of times

5135
3:05:54,640 --> 3:05:57,840
people get stuck in vi and have no idea

5136
3:05:57,840 --> 3:06:00,399
how to get out it can be so frustrating

5137
3:06:00,399 --> 3:06
so this will get you out also if you

5138
3:06 --> 3:06
want to quit without saving like you've

5139
3:06 --> 3:06:05,439
accidentally made changes and you didn't

5140
3:06:05,439 --> 3:06:08,160
mean to you press escape again to get

5141
3:06:08,160 --> 3:06:10,720
into command mode and then you press

5142
3:06:10,720 --> 3:06:12,560
colon q

5143
3:06:12,560 --> 3:06:14,720
exclamation point and press enter and

5144
3:06:14,720 --> 3:06:17,359
that will that will exit without saving

5145
3:06:17,359 --> 3:06:18,399
and then if you just want to save

5146
3:06:18,399 --> 3:06:20,080
halfway through a document you can just

5147
3:06:20,080 --> 3:06:22,319
do colon w enter and it's going to save

5148
3:06:22,319 --> 3:06:24,399
but you'll stay in then you'll press i

5149
3:06:24,399 --> 3:06:26,880
to go back into insert mode and continue

5150
3:06:26,880 --> 3:06:28,800
making edits i'll show you really

5151
3:06:28,800 --> 3:06:30,880
quickly well i'll show you what nano is

5152
3:06:30,880 --> 3:06:32,560
and then i'll show you vi just so you

5153
3:06:32,560 --> 3:06:34,640
can see it in practice like i said

5154
3:06:34,640 --> 3:06
almost every distribution is going to

5155
3:06 --> 3:06
have both nano and vi so i'll show you

5156
3:06 --> 3:06:39,840
nano first if we do an ls we'll see i

5157
3:06:39,840 --> 3:06:41,439
have this text file dot

5158
3:06:41,439 --> 3:06:43,720
so if you just type

5159
3:06:43,720 --> 3:06:45,520
nanotextfile.txt it's going to open the

5160
3:06:45,520 --> 3:06:47,279
editor with this and you can just use

5161
3:06:47,279 --> 3:06:49,359
arrow keys and you can start editing

5162
3:06:49,359 --> 3:06:51,200
right away this is like you would expect

5163
3:06:51,200 --> 3:06:53,600
any text editor to work okay so press

5164
3:06:53,600 --> 3:06:55,439
enter it's going to insert blank lines

5165
3:06:55,439 --> 3:06:57,279
and then if you want to save you can

5166
3:06:57,279 --> 3:07:00,240
look right down here we have control x

5167
3:07:00,240 --> 3:07:02,399
to exit and you can do other things too

5168
3:07:02,399 --> 3:07:03,840
there's all sorts of commands but i'm

5169
3:07:03,840 --> 3:07:05,279
going to show you the basics here

5170
3:07:05,279 --> 3:07:08,479
control x to exit and then it says would

5171
3:07:08,479 --> 3:07:10,800
you like to save your changes and you

5172
3:07:10,800 --> 3:07:13,439
can say see the options here y for yes

5173
3:07:13,439 --> 3:07:15,680
and for no control c for cancel i'm

5174
3:07:15,680 --> 3:07:18,080
going to say yes and then it says what

5175
3:07:18,080 --> 3:07:19,680
file name would you like to write well

5176
3:07:19,680 --> 3:07:21,840
it'll default to the current text file

5177
3:07:21,840 --> 3:07:23,040
but if you wanted to save it as like

5178
3:07:23,040 --> 3:07:24,880
copy 2 you could i'm just going to hit

5179
3:07:24,880 --> 3:07:25,920
enter

5180
3:07:25,920 --> 3:07:27,760
and boom we're done the text file has

5181
3:07:27,760 --> 3:07:29,760
been edited it's very simple very easy

5182
3:07:29,760 --> 3:07:31,760
to use and again i recommend you use it

5183
3:07:31,760 --> 3:07:33,600
now vi i'm going to look at the same

5184
3:07:33,600 --> 3:07:36,840
text file with vi so vi text file

5185
3:07:36,840 --> 3:07:39,680
text and here we have we're in what mode

5186
3:07:39,680 --> 3:07:41,680
are we in we're in command mode now we

5187
3:07:41,680 --> 3:07:43,359
can still use the arrow keys to get

5188
3:07:43,359 --> 3:07:45,680
around but we can't edit any text or

5189
3:07:45,680 --> 3:07:48,399
insert any text if we want to add text

5190
3:07:48,399 --> 3:07:50,640
we press i and then look down here it

5191
3:07:50,640 --> 3:07:52,560
says insert so this is a little cheat it

5192
3:07:52,560 --> 3:07:54,479
tells you that you're in insert mode if

5193
3:07:54,479 --> 3:07:55,760
we're gonna go back into command mode

5194
3:07:55,760 --> 3:07:57,439
press escape i'm gonna go into insert

5195
3:07:57,439 --> 3:08:00,399
mode press i escape to get out insert

5196
3:08:00,399 --> 3:08:02,800
mode and once you're in insert mode you

5197
3:08:02,800 --> 3:08:05,120
can type text and then if you wanna save

5198
3:08:05,120 --> 3:08:07,680
it again you have to press escape

5199
3:08:07,680 --> 3:08:08,960
and then

5200
3:08:08,960 --> 3:08:10,240
colon

5201
3:08:10,240 --> 3:08:11,279
w

5202
3:08:11,279 --> 3:08:12,399
q

5203
3:08:12,399 --> 3:08:14,960
enter and then boom we've saved the file

5204
3:08:14,960 --> 3:08:17,520
we can look and see the text file has

5205
3:08:17,520 --> 3:08:19,680
been changed all this changes were saved

5206
3:08:19,680 --> 3:08
and that's how you use vi it's confusing

5207
3:08 --> 3:08:24,560
but that's how it works so again use

5208
3:08:24,560 --> 3:08:26,399
nano it just makes sense it's easy

5209
3:08:26,399 --> 3:08:28,080
that's what i recommend you use but if

5210
3:08:28,080 --> 3:08:30,240
you have to use vi at least now you know

5211
3:08:30,240 --> 3:08:31,920
the couple shortcuts that are going to

5212
3:08:31,920 --> 3:08:33,520
get you through so that you can actually

5213
3:08:33,520 --> 3:08:36,479
use it to edit text now remember i said

5214
3:08:36,479 --> 3:08:38,960
i use vi all the time and it's true but

5215
3:08:38,960 --> 3:08:40,960
the funny thing is that it's followed me

5216
3:08:40,960 --> 3:08:42,800
into things like word processors so

5217
3:08:42,800 --> 3:08:45,040
sometimes in my microsoft word documents

5218
3:08:45,040 --> 3:08:47,200
even on the very bottom you'll see colon

5219
3:08:47,200 --> 3:08:50,720
wq because my head i just automatically

5220
3:08:50,720 --> 3:08:52,880
do that when i'm done editing text

5221
3:08:52,880 --> 3:08:55,439
anyway use nano but vi is fun and it's a

5222
3:08:55,439 --> 3:08:57,200
good skill to have i hope this has been

5223
3:08:57,200 --> 3:08:58,720
informative for you and i'd like to

5224
3:08:58,720 --> 3:09:00,800
thank you for viewing viewing text files

5225
3:09:00,800 --> 3:09:03,120
is an extremely common thing for a

5226
3:09:03,120 --> 3:09:04,800
system administrator to do on a linux

5227
3:09:04,800 --> 3:09:06,720
system so we're going to look at a bunch

5228
3:09:06,720 --> 3:09:09,359
of tools that allow us to examine text

5229
3:09:09,359 --> 3:09:11,279
files in a way that allows us to view

5230
3:09:11,279 --> 3:09:13,120
but also to search and i'm just going to

5231
3:09:13,120 --> 3:09:14,720
go right to the command line so that we

5232
3:09:14,720 --> 3:09:17,120
can see these things work in real time

5233
3:09:17,120 --> 3:09:19,520
now i've created in my folder here a

5234
3:09:19,520 --> 3:09:22,239
file called two cities now this is just

5235
3:09:22,239 --> 3:09:24,239
the public domain tale of two cities

5236
3:09:24,239 --> 3:09:26,399
this is the first chapter i'll just type

5237
3:09:26,399 --> 3:09:28,080
cat so we can look at it

5238
3:09:28,080 --> 3:09:29,680
two cities see it's just a tale of two

5239
3:09:29,680 --> 3:09:31,920
cities the first chapter all right so

5240
3:09:31,920 --> 3:09:33,680
let's clear the screen now the first

5241
3:09:33,680 --> 3:09:35,840
thing i'm going to show you is the head

5242
3:09:35,840 --> 3:09:37,600
command and what it does it'll show you

5243
3:09:37,600 --> 3:09:40,560
the first lines of a text file so the

5244
3:09:40,560 --> 3:09:42,720
head or the beginning of it so we can

5245
3:09:42,720 --> 3:09:45,279
just say head two cities and it's going

5246
3:09:45,279 --> 3:09:47,920
to show us the first 10 lines of the

5247
3:09:47,920 --> 3:09:49,520
story so the best of times the worst

5248
3:09:49,520 --> 3:09:51,040
times that's part that we're familiar

5249
3:09:51,040 --> 3:09:52,880
with now we can change that how many

5250
3:09:52,880 --> 3:09:55,840
lines it shows us if we were to do head

5251
3:09:55,840 --> 3:09:59,520
dash and 20 it's going to show us 20

5252
3:09:59,520 --> 3:10:02,239
lines the first 20 lines of the file so

5253
3:10:02,239 --> 3:10:03,920
see it's a little bit longer now and

5254
3:10:03,920 --> 3:10:06,239
it's shown us all 20 lines now head

5255
3:10:06,239 --> 3:10:09,840
isn't usually as commonly used as its

5256
3:10:09,840 --> 3:10:12,800
companion which is tail so let me clear

5257
3:10:12,800 --> 3:10:15,120
the screen oop and it spell clear right

5258
3:10:15,120 --> 3:10:17,279
clear the screen now if we were to do

5259
3:10:17,279 --> 3:10:18,399
tail

5260
3:10:18,399 --> 3:10:20,800
two cities this shows us you've probably

5261
3:10:20,800 --> 3:10:23,279
already guessed it the last 10 lines and

5262
3:10:23,279 --> 3:10:24,800
we could do the same thing with the dash

5263
3:10:24,800 --> 3:10:26,800
n and a number we could decide how many

5264
3:10:26,800 --> 3:10:28,880
lines of the file we want to see now

5265
3:10:28,880 --> 3:10:30,720
this is really useful if you're looking

5266
3:10:30,720 --> 3:10:32,479
at log files and that's almost

5267
3:10:32,479 --> 3:10:34,720
exclusively where i use the tail command

5268
3:10:34,720 --> 3:10:36,800
if i'm looking at a log file i just want

5269
3:10:36,800 --> 3:10:38,720
to see the last things that were written

5270
3:10:38,720 --> 3:10:41,520
to a log file so i'll do a tail of the

5271
3:10:41,520 --> 3:10:43,439
log file in question and i'll see what

5272
3:10:43,439 --> 3:10:45,040
was added to the very end so i don't

5273
3:10:45,040 --> 3:10:47,840
have to look like 27 megabytes of text

5274
3:10:47,840 --> 3:10:50,239
for all of the logs just the last little

5275
3:10:50,239 --> 3:10:52,399
bit of it and so that's a very useful

5276
3:10:52,399 --> 3:10:54,880
command and again you can use n20 if you

5277
3:10:54,880 --> 3:10:56,080
want to see 20 or whatever number you

5278
3:10:56,080 --> 3:10:57,920
want to see 10 is the default now the

5279
3:10:57,920 --> 3:10:59,920
other ones i want to show you are less

5280
3:10:59,920 --> 3:11:01,600
and more we'll start with more this is

5281
3:11:01,600 --> 3:11:03,200
the older command so let me clear the

5282
3:11:03,200 --> 3:11:05,840
screen if we were to type more

5283
3:11:05,840 --> 3:11:07,600
two cities this is going to show us the

5284
3:11:07,600 --> 3:11:08,640
entire

5285
3:11:08,640 --> 3:11:10,640
file and if we wanna scroll through it

5286
3:11:10,640 --> 3:11:12,479
we press the spacebar and it'll go to

5287
3:11:12,479 --> 3:11:14,720
the next page spacebar go to the next

5288
3:11:14,720 --> 3:11:17,600
page the enter key will go line by line

5289
3:11:17,600 --> 3:11:19,439
but this is that's it so we're all the

5290
3:11:19,439 --> 3:11:20,720
way to the end of the into the first

5291
3:11:20,720 --> 3:11:23,200
chapter but that's how more works you

5292
3:11:23,200 --> 3:11:24,960
just kind of go through it like that you

5293
3:11:24,960 --> 3:11:26,960
can also search but it only searches

5294
3:11:26,960 --> 3:11:29,840
down and it's not one that i use very

5295
3:11:29,840 --> 3:11:32,319
often anymore because it's been outmoded

5296
3:11:32,319 --> 3:11:34,560
by the much more powerful although it

5297
3:11:34,560 --> 3:11:37,040
has a more diminutive name

5298
3:11:37,040 --> 3:11:39,439
less so actually let me clear the screen

5299
3:11:39,439 --> 3:11:41,680
so if we were to say less

5300
3:11:41,680 --> 3:11:43,120
two cities

5301
3:11:43,120 --> 3:11:45,439
now we have what looks like a similar

5302
3:11:45,439 --> 3:11:47,520
kind of interface but we can use our

5303
3:11:47,520 --> 3:11:50,399
arrow keys to scroll up and down

5304
3:11:50,399 --> 3:11:52,640
page up and page down work so we don't

5305
3:11:52,640 --> 3:11:54,399
have to worry about like hitting the

5306
3:11:54,399 --> 3:11:56,080
space bar to go down a page we can

5307
3:11:56,080 --> 3:11:57,760
spacebar will go down a page but then we

5308
3:11:57,760 --> 3:12:00,239
can scroll back up with the up key now

5309
3:12:00,239 --> 3:12:02,239
the other really nice thing about less

5310
3:12:02,239 --> 3:12:04,239
and more does this to an extent but less

5311
3:12:04,239 --> 3:12:06,479
is even more powerful if you type

5312
3:12:06,479 --> 3:12:09,200
forward slash in a term so let's search

5313
3:12:09,200 --> 3:12:11,920
for france press enter it's going to

5314
3:12:11,920 --> 3:12:14,319
take us to the first entry of the word

5315
3:12:14,319 --> 3:12:15,760
that we searched for it's going to

5316
3:12:15,760 --> 3:12:18,080
highlight it and it's highlighted all of

5317
3:12:18,080 --> 3:12:19,600
them so if we were to press forward

5318
3:12:19,600 --> 3:12:20,880
slash and enter again it's going to

5319
3:12:20,880 --> 3:12:23,200
repeat the same search and here we are

5320
3:12:23,200 --> 3:12:25,680
francis found again france is down here

5321
3:12:25,680 --> 3:12:27,359
again forward slash it'll take us to

5322
3:12:27,359 --> 3:12:28,720
that one put it right to the top of the

5323
3:12:28,720 --> 3:12:30,640
screen so we can search through an

5324
3:12:30,640 --> 3:12:33,200
entire text file as well so it's very

5325
3:12:33,200 --> 3:12:35,120
very powerful to use the command that

5326
3:12:35,120 --> 3:12:36,880
seems like it would be less powerful

5327
3:12:36,880 --> 3:12:38,960
because it's named less but really it's

5328
3:12:38,960 --> 3:12:41,600
a lot better okay so to get out of here

5329
3:12:41,600 --> 3:12:43,120
and this actually confused me for a long

5330
3:12:43,120 --> 3:12:45,600
time if you just press q just the letter

5331
3:12:45,600 --> 3:12:47,920
q it'll exit the less command and get

5332
3:12:47,920 --> 3:12:50,800
you out of it so less more head tail

5333
3:12:50,800 --> 3:12:53,840
they're very commonly used i usually use

5334
3:12:53,840 --> 3:12:55,920
less and tail more commonly than the

5335
3:12:55,920 --> 3:12:57,200
other two but that's just because i want

5336
3:12:57,200 --> 3:12:59,520
to see the end of a log file and i want

5337
3:12:59,520 --> 3:13:01,279
to be able to go up and down when i'm

5338
3:13:01,279 --> 3:13:03,520
scrolling through a text file and search

5339
3:13:03,520 --> 3:13:05,520
really powerfully it's not a really

5340
3:13:05,520 --> 3:13:07,120
tough nugget because these are pretty

5341
3:13:07,120 --> 3:13:09,680
straightforward tools they're all useful

5342
3:13:09,680 --> 3:13:11,279
and you'll probably find yourself using

5343
3:13:11,279 --> 3:13:13,279
them fairly frequently on the command

5344
3:13:13,279 --> 3:13:14,640
line

5345
3:13:14,640 --> 3:13:16,160
sometimes when i'm at the grocery store

5346
3:13:16,160 --> 3:13:18,160
i wish i could search for where things

5347
3:13:18,160 --> 3:13:19,840
are like i think pizza sauce should be

5348
3:13:19,840 --> 3:13:21,520
right next to spaghetti sauce but it

5349
3:13:21,520 --> 3:13:23,680
almost never is well thankfully when it

5350
3:13:23,680 --> 3:13:26,080
comes to searching for text in a linux

5351
3:13:26,080 --> 3:13:27,920
system there is an awesome tool that

5352
3:13:27,920 --> 3:13
allows you to do just that narrow down

5353
3:13 --> 3:13
what you're looking for with tool called

5354
3:13 --> 3:13:35,040
grep now greb does use regular

5355
3:13:35,040 --> 3:13:37,200
expressions or regex and if you're

5356
3:13:37,200 --> 3:13:38,880
interested in the you know very

5357
3:13:38,880 --> 3:13:40,479
fine-tuned filters you can get with

5358
3:13:40,479 --> 3:13:42,640
regex i cover that really great in the

5359
3:13:42,640 --> 3:13:44,399
linux foundations course but today i

5360
3:13:44,399 --> 3:13:46,800
want to talk about searching for strings

5361
3:13:46,800 --> 3:13:49,279
of text using grep because it can be a

5362
3:13:49,279 --> 3:13:51,120
real powerful way to get the information

5363
3:13:51,120 --> 3:13:53,840
you want really quickly now i said that

5364
3:13:53,840 --> 3:13:56,319
grep uses regular expressions so if you

5365
3:13:56,319 --> 3:13:58,239
want to make sure that it's absolutely

5366
3:13:58,239 --> 3:14:00,560
searching just for strings of text you

5367
3:14:00,560 --> 3:14:02,800
can use the dash capital f flag and that

5368
3:14:02,800 --> 3:14:04,960
means just fixed strings

5369
3:14:04,960 --> 3:14:06,960
usually you don't have to do that

5370
3:14:06,960 --> 3:14:09,200
because if you just search for a string

5371
3:14:09,200 --> 3:14:11,520
it's going to generally find it in the

5372
3:14:11,520 --> 3:14:14,399
file but occasionally your string might

5373
3:14:14,399 --> 3:14:16,479
be regular expression characters and you

5374
3:14:16,479 --> 3:14:18,479
can cause yourself some headaches so if

5375
3:14:18,479 --> 3:14:21,439
you want to be safe use dash capital f i

5376
3:14:21,439 --> 3:14:23,279
usually don't because it's usually not

5377
3:14:23,279 --> 3:14:25,439
an issue but i just want you to be aware

5378
3:14:25,439 --> 3:14:27,920
that if you do grep minus capital f it's

5379
3:14:27,920 --> 3:14:30,160
going to just search for strings now

5380
3:14:30,160 --> 3:14:31,840
there's two different ways that we can

5381
3:14:31,840 --> 3:14:33,520
use grep we can say

5382
3:14:33,520 --> 3:14:34,640
graph

5383
3:14:34,640 --> 3:14:36,080
the string

5384
3:14:36,080 --> 3:14:38,319
from a file and it's going to search the

5385
3:14:38,319 --> 3:14:41,040
file for the string that we specified

5386
3:14:41,040 --> 3:14:43,359
and that works really well but there's

5387
3:14:43,359 --> 3:14:45,120
also another way you can do it you can

5388
3:14:45,120 --> 3:14:48,080
do this cat file or anything that has a

5389
3:14:48,080 --> 3:14:50,960
text output like ls or anything that's

5390
3:14:50,960 --> 3:14:53,040
going to output text and then you can

5391
3:14:53,040 --> 3:14:56,239
use the pipe symbol and kind of push it

5392
3:14:56,239 --> 3:14:58,720
through grep and search for a string

5393
3:14:58,720 --> 3:15:00,319
i'll show you why this is a really

5394
3:15:00,319 --> 3:15:02,479
powerful way to use grep because it

5395
3:15:02,479 --> 3:15:04,080
seems a little backwards like why

5396
3:15:04,080 --> 3:15:06,080
wouldn't we just say you know grep this

5397
3:15:06,080 --> 3:15:08,399
string from this file i'm on an ubuntu

5398
3:15:08,399 --> 3:15:10,800
system here and i'm just going to search

5399
3:15:10,800 --> 3:15:13,359
a log file okay so i'm going to say

5400
3:15:13,359 --> 3:15
grep now we can say dash capital f or we

5401
3:15 --> 3:15:17,439
can leave that off i'm just searching

5402
3:15:17,439 --> 3:15:19,439
for strings i just again want you to

5403
3:15:19,439 --> 3:15:21,359
know that capital f is going to force it

5404
3:15:21,359 --> 3:15:23,920
to just use strings but i want to grep

5405
3:15:23,920 --> 3:15:29,840
for dhcp from the var log syslog file

5406
3:15:29,840 --> 3:15:31,680
press enter and it's going to find all

5407
3:15:31,680 --> 3:15:33,920
of the lines in that text file that have

5408
3:15:33,920 --> 3:15:36,239
dhcp in it actually even highlights the

5409
3:15:36,239 --> 3:15:38,479
dhcp which is really convenient now

5410
3:15:38,479 --> 3:15:39,920
there's another place we could get some

5411
3:15:39,920 --> 3:15
system log information and that is using

5412
3:15 --> 3:15:42,760
the

5413
3:15:42,760 --> 3:15:44,880
dmesg command

5414
3:15:44,880 --> 3:15:47,279
but here's the problem that's a command

5415
3:15:47,279 --> 3:15:49,760
that has output but it's not a file we

5416
3:15:49,760 --> 3:15:52,399
can't grep the d message command so

5417
3:15:52,399 --> 3:15:54,080
that's where the pipe symbol comes into

5418
3:15:54,080 --> 3:15:56,160
play and it works really really well we

5419
3:15:56,160 --> 3:15:58,319
could just say d message and instead of

5420
3:15:58,319 --> 3:16:00,399
just having it print to the screen we

5421
3:16:00,399 --> 3:16:02,479
can use the pipe symbol which is usually

5422
3:16:02,479 --> 3:16:04,720
above the enter key in a us keyboard

5423
3:16:04,720 --> 3:16:07,040
grep i'm going to use minus f this time

5424
3:16:07,040 --> 3:16:08,960
we don't have to necessarily

5425
3:16:08,960 --> 3:16:10,640
dhcp

5426
3:16:10,640 --> 3:16:12,479
and then it's going to take all of that

5427
3:16:12,479 --> 3:16:15,680
output from d message and grep for dhcp

5428
3:16:15,680 --> 3:16:17,279
and sure enough there's two lines that

5429
3:16:17,279 --> 3:16:20,160
have dhcp now another really useful way

5430
3:16:20,160 --> 3:16
that we can use the pipe symbol let's

5431
3:16 --> 3:16:23,279
clear the screen

5432
3:16:23,279 --> 3:16:24,560
because i want to show you that first

5433
3:16:24,560 --> 3:16:26,239
one that we did right we we actually

5434
3:16:26,239 --> 3:16:28,960
grew up for dhcp from that file and we

5435
3:16:28,960 --> 3:16:31,200
got these results let's say we had just

5436
3:16:31,200 --> 3:16:33,760
pages and pages of results and we wanted

5437
3:16:33,760 --> 3:16:36,239
just to look for things that mentioned

5438
3:16:36,239 --> 3:16:39,600
init init what we could do is kind of

5439
3:16:39,600 --> 3:16:42,720
like chain greps along we could say

5440
3:16:42,720 --> 3:16:46,399
grep dhcp from var syslog and then pipe

5441
3:16:46,399 --> 3:16:48,319
those results into

5442
3:16:48,319 --> 3:16:51,520
grep init and press enter and now we're

5443
3:16:51,520 --> 3:16:54,239
just going to get the lines that were in

5444
3:16:54,239 --> 3:16:57,520
this result that also contained the word

5445
3:16:57,520 --> 3:16:59,760
init and so here now we've filtered all

5446
3:16:59,760 --> 3:17:02,560
the way down to these two lines of text

5447
3:17:02,560 --> 3:17:04,880
from the log files so even if you're not

5448
3:17:04,880 --> 3:17:06,399
getting super fancy with regular

5449
3:17:06,399 --> 3:17:08,239
expressions you can do some really

5450
3:17:08,239 --> 3:17:10,880
powerful searching of strings using the

5451
3:17:10,880 --> 3:17:13,200
grep tool for things like log files or

5452
3:17:13,200 --> 3:17:14,560
any kind of text that you want to search

5453
3:17:14,560 --> 3:17:16,640
for and remember you can chain those

5454
3:17:16,640 --> 3:17:19,120
grep commands together so that you get a

5455
3:17:19,120 --> 3:17:21,760
really fine filter looking for exactly

5456
3:17:21,760 --> 3:17:23,920
what you're looking for

5457
3:17:23,920 --> 3:17:25,920
every application in the linux system

5458
3:17:25,920 --> 3:17:28,960
has three sort of like pipes it has

5459
3:17:28,960 --> 3:17:31,520
standard input standard output and

5460
3:17:31,520 --> 3:17:33,920
standard error and basically it's just a

5461
3:17:33,920 --> 3:17:35,680
way to get information in and out it's

5462
3:17:35,680 --> 3:17:38,479
an io type situation for every

5463
3:17:38,479 --> 3:17:40,239
individual app now i have just an

5464
3:17:40,239 --> 3:17:42,399
application here uh drawn out and i want

5465
3:17:42,399 --> 3:17:44,080
to show you the difference between the

5466
3:17:44,080 --> 3:17:46,399
three so standard input is pretty easy

5467
3:17:46,399 --> 3:17:47,840
to understand right this is like if

5468
3:17:47,840 --> 3:17:49,840
you're putting something into a program

5469
3:17:49,840 --> 3:17:51,680
we use the pipe symbol if we're gonna

5470
3:17:51,680 --> 3:17:53,680
pipe something into it or we can use

5471
3:17:53,680 --> 3:17:55,359
less than if we want to just assign a

5472
3:17:55,359 --> 3:17:58,160
file to the standard input now a lot of

5473
3:17:58,160 --> 3:18:00,800
programs don't accept things on standard

5474
3:18:00,800 --> 3:18:02,399
input but some of them do so if you've

5475
3:18:02,399 --> 3:18:04,800
ever seen me pipe a command into another

5476
3:18:04,800 --> 3:18:06,640
command what i'm doing is piping the

5477
3:18:06,640 --> 3:18:09,359
results of one command into another

5478
3:18:09,359 --> 3:18:10,960
command so it can work on it i'll show

5479
3:18:10,960 --> 3:18:12,479
you how that works on the command line

5480
3:18:12,479 --> 3:18:15,120
but then there's two other pipes and one

5481
3:18:15,120 --> 3:18:16,640
of them is the standard output this is

5482
3:18:16,640 --> 3:18:18,880
what happens if you type ls and it shows

5483
3:18:18,880 --> 3:18:20,640
you know the contents on the screen

5484
3:18:20,640 --> 3:18:22,239
that's the output that it shows you is

5485
3:18:22,239 --> 3:18:24,399
the standard output now there's also

5486
3:18:24,399 --> 3:18:27,200
standard error if an error occurs it

5487
3:18:27,200 --> 3:18:29,120
also prints the things out on the screen

5488
3:18:29,120 --> 3:18:31,359
but they're different pipes now we don't

5489
3:18:31,359 --> 3:18:33,680
realize the difference because they both

5490
3:18:33,680 --> 3:18:35,439
end up on the command line that's like

5491
3:18:35,439 --> 3:18:37,760
the default place for standard output

5492
3:18:37,760 --> 3:18:40,560
and standard error to go but you can

5493
3:18:40,560 --> 3:18:41,680
treat them

5494
3:18:41,680 --> 3:18:43,200
differently so if you want to redirect

5495
3:18:43,200 --> 3:18:45,040
the output of a file of an application

5496
3:18:45,040 --> 3:18:47,520
into a file use the greater than symbol

5497
3:18:47,520 --> 3:18:49,520
if you want to redirect the standard

5498
3:18:49,520 --> 3:18:51,600
error or like you know an error message

5499
3:18:51,600 --> 3:18:53,840
you have to use two greater than because

5500
3:18:53,840 --> 3:18:55,600
it's a different pipe and you have to

5501
3:18:55,600 --> 3:18:57,439
redirect it separately so let me show

5502
3:18:57,439 --> 3:18:59,120
you what i mean first of all let's talk

5503
3:18:59,120 --> 3:19:01,200
about standard input now i have in here

5504
3:19:01,200 --> 3:19:03,520
a file called file.txt i'll show you

5505
3:19:03,520 --> 3:19:05,439
what's inside of it okay so this is what

5506
3:19:05,439 --> 3:19:07,279
we have okay just the text file with

5507
3:19:07,279 --> 3:19:10,239
some text in it now if we wanted to use

5508
3:19:10,239 --> 3:19:12,319
grep to search for text we could just

5509
3:19:12,319 --> 3:19:13,120
say

5510
3:19:13,120 --> 3:19:15,359
grep text from

5511
3:19:15,359 --> 3:19:17,840
file.text and it would show us the text

5512
3:19:17,840 --> 3:19:19,680
that's in there but we could also

5513
3:19:19,680 --> 3:19:22,160
redirect to the standard input rather

5514
3:19:22,160 --> 3:19:23,840
than telling grep what to use so we

5515
3:19:23,840 --> 3:19:25,040
could say

5516
3:19:25,040 --> 3:19:26,120
cat

5517
3:19:26,120 --> 3:19:27,760
file.txt

5518
3:19:27,760 --> 3:19:31,439
and then pipe the results into standard

5519
3:19:31,439 --> 3:19:33,920
input of grep and then have grep look

5520
3:19:33,920 --> 3:19:35,920
for text we should get the exact same

5521
3:19:35,920 --> 3:19:37,439
results now what we've done though

5522
3:19:37,439 --> 3:19:39,760
rather than telling grep you know what

5523
3:19:39,760 --> 3:19:42,080
file to choose from we just piped the

5524
3:19:42,080 --> 3:19:44,560
results of cat into standard input and

5525
3:19:44,560 --> 3:19:47,359
then grep used that as its input for

5526
3:19:47,359 --> 3:19:49,439
grepping for the word text now that is

5527
3:19:49,439 --> 3:19:51,760
using the pipe symbol we can also say

5528
3:19:51,760 --> 3:19:53,439
grep for

5529
3:19:53,439 --> 3:19:57,279
text and i want you to use file.txt as

5530
3:19:57,279 --> 3:19:58,960
your standard input

5531
3:19:58,960 --> 3:20:01,840
now this looks very similar to this up

5532
3:20:01,840 --> 3:20:03,600
here but it's drastically different

5533
3:20:03,600 --> 3:20:05,840
because what we've done is we've used

5534
3:20:05,840 --> 3:20:08,160
redirection so this is redirecting

5535
3:20:08,160 --> 3:20:10,800
standard input this actually functions

5536
3:20:10,800 --> 3:20:13,520
exactly the same as this one because

5537
3:20:13,520 --> 3:20:15,200
here we're using the pipe symbol to

5538
3:20:15,200 --> 3:20:17,279
redirect standard input here we're using

5539
3:20:17,279 --> 3:20:18,880
the less than symbol to redirect

5540
3:20:18,880 --> 3:20:20,800
standard input so that's how you can do

5541
3:20:20,800 --> 3:20:22,560
standard input it's not something you do

5542
3:20:22,560 --> 3:20:25,279
as often apart from with this scenario i

5543
3:20:25,279 --> 3:20:27,600
do this a lot you know piping one thing

5544
3:20:27,600 --> 3:20:29,279
into another so that you can get the

5545
3:20:29,279 --> 3:20:31,120
results from there now the other thing

5546
3:20:31,120 --> 3:20:33,439
is standard output and standard error so

5547
3:20:33,439 --> 3:20:35,359
i have a really quick way to show you so

5548
3:20:35,359 --> 3:20:37,359
we say ls and we get these are the

5549
3:20:37,359 --> 3:20:40,239
contents of ls we could redirect that by

5550
3:20:40,239 --> 3:20:43,479
using greater than into a file called

5551
3:20:43,479 --> 3:20:46,239
results.txt and we should get no output

5552
3:20:46,239 --> 3:20:48,479
because rather than redirecting the

5553
3:20:48,479 --> 3:20:50,720
output to our terminal window here it's

5554
3:20:50,720 --> 3:20:52,560
actually redirected the standard output

5555
3:20:52,560 --> 3:20:54,880
into results.txt so if we look there's a

5556
3:20:54,880 --> 3:20:57,200
file now called results.txt and if we

5557
3:20:57,200 --> 3:21
look at results.txt it has the contents

5558
3:21 --> 3:21
of that ls command right it just dumped

5559
3:21 --> 3:21:03,760
the contents into there

5560
3:21:03,760 --> 3:21:05,359
here's a problem though what if we did

5561
3:21:05,359 --> 3:21:07,120
this let me clear the screen

5562
3:21:07,120 --> 3:21:10,720
what if we did ls lsf

5563
3:21:10,720 --> 3:21:12,720
and we tried to redirect the standard

5564
3:21:12,720 --> 3:21:14,359
output into

5565
3:21:14,359 --> 3:21:16,080
results.txt

5566
3:21:16,080 --> 3:21
why did we get the error message here

5567
3:21 --> 3:21:19,840
and let's look at results

5568
3:21:19,840 --> 3:21:21,279
well there's nothing in results now

5569
3:21:21,279 --> 3:21:23,120
because there was no standard output

5570
3:21:23,120 --> 3:21:24,880
this is an error there is no file called

5571
3:21:24,880 --> 3:21:27,920
ff for us to use ls on if we wanted to

5572
3:21:27,920 --> 3:21:30,399
redirect an error we would have to do

5573
3:21:30,399 --> 3:21:32,080
lsf

5574
3:21:32,080 --> 3:21:34,200
to greater than

5575
3:21:34,200 --> 3:21:36,800
error.txt if we do that ah nothing

5576
3:21:36,800 --> 3:21:38,720
appeared however if we look at in the

5577
3:21:38,720 --> 3:21:40,239
file here now we have a file called

5578
3:21:40,239 --> 3:21:41,840
error.txt

5579
3:21:41,840 --> 3:21:43,359
if we look in that sure enough that was

5580
3:21:43,359 --> 3:21:45,520
the error message we redirected it using

5581
3:21:45,520 --> 3:21:47,200
a standard error

5582
3:21:47,200 --> 3:21:50,080
redirector using standard input standard

5583
3:21:50,080 --> 3:21:51,760
output and standard error redirection is

5584
3:21:51,760 --> 3:21:53,040
something you're going to find yourself

5585
3:21:53,040 --> 3:21:55,520
doing a lot because you want to see the

5586
3:21:55,520 --> 3:21:57,359
results of things when you're not there

5587
3:21:57,359 --> 3:21:59,200
to see it happen on the command line

5588
3:21:59,200 --> 3:22:00,960
that's basically what log files are

5589
3:22:00,960 --> 3:22:02,319
right they've taken errors and

5590
3:22:02,319 --> 3:22:06,319
redirected them into a log file for you

5591
3:22:06,319 --> 3:22:08,319
once you understand how input and output

5592
3:22:08,319 --> 3:22:10,160
works with an application on the command

5593
3:22:10,160 --> 3:22
line there are some really cool tricks

5594
3:22 --> 3:22:14,080
and tips that we can learn to make life

5595
3:22:14,080 --> 3:22:15,920
a little bit easier now there's a

5596
3:22:15,920 --> 3:22:17,359
handful of things we want to look at but

5597
3:22:17,359 --> 3:22:19,279
i've drawn a diagram so we can actually

5598
3:22:19,279 --> 3:22:21,600
get a real good taste for what each

5599
3:22:21,600 --> 3:22:24,720
thing is now devnl you may have heard of

5600
3:22:24,720 --> 3:22:26,720
people call it the black hole or the bit

5601
3:22:26,720 --> 3:22:29,200
bucket and basically devnull is a

5602
3:22:29,200 --> 3:22:31,840
location on your file system that you

5603
3:22:31,840 --> 3:22:34,160
can copy anything to and it will

5604
3:22:34,160 --> 3:22:36,800
disappear forever now that seems like a

5605
3:22:36,800 --> 3:22:39,600
weird concept i know but if you have

5606
3:22:39,600 --> 3:22:40,560
like

5607
3:22:40,560 --> 3:22:42,560
extraneous logs that you don't really

5608
3:22:42,560 --> 3:22:44,239
want to ever see you just want to like

5609
3:22:44,239 --> 3:22:46,080
throw them immediately in the trash

5610
3:22:46,080 --> 3:22
devnl is where you want it to go for

5611
3:22 --> 3:22:50,160
example you would not want to copy

5612
3:22:50,160 --> 3:22:52,239
important information and redirect it to

5613
3:22:52,239 --> 3:22:54,800
dev null because it will just disappear

5614
3:22:54,800 --> 3:22:57,760
forever so devnet is just a place that

5615
3:22:57,760 --> 3:22:59,520
everything disappears when you copy it

5616
3:22:59,520 --> 3:23:01,439
there now t is an interesting command it

5617
3:23:01,439 --> 3:23:03,760
doesn't seem like it does very much but

5618
3:23:03,760 --> 3:23:06,399
it accomplishes a task that's remarkably

5619
3:23:06,399 --> 3:23:08,560
difficult to do without using the tool

5620
3:23:08,560 --> 3:23:10,720
itself so here's how it works we take

5621
3:23:10,720 --> 3:23:13,120
some sort of text like output from a

5622
3:23:13,120 --> 3:23:15,359
file or something like that and we put

5623
3:23:15,359 --> 3:23:18,800
it into teas standard input and then all

5624
3:23:18,800 --> 3:23:20,800
it does is dump that same information

5625
3:23:20,800 --> 3:23:24,640
out of its standard output but it also

5626
3:23:24,640 --> 3:23:27,040
writes it to a file so it does like a t

5627
3:23:27,040 --> 3:23:29,200
in the road or a fork in the road it

5628
3:23:29,200 --> 3:23:30,720
lets you see what it is right on the

5629
3:23:30,720 --> 3:23:32,080
standard output right in your command

5630
3:23:32,080 --> 3:23:34,479
window but then it also copies it to a

5631
3:23:34,479 --> 3:23:37,040
file so that's what t does and it's

5632
3:23:37,040 --> 3:23:38,080
really nice if you want to see what's

5633
3:23:38,080 --> 3:23:39,520
happening but you also want to have a

5634
3:23:39,520 --> 3:23:41,840
record of it and keep it into a file

5635
3:23:41,840 --> 3:23:44,080
and then arguably the most complicated

5636
3:23:44,080 --> 3:23:47,040
one but also the niftiest one maybe is

5637
3:23:47,040 --> 3:23:50,160
called x-args now how x-args work is

5638
3:23:50,160 --> 3:23:51,680
let's say you have a different program

5639
3:23:51,680 --> 3:23:54,399
like ls or something and you do the

5640
3:23:54,399 --> 3:23:56,319
command and so you see stuff come out in

5641
3:23:56,319 --> 3:23:58,479
standard output and then we're going to

5642
3:23:58,479 --> 3:24:01,200
pipe it in or redirect it into x-args

5643
3:24:01,200 --> 3:24:04,560
standard input then what x-args does is

5644
3:24:04,560 --> 3:24:07,279
it takes it and says okay what program

5645
3:24:07,279 --> 3:24:09,840
do you want me to use this information

5646
3:24:09,840 --> 3:24:11,600
that you just piped into me on and you

5647
3:24:11,600 --> 3:24:13,439
tell it like application number two and

5648
3:24:13,439 --> 3:24:16,560
then it executes application two and it

5649
3:24:16,560 --> 3:24:18,800
uses that information as the arguments

5650
3:24:18,800 --> 3:24:20,720
for the second command now the reason

5651
3:24:20,720 --> 3:24:22,720
this is really powerful is not all

5652
3:24:22,720 --> 3:24:24,960
applications can accept things from

5653
3:24:24,960 --> 3:24:27,200
another program on their standard input

5654
3:24:27,200 --> 3:24:30,720
so x args basically takes and forces a

5655
3:24:30,720 --> 3:24:32,479
program to accept something from

5656
3:24:32,479 --> 3:24:34,399
standard input by accepting that

5657
3:24:34,399 --> 3:24:36,479
standard input itself and then putting

5658
3:24:36,479 --> 3:24:38,479
it as an argument onto the application

5659
3:24:38,479 --> 3:24:40,160
now let's look at all of these really

5660
3:24:40,160 --> 3:24:41,920
quick because the cool part is you know

5661
3:24:41,920 --> 3:24:43,600
when you actually do it now first of all

5662
3:24:43,600 --> 3:24:45,920
devnl so we're going to say

5663
3:24:45,920 --> 3:24:47,279
echo

5664
3:24:47,279 --> 3:24:49,200
hello and it'll put it to the screen if

5665
3:24:49,200 --> 3:24:50,720
we do echo

5666
3:24:50,720 --> 3:24:53,600
hello and then we redirect it to

5667
3:24:53,600 --> 3:24:54,479
no

5668
3:24:54,479 --> 3:24
boom it's completely gone right that's

5669
3:24 --> 3:24:58,239
how devnet works it's just a place that

5670
3:24:58,239 --> 3:25
never fills up it's kind of like a

5671
3:25 --> 3:25:02,160
teenage girl at a pizza party sleepover

5672
3:25:02,160 --> 3:25:03,840
right it just never gets full you can

5673
3:25:03,840 --> 3:25:05,040
put as much as you want in there it's

5674
3:25:05,040 --> 3:25:06,560
just gonna disappear now we've

5675
3:25:06,560 --> 3:25:09,120
redirected standard output we could also

5676
3:25:09,120 --> 3:25:11,680
redirect standard error

5677
3:25:11,680 --> 3:25:13,200
and then we should see hello because

5678
3:25:13,200 --> 3:25:15,359
there was no error there right if we did

5679
3:25:15,359 --> 3:25:17,920
something like this uh let's say

5680
3:25:17,920 --> 3:25:19,279
ls

5681
3:25:19,279 --> 3:25:20,880
documents

5682
3:25:20,880 --> 3:25:23,279
and ff we should get both standard

5683
3:25:23,279 --> 3:25:25,120
output and standard error sure enough

5684
3:25:25,120 --> 3:25:27,120
here's our standard error there is no ff

5685
3:25:27,120 --> 3:25:29,520
but here is the contents of documents so

5686
3:25:29,520 --> 3:25:31,600
we got both now if you wanted to do

5687
3:25:31,600 --> 3:25:33,359
something cool and redirect both

5688
3:25:33,359 --> 3:25:36,160
standard output and standard error into

5689
3:25:36,160 --> 3:25:39,120
one place you can do this you can say ls

5690
3:25:39,120 --> 3:25:41,439
documents ff just like we did and i'm

5691
3:25:41,439 --> 3:25:44,399
going to redirect standard output into

5692
3:25:44,399 --> 3:25:47,200
dev null and here's the magic part and

5693
3:25:47,200 --> 3:25:49,279
then i'm going to redirect standard

5694
3:25:49,279 --> 3:25:51,439
error into

5695
3:25:51,439 --> 3:25:52,399
and

5696
3:25:52,399 --> 3:25:54,800
one oh my goodness what is this well the

5697
3:25:54,800 --> 3:25:56,960
ampersand one is a way that we can tell

5698
3:25:56,960 --> 3:25:59,600
it that what we want is standard error

5699
3:25:59,600 --> 3:26:03,040
to get redirected into standard output

5700
3:26:03,040 --> 3:26:04,880
so the one is standard output so what

5701
3:26:04,880 --> 3:26:06,560
this does is all of our standard output

5702
3:26:06,560 --> 3:26:09,120
is getting redirected to dev null so all

5703
3:26:09,120 --> 3:26:11,279
of our standard error is going to go

5704
3:26:11,279 --> 3:26:13,760
into standard output which is of course

5705
3:26:13,760 --> 3:26:15,760
going to devnet so this should give us

5706
3:26:15,760 --> 3:26:18,160
absolutely no results and sure enough

5707
3:26:18,160 --> 3:26:19,840
both standard output and standard error

5708
3:26:19,840 --> 3:26:21,920
have gone into devnet alright so that's

5709
3:26:21,920 --> 3:26
just a really cool thing that you can do

5710
3:26 --> 3:26:25,840
with redirection and then devnet is just

5711
3:26:25,840 --> 3:26:27,920
a place that never fills up all right

5712
3:26:27,920 --> 3:26:29,040
let's clear the screen i want to show

5713
3:26:29,040 --> 3:26:31,840
you so here i have a couple files or one

5714
3:26:31,840 --> 3:26:34,080
file let's look and see what's in there

5715
3:26:34,080 --> 3:26:36,239
all right just a bunch of different

5716
3:26:36,239 --> 3:26:38,399
words in the text file so what we can do

5717
3:26:38,399 --> 3:26:39,520
is say

5718
3:26:39,520 --> 3:26:42,560
cat file.txt i'm going to pipe my

5719
3:26:42,560 --> 3:26:46,319
standard output into t's standard input

5720
3:26:46,319 --> 3:26:49,439
and then i'm going to call it copy.txt

5721
3:26:49,439 --> 3:26:50,800
and now we should see the contents of

5722
3:26:50,800 --> 3:26:52,640
file.txt sure enough it printed to the

5723
3:26:52,640 --> 3:26:55,359
screen but then the t command also

5724
3:26:55,359 --> 3:26:58,319
created that copy.txt that also contains

5725
3:26:58,319 --> 3:27:00,560
this so if we look sure enough there's a

5726
3:27:00,560 --> 3:27:02,880
copy of our stuff and then last i'm

5727
3:27:02,880 --> 3:27:05,120
going to show you x args and it's hard

5728
3:27:05,120 --> 3:27:06,880
to come up with a real good example but

5729
3:27:06,880 --> 3:27:08,640
i think i have one all right what we

5730
3:27:08,640 --> 3:27:11,040
want to do is i want to create a folder

5731
3:27:11,040 --> 3:27:13,120
named everything in this file so i want

5732
3:27:13,120 --> 3:27:15,040
to have a folder named red named yellow

5733
3:27:15,040 --> 3:27:16,720
named blue and name tuna fish well it

5734
3:27:16,720 --> 3:27:18,319
turns out to be kind of difficult to do

5735
3:27:18,319 --> 3:27:20,239
that but we can do it really simply if

5736
3:27:20,239 --> 3:27:21,560
we say

5737
3:27:21,560 --> 3:27:23,279
catfile.txt

5738
3:27:23,279 --> 3:27:26,239
pipe that into x-args

5739
3:27:26,239 --> 3:27:27,200
and then

5740
3:27:27,200 --> 3:27:30,880
args is going to mkdir and then it will

5741
3:27:30,880 --> 3:27:33,600
put the standard output of this command

5742
3:27:33,600 --> 3:27:35,680
and kind of like plunk it right there so

5743
3:27:35,680 --> 3:27:37,120
if we press enter

5744
3:27:37,120 --> 3:27:39,279
and we do ls look at that we have a

5745
3:27:39,279 --> 3:27:41,680
folder with each one of those names

5746
3:27:41,680 --> 3:27:43,279
which is really convenient right it was

5747
3:27:43,279 --> 3:27:45,600
able to do like what would have taken us

5748
3:27:45,600 --> 3:27:47,200
quite a bit of typing to do it just did

5749
3:27:47,200 --> 3:27:48,960
it by piping it and then it kind of

5750
3:27:48,960 --> 3:27:50,880
pastes the results right at the end of

5751
3:27:50,880 --> 3:27:52,479
whatever command you tell it now we

5752
3:27:52,479 --> 3:27:53,600
could also do something cool if i want

5753
3:27:53,600 --> 3:27:56,080
to clean up my mess instead of mkdir i'm

5754
3:27:56,080 --> 3:27:58,479
going to say rm dir

5755
3:27:58,479 --> 3:27:59,760
and then they're gone

5756
3:27:59,760 --> 3:28:01,439
standard input standard output standard

5757
3:28:01,439 --> 3:28:03,040
error they're really cool things and

5758
3:28:03,040 --> 3:28:04,399
there are some additional tips and

5759
3:28:04,399 --> 3:28:06,960
tricks that make using them even more

5760
3:28:06,960 --> 3:28:09,120
usable and more beneficial on the

5761
3:28:09,120 --> 3:28:10,720
command line

5762
3:28:10,720 --> 3:28:12,560
dealing with text on the command line is

5763
3:28:12,560 --> 3:28:14,640
something that's kind of fun to do to be

5764
3:28:14,640 --> 3:28:16,640
quite honest and there are some tools

5765
3:28:16,640 --> 3:28:18,720
that are pretty nifty to play with so

5766
3:28:18,720 --> 3:28:20,080
let's look at a couple of them right now

5767
3:28:20,080 --> 3:28:21,840
we'll just go right to the command line

5768
3:28:21,840 --> 3:28:23,680
now i've already set us up with a few

5769
3:28:23,680 --> 3:28:25,520
files i file one and file two so let's

5770
3:28:25,520 --> 3:28:27,200
look at them just so we know what's in

5771
3:28:27,200 --> 3:28:29,680
them that's what's in file one

5772
3:28:29,680 --> 3:28:31,359
and that's what's in file two just a

5773
3:28:31,359 --> 3:28:33,680
list of words so i wanna show you a few

5774
3:28:33,680 --> 3:28:35,840
things now you'll notice that these are

5775
3:28:35,840 --> 3:28:38,080
not in alphabetical order okay so we

5776
3:28:38,080 --> 3:28
could use the sort command so i could

5777
3:28 --> 3:28:43,760
say sort file1 dot txt and it's going to

5778
3:28:43,760 --> 3:28:45,520
return the contents but notice now

5779
3:28:45,520 --> 3:28:47,439
they're in alphabetical order chicken

5780
3:28:47,439 --> 3:28:49,279
fish monkey turtle so what we could do

5781
3:28:49,279 --> 3:28:51,600
is if we wanted to save a file call it

5782
3:28:51,600 --> 3:28:53,439
sorted then we could redirect the output

5783
3:28:53,439 --> 3:28:54,520
to

5784
3:28:54,520 --> 3:28:56,399
sorted.txt

5785
3:28:56,399 --> 3:28:58,560
and then if we look at sorted.txt now

5786
3:28:58,560 --> 3:29:00,399
it's going to be a file with them in

5787
3:29:00,399 --> 3:29:02,160
alphabetical order so sort does just

5788
3:29:02,160 --> 3:29:04,160
that and if you look at the commands for

5789
3:29:04,160 --> 3:29:06,160
sort like do the man page for sort you

5790
3:29:06,160 --> 3:29:07,840
can see that it does some other things

5791
3:29:07,840 --> 3:29:09,600
you know you can actually sort with

5792
3:29:09,600 --> 3:29:11,520
options like you know do i ignore case

5793
3:29:11,520 --> 3:29:13,200
what about numbers what about you know

5794
3:29:13,200 --> 3:29:15,040
what if it's a bunch of dates so sort's

5795
3:29:15,040 --> 3:29:16,640
very powerful but that's basically what

5796
3:29:16,640 --> 3:29:18,319
it does it takes a text file and then it

5797
3:29:18,319 --> 3:29:20,239
outputs that text file sorted however

5798
3:29:20,239 --> 3:29
you tell it to do so let's clear this

5799
3:29 --> 3:29:23,279
screen all right the next one i want to

5800
3:29:23,279 --> 3:29:25,040
show you is word count it's pretty

5801
3:29:25,040 --> 3:29:26,960
simple it's just wc and it stands for

5802
3:29:26,960 --> 3:29:29,319
word count so we could do word count of

5803
3:29:29,319 --> 3:29:32,239
file1.txt and it'll give us three fields

5804
3:29:32,239 --> 3:29:35,760
it says 4 4 and 27 in our case what this

5805
3:29:35,760 --> 3:29:37,600
means is it means there are four words

5806
3:29:37,600 --> 3:29:40,640
there are four lines and there are 27

5807
3:29:40,640 --> 3:29:41,920
characters now if we just want to know

5808
3:29:41,920 --> 3:29:44,239
one of those things we could just say wc

5809
3:29:44,239 --> 3:29:46,760
minus m for character count

5810
3:29:46,760 --> 3:29:48,880
file1.txt and it's just going to show us

5811
3:29:48,880 --> 3:29:50,479
that there are 27 characters in

5812
3:29:50,479 --> 3:29:52,960
file1.txt now the last two i want to

5813
3:29:52,960 --> 3:29:54,720
show you are really the most interesting

5814
3:29:54,720 --> 3:29:56,560
so there's cut and paste which i know

5815
3:29:56,560 --> 3:29:58,239
sounds like a gooey thing but let's

5816
3:29:58,239 --> 3:30
actually look at our file again just so

5817
3:30 --> 3:30:01,439
we know exactly what we're dealing with

5818
3:30:01,439 --> 3:30:03,200
so file1.txt

5819
3:30:03,200 --> 3:30:05,120
this is what we have these lines if we

5820
3:30:05,120 --> 3:30:06,720
were to use the cut command we could say

5821
3:30:06,720 --> 3:30:09,120
cut i'm going to do cut by characters

5822
3:30:09,120 --> 3:30:11,760
and i want it to cut out character oh

5823
3:30:11,760 --> 3:30:13,279
let's just say 1

5824
3:30:13,279 --> 3:30:14,840
from

5825
3:30:14,840 --> 3:30:17,439
file1.txt if we do that we should see

5826
3:30:17,439 --> 3:30:18,800
just the first

5827
3:30:18,800 --> 3:30:21,439
oh i did file two my goodness i'm like

5828
3:30:21,439 --> 3:30:23,760
those aren't the first letters at all

5829
3:30:23,760 --> 3:30:26,319
so let's look at file one that dxd that

5830
3:30:26,319 --> 3:30:28,399
makes more sense so the c in chicken the

5831
3:30:28,399 --> 3:30:30,880
f and fish teen turtle m in monkey okay

5832
3:30:30,880 --> 3:30:32,960
so we have those uh we could do more

5833
3:30:32,960 --> 3:30:34,720
than just one character and we could do

5834
3:30:34,720 --> 3:30:36,560
more than just the first character let's

5835
3:30:36,560 --> 3:30:39,359
say we wanted to do cut minus c

5836
3:30:39,359 --> 3:30:42,560
the third fourth and fifth character in

5837
3:30:42,560 --> 3:30:45,600
the file file one dot txt so now we

5838
3:30:45,600 --> 3:30:47,270
should see

5839
3:30:47,270 --> 3:30:48,720
[Music]

5840
3:30:48,720 --> 3:30:50,479
and what it did is it took the third

5841
3:30:50,479 --> 3:30:52,880
fourth and fifth character but you see

5842
3:30:52,880 --> 3:30:54,880
fish only has four characters so there

5843
3:30:54,880 --> 3:30:57,279
is no fifth character so it just did sh

5844
3:30:57,279 --> 3:30:58,800
for the fish line all right but see

5845
3:30:58,800 --> 3:31:00,080
that's that's what cut does it'll

5846
3:31:00,080 --> 3:31:01,840
actually take it right out of the middle

5847
3:31:01,840 --> 3:31:03,439
of the file which is surprisingly

5848
3:31:03,439 --> 3:31:05,439
difficult to do if you don't actually

5849
3:31:05,439 --> 3:31
use the cut command and paste does kind

5850
3:31 --> 3:31:09,680
of the exact opposite so let me clear

5851
3:31:09,680 --> 3:31:11,200
the screen because it's kind of full and

5852
3:31:11,200 --> 3:31:15,040
i want to show again file 1 and file 2.

5853
3:31:15,040 --> 3:31:18,319
now let's say we wanted to put this file

5854
3:31:18,319 --> 3:31:19,439
file 2

5855
3:31:19,439 --> 3:31:22,319
after file 1. right we wanted to say

5856
3:31:22,319 --> 3:31:24,720
chicken lips fish whiskers turtle

5857
3:31:24,720 --> 3:31:27,040
feathers and monkey flippers well that's

5858
3:31:27,040 --> 3:31:29,200
kind of difficult to do if we cap them

5859
3:31:29,200 --> 3:31:30,560
together it's just going to put one at

5860
3:31:30,560 --> 3:31:32,080
the end of the other so that's where

5861
3:31:32,080 --> 3:31:34,319
paste comes into play we can say paste

5862
3:31:34,319 --> 3:31:35,960
file1.txt

5863
3:31:35,960 --> 3:31:38,960
file2.txt and it's going to output

5864
3:31:38,960 --> 3:31:40,560
sure enough it put a tab between them

5865
3:31:40,560 --> 3:31:41,840
and then we have chicken lips fish

5866
3:31:41,840 --> 3:31:43,760
whiskers if we wanted to do this and

5867
3:31:43,760 --> 3:31
redirect it into a file

5868
3:31 --> 3:31:48,399
and then we look at join.txt look at

5869
3:31:48,399 --> 3:31:50,880
that our file now has those two pasted

5870
3:31:50,880 --> 3:31:52,960
together now i know that most of what we

5871
3:31:52,960 --> 3:31:54,560
did using these commands was really just

5872
3:31:54,560 --> 3:31:56,319
playing around but really playing around

5873
3:31:56,319 --> 3:31:58,080
is one of the best ways to learn to use

5874
3:31:58,080 --> 3:32:00,080
a tool and you're going to find that

5875
3:32:00,080 --> 3:32:01,920
every once in a while one of these tools

5876
3:32:01,920 --> 3:32
like cutter paste especially are going

5877
3:32 --> 3:32:06,160
to be extremely useful because it's kind

5878
3:32:06,160 --> 3:32:08,560
of hard to put things next to each other

5879
3:32:08,560 --> 3:32:10,880
in a text file or cut out the middle

5880
3:32:10,880 --> 3:32:13,680
bits of a text file without using simple

5881
3:32:13,680 --> 3:32:15,760
tools like this

5882
3:32:15,760 --> 3:32:18,479
awk and said are text manipulation tools

5883
3:32:18,479 --> 3:32:21,279
that for some reason most people are

5884
3:32:21,279 --> 3:32:23,920
afraid of and i honestly don't know why

5885
3:32:23,920 --> 3:32:25,760
yes they can be very complicated you can

5886
3:32:25,760 --> 3:32:27,600
do a lot of powerful things but you

5887
3:32:27,600 --> 3:32:29,359
don't have to you can do some very

5888
3:32:29,359 --> 3:32:31,760
simple yet still powerful things with

5889
3:32:31,760 --> 3:32:34,720
awk and said now what do they stand for

5890
3:32:34,720 --> 3:32:37,680
said just stands for stream editor and

5891
3:32:37,680 --> 3:32:39,359
awk i actually had to google this

5892
3:32:39,359 --> 3:32:40,960
because i had no idea i mean i've been

5893
3:32:40,960 --> 3:32:42,479
using awk for decades but i didn't

5894
3:32:42,479 --> 3:32:44,239
really know what it stood for it turns

5895
3:32:44,239 --> 3:32:46,640
out it's the initials of the people who

5896
3:32:46,640 --> 3:32:48,720
first wrote it and i'm not going to try

5897
3:32:48,720 --> 3:32:50,880
to pronounce them all but that's what

5898
3:32:50,880 --> 3:32:54,319
the a the w and the k mean basically awk

5899
3:32:54,319 --> 3:32:57,040
is a data extraction tool it allows you

5900
3:32:57,040 --> 3:32:59,120
to pull out certain bits of data from

5901
3:32:59,120 --> 3:33:01,359
text and set of course is just a stream

5902
3:33:01,359 --> 3:33:03,120
editor which allows you to edit things

5903
3:33:03,120 --> 3:33:05,520
without interacting with it directly so

5904
3:33:05,520 --> 3:33:06,800
let's actually go to the command line so

5905
3:33:06,800 --> 3:33:08,640
we can see it work now i've already

5906
3:33:08,640 --> 3:33:10,399
prepared a couple files so if we do ls

5907
3:33:10,399 --> 3:33:12,080
we're going to see we have file 1 file 2

5908
3:33:12,080 --> 3:33:14,399
and join so let's just look at them this

5909
3:33:14,399 --> 3:33:17,200
is file 1 this is file 2

5910
3:33:17,200 --> 3:33:18,880
and this is basically the two of them

5911
3:33:18,880 --> 3:33:20,399
joined together i actually use the paste

5912
3:33:20,399 --> 3:33:22,720
command to do that so i have these three

5913
3:33:22,720 --> 3:33:25,040
files and i'm going to use said and awk

5914
3:33:25,040 --> 3:33:27,840
to do things with these files okay so

5915
3:33:27,840 --> 3:33:30,560
first of all said is a stream editor

5916
3:33:30,560 --> 3:33:32,800
which means you can put files in and

5917
3:33:32,800 --> 3:33:34,720
you'll it'll output the edited version

5918
3:33:34,720 --> 3:33:36,319
and how it works i'm just going to cat

5919
3:33:36,319 --> 3:33:40,560
one of these files so cat file1.txt

5920
3:33:40,560 --> 3:33:42,560
and i'm going to pipe that into

5921
3:33:42,560 --> 3:33:44,479
said for stream editor and here's where

5922
3:33:44,479 --> 3:33:45,760
i'm going to set up the rules i'm going

5923
3:33:45,760 --> 3:33:48,160
to substitute so i'm going to say s and

5924
3:33:48,160 --> 3:33:50,160
then forward slash what i want to search

5925
3:33:50,160 --> 3:33:53,680
for is the word monkey and a forward

5926
3:33:53,680 --> 3:33:55,760
slash what i want to replace it with i'm

5927
3:33:55,760 --> 3:33:58,319
going to say dolphin and then a forward

5928
3:33:58,319 --> 3:34:00,560
slash ng for global that just means that

5929
3:34:00,560 --> 3:34:02,319
if it occurs more than one time i want

5930
3:34:02,319 --> 3:34:04,640
every occurrence of monkey to be

5931
3:34:04,640 --> 3:34:06,960
substituted with dolphin and then i'm

5932
3:34:06,960 --> 3:34:08,800
just going to press enter and what we

5933
3:34:08,800 --> 3:34:10,800
get is chicken fish turtle dolphin

5934
3:34:10,800 --> 3:34:13,680
because it took this initial file and it

5935
3:34:13,680 --> 3:34:16,720
substituted monkey for dolphin and

5936
3:34:16,720 --> 3:34:19,040
really that's what said does it's a

5937
3:34:19,040 --> 3:34:21,040
stream editor it allows you to edit

5938
3:34:21,040 --> 3:34:23,439
things as it flies through there so you

5939
3:34:23,439 --> 3:34:26,080
can make changes to text as it's being

5940
3:34:26,080 --> 3:34:28,080
manipulated so you can put this inside

5941
3:34:28,080 --> 3:34:29,920
of a script and do things without

5942
3:34:29,920 --> 3:34:32,720
interacting on a like a a gui like you'd

5943
3:34:32,720 --> 3:34:35,040
want to open it up with vi and edit it

5944
3:34:35,040 --> 3:34:36,960
out and change monkey to dolphin or

5945
3:34:36,960 --> 3:34:39,040
anything like that so that's what stream

5946
3:34:39,040 --> 3:34:41,040
editor or said does now i'm going to

5947
3:34:41,040 --> 3:34:42,720
clear the screen

5948
3:34:42,720 --> 3:34:44,319
and we're just going to look at joint

5949
3:34:44,319 --> 3:34:46,560
i'm going to say cat join just so we can

5950
3:34:46,560 --> 3:34:49,600
see it now awk takes a text file and it

5951
3:34:49,600 --> 3:34:52,080
will allow you to pull out bits and do

5952
3:34:52,080 --> 3:34:53,279
things with them so i'm just going to

5953
3:34:53,279 --> 3:34:54,479
type this out and then we'll see what

5954
3:34:54,479 --> 3:34:56,319
i'm talking about so i'm going to say

5955
3:34:56,319 --> 3:34:58,800
awk and i'm going to put single quotes

5956
3:34:58,800 --> 3:35:01,279
open curly braces print

5957
3:35:01,279 --> 3:35:04,560
dollar sign 1 close curly braces close

5958
3:35:04,560 --> 3:35:06,920
single things and i'm going to use

5959
3:35:06,920 --> 3:35:09,840
joined.txt as the file so what this is

5960
3:35:09,840 --> 3:35:11,520
saying now this is maybe why people are

5961
3:35:11,520 --> 3:35:13,680
scared there's a bit of an odd syntax

5962
3:35:13,680 --> 3:35:15,600
here but we say awk and then this is

5963
3:35:15,600 --> 3:35:18,319
what we want awk to do with the file i

5964
3:35:18,319 --> 3:35
want it to print out the first field now

5965
3:35 --> 3:35:24,080
it will auto detect that these fields

5966
3:35:24,080 --> 3:35
are separated by a tab they could just

5967
3:35 --> 3:35:28,239
be spaces and it'll auto detect it but

5968
3:35:28,239 --> 3:35:30,239
basically this is on line one this is

5969
3:35:30,239 --> 3:35:32,399
field one field two line two it's field

5970
3:35:32,399 --> 3:35:34,880
one field two so this should print out

5971
3:35:34,880 --> 3:35:37,600
the first field of every line so let's

5972
3:35:37,600 --> 3:35:39,840
press enter and sure enough chicken fish

5973
3:35:39,840 --> 3:35:41,920
turtle monkey it printed them all out

5974
3:35:41,920 --> 3:35:44,080
now we can do more than just one thing

5975
3:35:44,080 --> 3:35:46,160
at a time so let's go back over here

5976
3:35:46,160 --> 3:35:49,600
what if we wanted to do dollar sign two

5977
3:35:49,600 --> 3:35:51,840
dollar sign one now we should get a

5978
3:35:51,840 --> 3:35:54,880
printout of whiskers fish and and

5979
3:35:54,880 --> 3:35:57,120
flippers monkey and let's see what what

5980
3:35:57,120 --> 3:35:58,880
turns out here now it is gonna be a

5981
3:35:58,880 --> 3:35:59,840
little hard to read and i'll show you

5982
3:35:59,840 --> 3:36:02,239
why see it did do that right here we had

5983
3:36:02,239 --> 3:36:04,399
chicken lips and it gave us lips chicken

5984
3:36:04,399 --> 3:36:06,239
whisker fish feathers turtle flippers

5985
3:36:06,239 --> 3:36:08,160
monkey now the problem is it took those

5986
3:36:08,160 --> 3:36:09,520
fields and just mushed them right

5987
3:36:09,520 --> 3:36:11,760
together so we could add another thing

5988
3:36:11,760 --> 3:36:13,279
in there we could kind of build this out

5989
3:36:13,279 --> 3:36
longer and we could say i also want

5990
3:36 --> 3:36:18,399
a space in there so hopefully that makes

5991
3:36:18,399 --> 3:36:20,399
sense it's going to print field 2 and

5992
3:36:20,399 --> 3:36:21,840
then it's going to print this space and

5993
3:36:21,840 --> 3:36:23,439
then it's going to print field 1. so

5994
3:36:23,439 --> 3:36:25,200
let's see if that's what we get sure

5995
3:36:25,200 --> 3:36:27,359
enough lips chicken whisker fish feather

5996
3:36:27,359 --> 3:36:29,200
turtle flippers monkey and it doesn't

5997
3:36:29,200 --> 3:36:31,359
have to be used just one time right we

5998
3:36:31,359 --> 3:36:33,439
could do this we could say i want dollar

5999
3:36:33,439 --> 3:36:35,920
sign two dollar sign two which means

6000
3:36:35,920 --> 3:36:38,080
field two field two and now we should

6001
3:36:38,080 --> 3:36:40,880
get a duplicate of each one lip slips

6002
3:36:40,880 --> 3:36:43,920
whiskers whiskers so awk just takes bits

6003
3:36:43,920 --> 3:36:45,760
of data and allows you to manipulate

6004
3:36:45,760 --> 3:36:47,760
them and do what you want with them

6005
3:36:47,760 --> 3:36:49,439
honestly the only thing i could think is

6006
3:36:49,439 --> 3:36:51,200
that the syntax for awk and said

6007
3:36:51,200 --> 3:36:53,200
intimidate people but once you get used

6008
3:36:53,200 --> 3:36:55,439
to doing it and especially with stream

6009
3:36:55,439 --> 3:36
editor the syntax is very similar to the

6010
3:36 --> 3:37:00,160
vi editor when it comes to replacing and

6011
3:37:00,160 --> 3:37:02,640
substituting things in a text file so

6012
3:37:02,640 --> 3:37:04,080
hopefully you get used to them and

6013
3:37:04,080 --> 3:37:05,760
you're not afraid of them because

6014
3:37:05,760 --> 3:37:07,680
they're super powerful and awesome tools

6015
3:37:07,680 --> 3:37:09,920
to use especially in scripts because

6016
3:37:09,920 --> 3:37:12,239
there's no interaction required you can

6017
3:37:12,239 --> 3:37:13,840
put them right inside of a script and

6018
3:37:13,840 --> 3:37:16,800
they work without you entering more data

6019
3:37:16,800 --> 3:37:19,200
hard links and soft links or symbolic

6020
3:37:19,200 --> 3:37:20,960
links as a lot of people call them are

6021
3:37:20,960 --> 3:37:23,920
very similar in what you get on the file

6022
3:37:23,920 --> 3:37:25,840
system as far as usability goes but they

6023
3:37:25,840 --> 3:37
work drastically differently so let me

6024
3:37 --> 3:37:29,680
explain the difference between them so

6025
3:37:29,680 --> 3:37:31,840
when we have a hard drive we basically

6026
3:37:31,840 --> 3:37:34,239
have every file that takes up a certain

6027
3:37:34,239 --> 3:37:36,160
number of sectors on the hard drive

6028
3:37:36,160 --> 3:37:37,760
itself so this one let's say takes up

6029
3:37:37,760 --> 3:37:40,080
three blocks this one takes up four

6030
3:37:40,080 --> 3:37:42,560
blocks this one takes up seven blocks

6031
3:37:42,560 --> 3:37:45,040
and these are the actual

6032
3:37:45,040 --> 3:37:47,520
files on the hard drive but the file

6033
3:37:47,520 --> 3:37:49,840
system actually only knows where those

6034
3:37:49,840 --> 3:37:52,560
files live because of the file

6035
3:37:52,560 --> 3:37:54,319
allocation table so this is kind of like

6036
3:37:54,319 --> 3:37:56,960
a table of contents right it says okay

6037
3:37:56,960 --> 3:38:00,960
file one is actually right here and it

6038
3:38:00,960 --> 3:38:03,439
extends three blocks this one i'll say

6039
3:38:03,439 --> 3:38:05,359
okay file two

6040
3:38:05,359 --> 3:38:07,120
this actually lives right here on the

6041
3:38:07,120 --> 3:38:10,560
hard drive and it extends four blocks

6042
3:38:10,560 --> 3:38:12,800
and then the same thing here file three

6043
3:38:12,800 --> 3:38:15,040
and you know it extends all the blocks

6044
3:38:15,040 --> 3:38:17,040
here and so on and so forth for all of

6045
3:38:17,040 --> 3:38:19,040
the other files on the system now there

6046
3:38:19,040 --> 3:38:21,120
is a difference though let's say this is

6047
3:38:21,120 --> 3:38:24,880
a symbolic link okay a symbolic link

6048
3:38:24,880 --> 3:38:26,560
doesn't point to the hard drive at all

6049
3:38:26,560 --> 3:38
it actually just points to a file in the

6050
3:38 --> 3:38:32,319
file allocation table so this is a

6051
3:38:32,319 --> 3:38:33,439
standard

6052
3:38:33,439 --> 3:38:35,199
you know table of contents link right

6053
3:38:35,199 --> 3:38:36,800
this is pointing to

6054
3:38:36,800 --> 3:38:40,640
this spot and these blocks on the hard

6055
3:38:40,640 --> 3:38:43,040
drive but the symbolic link just points

6056
3:38:43,040 --> 3:38:45,680
to filename.txt

6057
3:38:45,680 --> 3:38
on this system itself now there's the

6058
3:38 --> 3:38:49,680
other kind of link and that's a hard

6059
3:38:49,680 --> 3:38:51,120
link so you probably notice there's

6060
3:38:51,120 --> 3:38:53,199
another purple file here so let's say

6061
3:38:53,199 --> 3:38:55,760
this is file two and it's pointing to

6062
3:38:55,760 --> 3:38:58,479
you know these four blocks

6063
3:38:58,479 --> 3:39:02,239
this could be like file 12 and it points

6064
3:39:02,239 --> 3:39:05,199
to the exact same

6065
3:39:05,199 --> 3:39:07,359
spots on the hard drive so it points to

6066
3:39:07,359 --> 3:39:09,840
the exact same file location and the

6067
3:39:09,840 --> 3:39:12,080
same number of blocks it's basically the

6068
3:39:12,080 --> 3:39:15,359
exact same file but it has two different

6069
3:39:15,359 --> 3:39:17,600
reference points in the file allocation

6070
3:39:17,600 --> 3:39:20,319
table that can be really confusing but

6071
3:39:20,319 --> 3:39:22,239
what's cool about it is let's say you

6072
3:39:22,239 --> 3:39:24,399
accidentally delete this file well

6073
3:39:24,399 --> 3:39:26,640
that's okay it's still on the hard drive

6074
3:39:26,640 --> 3:39:28,399
and you can still reference it from this

6075
3:39:28,399 --> 3:39:29,680
file here so let me show you what that

6076
3:39:29,680 --> 3:39:31,600
looks like in practice in our system

6077
3:39:31,600 --> 3:39:34,319
here we have let's do an ls minus l we

6078
3:39:34,319 --> 3:39:37,040
have myfile.doc now if we wanted to do a

6079
3:39:37,040 --> 3:39:38,800
symbolic link we would do

6080
3:39:38,800 --> 3:39:41,920
ln minus s for soft or symbolic the

6081
3:39:41,920 --> 3:39:45,040
source is my file and the destination is

6082
3:39:45,040 --> 3:39:45,920
going to be

6083
3:39:45,920 --> 3:39:46,880
my

6084
3:39:46,880 --> 3:39:49,359
linked file.doc

6085
3:39:49,359 --> 3:39:51,120
do ls minus l and we're going to see it

6086
3:39:51,120 --> 3:39:52,640
actually shows us exactly what's

6087
3:39:52,640 --> 3:39:55,279
happening my linked file dot doc is just

6088
3:39:55,279 --> 3:39:58,319
pointing to the name myfile.doc

6089
3:39:58,319 --> 3:40:00,720
in fact it's just pointing to this name

6090
3:40:00,720 --> 3:40:03,199
itself so if we were to say move my

6091
3:40:03,199 --> 3:40:05,760
file.doc to my

6092
3:40:05,760 --> 3:40:08,319
new file dot doc and then we do an ls

6093
3:40:08,319 --> 3:40:10,880
minus l this link is broken because it

6094
3:40:10,880 --> 3:40
still points to the name my file.doc and

6095
3:40 --> 3:40:15,600
that doesn't exist anymore so this is

6096
3:40:15,600 --> 3:40:18,239
now a broken link on our system so

6097
3:40:18,239 --> 3:40:20,319
symbolic links are kind of dumb they

6098
3:40:20,319 --> 3:40:21,920
don't take up much space but they're

6099
3:40:21,920 --> 3:40:23,600
kind of dumb in that they don't follow a

6100
3:40:23,600 --> 3:40
file if you move it or rename it all

6101
3:40 --> 3:40:28,560
right so that is a soft link now a hard

6102
3:40:28,560 --> 3:40:30,720
link works differently a hard link if we

6103
3:40:30,720 --> 3:40:33,520
were just to say ln without any flags

6104
3:40:33,520 --> 3:40:37,760
my new file dot dock to my file dot

6105
3:40:37,760 --> 3:40:40,560
doc and then we do ls minus l well one

6106
3:40:40,560 --> 3:40:42,319
we've fixed the symbolic link right

6107
3:40:42,319 --> 3:40:44,720
because now this file points to a file

6108
3:40:44,720 --> 3:40:46,720
that exists now so all of a sudden now

6109
3:40:46,720 --> 3:40:49,600
it's pointing to this file my file.doc

6110
3:40:49,600 --> 3:40:52,479
and you'll notice it's the same size as

6111
3:40:52,479 --> 3:40:55,120
the other one and if we were to move the

6112
3:40:55,120 --> 3:40:57,120
original so we're going to say

6113
3:40:57,120 --> 3:40:58,960
move my

6114
3:40:58,960 --> 3:41:00,720
new file to

6115
3:41:00,720 --> 3:41:04,560
my cool file dot doc

6116
3:41:04,560 --> 3:41:06,960
it doesn't break the hard link that we

6117
3:41:06,960 --> 3:41:08,800
made both of them are still there

6118
3:41:08,800 --> 3:41:10,080
they're still fine they're their own

6119
3:41:10,080 --> 3:41
independent file name in the file

6120
3:41 --> 3:41:13,680
allocation table they just happen to

6121
3:41:13,680 --> 3:41:15,199
point to the same spot on the hard drive

6122
3:41:15,199 --> 3:41:17,680
and we can see that if we do ls minus li

6123
3:41:17,680 --> 3:41:20,080
for inodes it's going to show us the

6124
3:41:20,080 --> 3:41
spot on the hard drive that it's

6125
3:41 --> 3:41:23,359
actually pointing to and sure enough

6126
3:41:23,359 --> 3:41:26,239
these have a matching inode whereas this

6127
3:41:26,239 --> 3:41
symbolic link has a completely different

6128
3:41 --> 3:41:29,920
inode because it's you know just a file

6129
3:41:29,920 --> 3:41:31,840
that only points to a file name but

6130
3:41:31,840 --> 3:41:33,920
these two have the exact same spot on

6131
3:41:33,920 --> 3:41
the physical hard drive now another cool

6132
3:41 --> 3:41:37,520
thing this number here which you've

6133
3:41:37,520 --> 3:41:39,600
probably never even thought about before

6134
3:41:39,600 --> 3:41:42,399
but this says how many linked files

6135
3:41:42,399 --> 3:41:44,880
are on this inode now this says there

6136
3:41:44,880 --> 3:41:46,720
are three now of course we see two right

6137
3:41:46,720 --> 3:41:48,640
here but that means somewhere on my file

6138
3:41:48,640 --> 3:41:52,399
system there's another hard link to this

6139
3:41:52,399 --> 3:41:54,319
inode now i did actually make it before

6140
3:41:54,319 --> 3:41:56,239
we started so we could use the find

6141
3:41:56,239 --> 3:41:57,920
command to find that i'm going to say

6142
3:41:57,920 --> 3:41:58,800
find

6143
3:41:58,800 --> 3:42:00,960
i'm going to look in my home directory

6144
3:42:00,960 --> 3:42:04,080
in the same file flag and i want to find

6145
3:42:04,080 --> 3:42:05,680
the same file as

6146
3:42:05,680 --> 3:42:07,560
my file.doc or it could say

6147
3:42:07,560 --> 3:42:09,680
mycoolfile.doc because these are the

6148
3:42:09,680 --> 3:42:11,199
same files so it doesn't matter which

6149
3:42:11,199 --> 3:42:14,239
one i have find look for a match for and

6150
3:42:14,239 --> 3:42:15,840
press enter and it's going to find all

6151
3:42:15,840 --> 3:42:16,880
three of them

6152
3:42:16,880 --> 3:42:18,479
sure enough i have a hidden file right

6153
3:42:18,479 --> 3:42:20,560
here that i that i did earlier before

6154
3:42:20,560 --> 3:42:22,239
the nugget started and this is just one

6155
3:42:22,239 --> 3:42:25,120
more hard linked file to this same

6156
3:42:25,120 --> 3:42:26,800
inode we could look really quick ls

6157
3:42:26,800 --> 3:42:28,319
minus li

6158
3:42:28,319 --> 3:42:30,960
l i a so we can see the hidden files and

6159
3:42:30,960 --> 3:42:32,800
sure enough hidden file there's that

6160
3:42:32,800 --> 3:42:34,479
same inode reference that the other ones

6161
3:42:34,479 --> 3:42:36,880
are referencing now honestly soft links

6162
3:42:36,880 --> 3:42:38,479
are generally used more because they're

6163
3:42:38,479 --> 3:42:40,399
easy to see you can do an ls and see

6164
3:42:40,399 --> 3:42:41,840
where they're pointing to so they're a

6165
3:42:41,840 --> 3:42:44,160
lot more convenient but hard links do

6166
3:42:44,160 --> 3:42:47,120
have their place because each file acts

6167
3:42:47,120 --> 3:42:48,640
as an independent file you can delete

6168
3:42:48,640 --> 3:42:50,880
one and it doesn't ruin the reference

6169
3:42:50,880 --> 3:42:52,560
that the other one has so hard links

6170
3:42:52,560 --> 3:42:54,800
point to inodes soft links just point to

6171
3:42:54,800 --> 3:42:56,880
file name references of other files on

6172
3:42:56,880 --> 3:42:59,520
the existing file system

6173
3:42:59,520 --> 3:43:00,560
when you're trying to figure out the

6174
3:43:00,560 --> 3:43:02,720
location of files on your system there's

6175
3:43:02,720 --> 3:43:04,319
basically two ways you can do it there's

6176
3:43:04,319 --> 3:43:06,640
the find command and the locate command

6177
3:43:06,640 --> 3:43:09,120
and both do pretty much the same thing

6178
3:43:09,120 --> 3:43:11,600
but find is quite a bit more powerful

6179
3:43:11,600 --> 3:43
yet has some limitations over locate i'm

6180
3:43 --> 3:43:15,760
going to just show you how they work

6181
3:43:15,760 --> 3:43:17,680
because trying to explain the pros and

6182
3:43:17,680 --> 3:43:19,520
cons just seems a little bit silly when

6183
3:43:19,520 --> 3:43:21,520
we can just actually see how it works in

6184
3:43:21,520 --> 3:43:23,600
action now if we look in our documents

6185
3:43:23,600 --> 3:43:25,199
folder i have a few files here i have

6186
3:43:25,199 --> 3:43:26,960
new paper and it looks like it has camel

6187
3:43:26,960 --> 3:43
caps here capital n capital p old file

6188
3:43 --> 3:43:32,399
and research paper dot doc so let's

6189
3:43:32,399 --> 3:43:34,720
actually use the locate command first

6190
3:43:34,720 --> 3:43:37,120
because it's simple so we say locate and

6191
3:43:37,120 --> 3:43:38,399
then what we want to look for and it can

6192
3:43:38,399 --> 3:43:40,800
just be a substring so if we say old

6193
3:43:40,800 --> 3:43:42,720
file and press enter it's going to give

6194
3:43:42,720 --> 3:43:45,520
us the full path of old file.txt notice

6195
3:43:45,520 --> 3:43:46,960
i didn't have to search for the entire

6196
3:43:46,960 --> 3:43:48,720
file name i just searched for old

6197
3:43:48,720 --> 3:43:50,319
file.txt

6198
3:43:50,319 --> 3:43:52,479
or old file and it found old file.txt

6199
3:43:52,479 --> 3:43:54,239
now we can do the same for let's see

6200
3:43:54,239 --> 3:43:57,439
locate research underscore and it should

6201
3:43:57,439 --> 3:43:59,600
find research paper and sure enough

6202
3:43:59,600 --> 3:44:01,520
research paper now there was one more

6203
3:44:01,520 --> 3:44:03,680
file in there if we type locate

6204
3:44:03,680 --> 3:44:04,720
new

6205
3:44:04,720 --> 3:44:05,680
paper

6206
3:44:05,680 --> 3:44:07,680
no it doesn't find it oh did i spell it

6207
3:44:07,680 --> 3:44:09,600
wrong well let's look over here new

6208
3:44:09,600 --> 3:44:12,160
paper no i did not spell it wrong and

6209
3:44:12,160 --> 3:44:14,800
that's where the limitation of locate is

6210
3:44:14,800 --> 3:44:17,920
locate uses a database that is cached on

6211
3:44:17,920 --> 3:44:20,640
your system which means it's super duper

6212
3:44:20,640 --> 3:44:22,880
fast for searching for the names of

6213
3:44:22,880 --> 3:44:26,319
files however the cache is only created

6214
3:44:26,319 --> 3:44:28,880
once a day now we can force an update we

6215
3:44:28,880 --> 3:44:30,479
could say sudo

6216
3:44:30,479 --> 3:44:33,439
update db press enter and it's going to

6217
3:44:33,439 --> 3:44:35,520
update the database of all the file

6218
3:44:35,520 --> 3:44:37,279
names on the system and now if we just

6219
3:44:37,279 --> 3:44:40,319
do up arrow and locate new paper now

6220
3:44:40,319 --> 3:44:42,239
it's going to find it because we updated

6221
3:44:42,239 --> 3:44:45,199
the cache of all the files on the system

6222
3:44:45,199 --> 3:44:47,760
so it's very very fast but it has that

6223
3:44:47,760 --> 3:44:50,800
limitation that it uses cached data now

6224
3:44:50,800 --> 3:44:53,520
the find command is more powerful but it

6225
3:44:53,520 --> 3:44:55,120
has the limitation that because it

6226
3:44:55,120 --> 3:44:57,920
searches in real time it's a lot slower

6227
3:44:57,920 --> 3:44:59,520
so how does it work pretty much the same

6228
3:44:59,520 --> 3:45:01,279
way we're going to say find

6229
3:45:01,279 --> 3:45:02,960
and you tell it where you want it to

6230
3:45:02,960 --> 3:45:05,120
search so we can say search the root

6231
3:45:05,120 --> 3:45:06,239
directory

6232
3:45:06,239 --> 3:45:08,160
and now rather than just a file name

6233
3:45:08,160 --> 3:45:09,680
find does a lot more things so we're

6234
3:45:09,680 --> 3:45:11,520
going to say i want you to search for a

6235
3:45:11,520 --> 3:45:12,560
file

6236
3:45:12,560 --> 3:45:13,840
named

6237
3:45:13,840 --> 3:45:15,520
let's say star

6238
3:45:15,520 --> 3:45:18,720
new paper star and this should find all

6239
3:45:18,720 --> 3:45:21,680
of the files that have new paper in them

6240
3:45:21,680 --> 3:45:24,080
okay so i'm going to press enter

6241
3:45:24,080 --> 3:45:25,600
and oh my goodness what is all this

6242
3:45:25,600 --> 3:45:27,680
permission denied well find actually

6243
3:45:27,680 --> 3:45:30,160
goes through the entire file system

6244
3:45:30,160 --> 3:45:31,680
because i said search in the root

6245
3:45:31,680 --> 3:45:33,520
directory and i actually don't have

6246
3:45:33,520 --> 3:45:35,279
permission to look at all of these

6247
3:45:35,279 --> 3:45:37,120
things so it's going to search through

6248
3:45:37,120 --> 3:45:40,239
every single folder on the whole system

6249
3:45:40,239 --> 3:45:42,640
and let's see did it actually find the

6250
3:45:42,640 --> 3:45:45,920
file it should have but we have to look

6251
3:45:45,920 --> 3:45:48,160
through all the error messages and if we

6252
3:45:48,160 --> 3:45:49,840
scroll up sure enough it did find it all

6253
3:45:49,840 --> 3:45:50,960
right it did find it just like the

6254
3:45:50,960 --> 3:45:52,800
locate command but there were a lot of

6255
3:45:52,800 --> 3:45:54,239
permission denied errors now we could do

6256
3:45:54,239 --> 3:45
something like redirect the error right

6257
3:45 --> 3:45:58,960
we could say two greater than dev null

6258
3:45:58,960 --> 3:46:00,800
which will just pipe the errors into our

6259
3:46:00,800 --> 3:46:02,560
dev null bit bucket and sure enough

6260
3:46:02,560 --> 3:46
there it found it was pretty quick but

6261
3:46 --> 3:46:06,560
it wasn't as quick as using locate now

6262
3:46:06,560 --> 3:46
there are some other really cool things

6263
3:46 --> 3:46:11,279
that find can do we can say find in our

6264
3:46:11,279 --> 3:46:13,279
current home directory and what that'll

6265
3:46:13,279 --> 3:46:15,600
do is it will allow us to search in just

6266
3:46:15,600 --> 3:46:17,040
this home directory so it doesn't search

6267
3:46:17,040 --> 3:46:19,120
the entire file system so that can be

6268
3:46:19,120 --> 3:46:21,359
pretty convenient so if we say find dot

6269
3:46:21,359 --> 3:46:24,160
and we're gonna look for the name new

6270
3:46:24,160 --> 3:46:24,880
p

6271
3:46:24,880 --> 3:46:26,560
oh i didn't do the stars

6272
3:46:26,560 --> 3:46:27,920
new p

6273
3:46:27,920 --> 3:46:29,520
it should find it for us sure enough it

6274
3:46:29,520 --> 3:46:31,840
did find documents new paper and then it

6275
3:46:31,840 --> 3:46:33,359
does this other thing we can actually

6276
3:46:33,359 --> 3:46:34,880
say dash

6277
3:46:34,880 --> 3:46:36,479
delete

6278
3:46:36,479 --> 3:46:38,160
and it will delete it and how can we see

6279
3:46:38,160 --> 3:46:39,600
if it's deleted

6280
3:46:39,600 --> 3:46:41,520
if we look in the documents folder whoa

6281
3:46:41,520 --> 3:46:43,760
it deleted that file so find does more

6282
3:46:43,760 --> 3:46:46,640
than just locate files however it has

6283
3:46:46,640 --> 3:46:48,720
some finicky things like this it's going

6284
3:46:48,720 --> 3:46:50,239
to be using regular expressions to

6285
3:46:50,239 --> 3:46:52,239
search for the files and while it's more

6286
3:46:52,239 --> 3:46
powerful it's slower and it can be

6287
3:46 --> 3:46:56,080
annoying when we do things like get

6288
3:46:56,080 --> 3:46:58,319
errors from permission denied things

6289
3:46:58,319 --> 3:47:00,960
like that so while conceptually find and

6290
3:47:00,960 --> 3:47:03,120
locate do the same thing they do them in

6291
3:47:03,120 --> 3:47:04,560
different ways the important thing to

6292
3:47:04,560 --> 3:47:06,399
remember about locate is that it's

6293
3:47:06,399 --> 3:47:08,479
always going to use old data unless you

6294
3:47:08,479 --> 3:47:11,120
run that update db command now find is

6295
3:47:11,120 --> 3:47:13,199
much more powerful but it works in real

6296
3:47:13,199 --> 3:47:15,600
time so it's slower and there that means

6297
3:47:15,600 --> 3:47:17,439
that there are pros and cons to using

6298
3:47:17,439 --> 3:47:19,680
both tools

6299
3:47:19,680 --> 3:47:21,760
while it's certainly possible to set up

6300
3:47:21,760 --> 3:47:23,760
network shares for copying files from

6301
3:47:23,760 --> 3:47:25,520
one server to another generally if

6302
3:47:25,520 --> 3:47:26,800
you're going to copy files over the

6303
3:47:26,800 --> 3:47:28,720
network from linux server to linux

6304
3:47:28,720 --> 3:47:31,040
server you're going to use either ssh or

6305
3:47:31,040 --> 3:47:33,520
really scp which stands for secure copy

6306
3:47:33,520 --> 3:47:36,720
but it uses the ssh protocol in order to

6307
3:47:36,720 --> 3:47:39,279
do that copying or rsync which actually

6308
3:47:39,279 --> 3:47:41,680
will sync a whole bunch of files across

6309
3:47:41,680 --> 3:47:43,199
the network so we're going to look at

6310
3:47:43,199 --> 3:47:45,040
doing both but it's important to realize

6311
3:47:45,040 --> 3:47:47,760
that ssh is the same program and the

6312
3:47:47,760 --> 3:47:49,359
same protocol that we use to connect

6313
3:47:49,359 --> 3:47:51,600
from one computer to another to reach

6314
3:47:51,600 --> 3:47:53,199
its terminal so let me show you what i

6315
3:47:53,199 --> 3:47:55,359
mean now i have two computers set up in

6316
3:47:55,359 --> 3:47:57,760
our lab i have this ubuntu computer and

6317
3:47:57,760 --> 3:47:59,439
i have this sent os computer they're

6318
3:47:59,439 --> 3:48:02,640
both on the same network so i'm going to

6319
3:48:02,640 --> 3:48:04,640
ssh from one to another i'm going to say

6320
3:48:04,640 --> 3:48
ssh to centos it's going to ask me for

6321
3:48 --> 3:48
bob's password on centos

6322
3:48 --> 3:48:11,840
and then all of a sudden now i'm logged

6323
3:48:11,840 --> 3:48:14,479
in to that remote computer sent to us in

6324
3:48:14,479 --> 3:48:16,960
fact if we go into the desktop folder

6325
3:48:16,960 --> 3:48:19,040
and we do an ls we're going to see over

6326
3:48:19,040 --> 3:48:20,800
on sent to us we have things called like

6327
3:48:20,800 --> 3:48:23,040
cool picture cool pic 2 and these things

6328
3:48:23,040 --> 3:48:25,279
are on the remote desktop all right i'm

6329
3:48:25,279 --> 3:48:26,800
going to exit and that's going to bring

6330
3:48:26,800 --> 3:48:28,880
me back to ubuntu now if we look on the

6331
3:48:28,880 --> 3:48:30,479
desktop folder we're going to see

6332
3:48:30,479 --> 3:48:31,840
there's nothing in there because on our

6333
3:48:31,840 --> 3:48:33,600
local ubuntu computer we don't have

6334
3:48:33,600 --> 3:48
those things let's say we wanted to copy

6335
3:48 --> 3:48:38,160
something over well let's go into our

6336
3:48:38,160 --> 3:48:40,160
desktop folder again there's nothing

6337
3:48:40,160 --> 3:48:42,239
here nothing up our sleeve we could use

6338
3:48:42,239 --> 3:48:43,760
scp

6339
3:48:43,760 --> 3:48:46,319
which is secure copy and this uses ssh

6340
3:48:46,319 --> 3:48:49,439
right so we would say scp from

6341
3:48:49,439 --> 3:48:51,439
centos now we could also specify a

6342
3:48:51,439 --> 3:48:53,120
different user now it's the same user

6343
3:48:53,120 --> 3:48:54,800
for us but i'm still going to specify

6344
3:48:54,800 --> 3:48:57,920
i'm going to say bob at centos

6345
3:48:57,920 --> 3:49:00,239
colon then the remote path which is

6346
3:49:00,239 --> 3:49:01,840
going to be home

6347
3:49:01,840 --> 3:49:02,880
bob

6348
3:49:02,880 --> 3:49:04,800
desktop and let's pick one of these

6349
3:49:04,800 --> 3:49:08,439
files i'm going to say cool picture cool

6350
3:49:08,439 --> 3:49:10,960
picture.jpg and i want it to copy it to

6351
3:49:10,960 --> 3:49:12,800
dot which means our current directory

6352
3:49:12,800 --> 3:49:13,920
i'm going to press enter it's going to

6353
3:49:13,920 --> 3:49:16,800
say okay what is bob's password bob and

6354
3:49:16,800 --> 3:49:18,239
now if we do an ls we're going to say

6355
3:49:18,239 --> 3:49:19,760
look we have cool picture that was

6356
3:49:19,760 --> 3:49:22,800
copied over the network using scp which

6357
3:49:22,800 --> 3:49:25,120
uses the ssh protocol and it was copied

6358
3:49:25,120 --> 3:49:27,439
over and now we have a copy of it here

6359
3:49:27,439 --> 3:49:28,640
locally we can do the same thing we

6360
3:49:28,640 --> 3:49:31,279
could say scp a local thing and rather

6361
3:49:31,279 --> 3:49:32,720
than the destination be our local

6362
3:49:32,720 --> 3:49:34,080
computer we could do it backwards right

6363
3:49:34,080 --> 3:49:35,279
we could say

6364
3:49:35,279 --> 3:49:36,520
scp

6365
3:49:36,520 --> 3:49:40,160
coolpicture.jpg to bob at centos

6366
3:49:40,160 --> 3:49:42,160
home bob i'm going to copy it just to

6367
3:49:42,160 --> 3:49:44,319
his home folder and so now it's sent one

6368
3:49:44,319 --> 3:49:47,120
over to bob's home folder now we could

6369
3:49:47,120 --> 3:49:49,120
copy everything all at once if we wanted

6370
3:49:49,120 --> 3:49:52,560
by using the rsync command now rsync is

6371
3:49:52,560 --> 3:49:54,640
pretty cool in that it will even recurse

6372
3:49:54,640 --> 3:49:56,880
directories if we wanted to so we could

6373
3:49:56,880 --> 3:49:59,680
actually do this we could say rsync i'm

6374
3:49:59,680 --> 3:50:01,760
going to say minus a so it does all the

6375
3:50:01,760 --> 3:50:04,560
things including recursively going into

6376
3:50:04,560 --> 3:50:06,239
directories i'm going to say v so it

6377
3:50:06,239 --> 3:50:07,760
does it verbosely so we can see what

6378
3:50:07,760 --> 3:50:10,560
it's doing so rsync dash av and the

6379
3:50:10,560 --> 3:50:12,399
remote thing is set up just like with

6380
3:50:12,399 --> 3:50:15,199
scp so bob at

6381
3:50:15,199 --> 3:50:17,199
centos or we don't have to say bob add

6382
3:50:17,199 --> 3:50:18,800
if it's the same username we could just

6383
3:50:18,800 --> 3:50:20,560
say centos

6384
3:50:20,560 --> 3:50:24,479
colon and then the path so i want home

6385
3:50:24,479 --> 3:50
bob desktop i want that entire folder

6386
3:50 --> 3:50:30,800
copied to here so what we should end up

6387
3:50:30,800 --> 3:50
with is a new folder inside our ubuntu

6388
3:50 --> 3:50:35,840
desktop folder called desktop because

6389
3:50:35,840 --> 3:50:38,319
it's going to copy this folder to our

6390
3:50:38,319 --> 3:50:39,520
current thing and it's going to have

6391
3:50:39,520 --> 3:50:42,080
recursively everything in the remote

6392
3:50:42,080 --> 3:50:43,439
desktop folder let's see if that works

6393
3:50:43,439 --> 3:50:44,880
press enter it's going to say what is

6394
3:50:44,880 --> 3:50:46,960
bob's password bob

6395
3:50:46,960 --> 3:50:48,640
and so now it says receiving all of

6396
3:50:48,640 --> 3:50:50,479
these files and look sure enough there's

6397
3:50:50,479 --> 3:50:52,080
a folder called desktop if we were to

6398
3:50:52,080 --> 3:50:54,160
look inside there now i look all those

6399
3:50:54,160 --> 3:50:56,080
files that were on that remote computer

6400
3:50:56,080 --> 3:50:58,399
are now on our local computer as well we

6401
3:50:58,399 --> 3:51:01,359
used rsync and it will transverse all of

6402
3:51:01,359 --> 3:51:03,359
the directories recursively and it will

6403
3:51:03,359 --> 3:51:05,359
copy it over for us now this might seem

6404
3:51:05,359 --> 3:51:07,040
like a throwaway nugget something that

6405
3:51:07,040 --> 3:51:08,319
is just nice to know but you're not

6406
3:51:08,319 --> 3:51:10,880
going to use i'll be honest i use scp

6407
3:51:10,880 --> 3:51:13,920
and rsync almost every single day

6408
3:51:13,920 --> 3:51:16,479
copying files back and forth using scp

6409
3:51:16,479 --> 3:51:18,560
is so easy and so fast you don't have to

6410
3:51:18,560 --> 3:51:20,800
set up servers it's just a way to get

6411
3:51:20,800 --> 3:51:23,199
one file to another server without

6412
3:51:23,199 --> 3:51:24,800
having to worry about installing

6413
3:51:24,800 --> 3:51:27,359
anything because it uses ssh which is

6414
3:51:27,359 --> 3:51:29,680
already installed on all of your servers

6415
3:51:29,680 --> 3:51:31,279
so whether you just want to copy a file

6416
3:51:31,279 --> 3:51:33,199
or two with scp or you want to do

6417
3:51:33,199 --> 3:51:35,359
recursive directories with rsync it's

6418
3:51:35,359 --> 3:51:37,359
really easy to copy files over the

6419
3:51:37,359 --> 3:51:39,520
network in linux

6420
3:51:39,520 --> 3:51:41,600
pretty much every distribution out there

6421
3:51:41,600 --> 3:51:44,720
uses system d to manage the services

6422
3:51:44,720 --> 3:51:46,399
like the various programs that are

6423
3:51:46,399 --> 3:51:48,080
installed like web servers and stuff on

6424
3:51:48,080 --> 3:51:50,239
their system and system ctl is the

6425
3:51:50,239 --> 3:51:52,239
command line tool that we use to

6426
3:51:52,239 --> 3:51:54,720
manipulate and manage those services now

6427
3:51:54,720 --> 3:51
there's a couple concepts we need to

6428
3:51 --> 3:51:57,920
understand we need to know enable and

6429
3:51:57,920 --> 3:52:01,199
disable versus start and stop enable and

6430
3:52:01,199 --> 3:52:03,279
disable is basically talking about when

6431
3:52:03,279 --> 3:52:04,960
the computer boots up will it

6432
3:52:04,960 --> 3:52:06,720
automatically start

6433
3:52:06,720 --> 3:52:08,560
the service and so you can have

6434
3:52:08,560 --> 3:52:10,319
something that you can start and stop

6435
3:52:10,319 --> 3:52:11,840
but that doesn't mean it's automatically

6436
3:52:11,840 --> 3:52:13,520
going to start or stop when the system

6437
3:52:13,520 --> 3:52:14,880
boots up that's where the enable and

6438
3:52:14,880 --> 3:52:16,640
disable comes into play now it's really

6439
3:52:16,640 --> 3:52:18,560
really easy to tell what a service is

6440
3:52:18,560 --> 3:52:21,120
doing by default and we can change it

6441
3:52:21,120 --> 3:52:23,359
without much more difficulty at all so

6442
3:52:23,359 --> 3:52:24,880
i'm at a computer right now and i've

6443
3:52:24,880 --> 3:52:27,840
installed apache 2 on this centos

6444
3:52:27,840 --> 3:52:30,560
machine so httpd is the package name and

6445
3:52:30,560 --> 3:52:32,880
i've installed it however if we go over

6446
3:52:32,880 --> 3:52:34,880
here we can see localhost it's unable to

6447
3:52:34,880 --> 3:52:36,960
connect it's not running so the first

6448
3:52:36,960 --> 3:52:40,319
thing we would do is say systemctl

6449
3:52:40,319 --> 3:52:43,120
status httpd and it's actually giving us

6450
3:52:43,120 --> 3:52:45,359
more information than it first appears

6451
3:52:45,359 --> 3:52:47,359
see it's telling us that it's actually

6452
3:52:47,359 --> 3:52:48,960
inactive which makes sense because we

6453
3:52:48,960 --> 3:52:50,960
can't get it to load but more

6454
3:52:50,960 --> 3:52:53,120
importantly it's saying that the service

6455
3:52:53,120 --> 3:52:56,880
itself is disabled and the vendor preset

6456
3:52:56,880 --> 3:52:58,880
meaning like when you first install it

6457
3:52:58,880 --> 3:53:01,520
it's set to disabled so we can change

6458
3:53:01,520 --> 3:53:03,199
that because if it's disabled it means

6459
3:53:03,199 --> 3:53:04,160
it's not going to start when the

6460
3:53:04,160 --> 3:53:05,840
computer boots so even if we rebooted

6461
3:53:05,840 --> 3:53:08,080
this computer it still wouldn't load

6462
3:53:08,080 --> 3:53
because it wouldn't start by default so

6463
3:53 --> 3:53:12,880
we can say system ctl

6464
3:53:12,880 --> 3:53:15,120
enable httpd

6465
3:53:15,120 --> 3:53:16,640
and press enter and now if we do that

6466
3:53:16,640 --> 3:53
status we're going to see that it's

6467
3:53 --> 3:53:20,960
changed okay it says it's enabled even

6468
3:53:20,960 --> 3:53:22,640
though the vendor preset is still

6469
3:53:22,640 --> 3:53:24,399
disabled this means that you know when

6470
3:53:24,399 --> 3:53:25,840
we installed it it was disabled but

6471
3:53:25,840 --> 3:53:27,680
we've changed it now so it's enabled but

6472
3:53:27,680 --> 3:53:28,880
you'll notice

6473
3:53:28,880 --> 3:53:31,359
it's still inactive or dead now if we

6474
3:53:31,359 --> 3:53:33,040
did restart the computer it would

6475
3:53:33,040 --> 3:53:35,120
automatically start up but we can start

6476
3:53:35,120 --> 3:53:37,040
and stop it independently from whether

6477
3:53:37,040 --> 3:53:39,279
it's enabled or disabled as not we can

6478
3:53:39,279 --> 3:53:42,880
just say system cto start httpd and it's

6479
3:53:42,880 --> 3:53:44,880
going to start our service we can look

6480
3:53:44,880 --> 3:53:47,040
at status httpd and we can see sure

6481
3:53:47,040 --> 3:53:49,840
enough now that it's active right it's

6482
3:53:49,840 --> 3:53:52,239
running and it's still enabled so when

6483
3:53:52,239 --> 3:53:53,920
we reboot it's going to start running

6484
3:53:53,920 --> 3:53:56,160
automatically now even if we left this

6485
3:53:56,160 --> 3:53:59,120
disabled we could still have started it

6486
3:53:59,120 --> 3:54:01,920
using the start command however when the

6487
3:54:01,920 --> 3:54:03,600
computer rebooted it wouldn't start

6488
3:54:03,600 --> 3:54:04,800
automatically so if you want it to

6489
3:54:04,800 --> 3:54:06,319
always start up you have to make sure

6490
3:54:06,319 --> 3:54:08,319
that it's enabled even if it comes

6491
3:54:08,319 --> 3:54:11,279
disabled by default just a quick look

6492
3:54:11,279 --> 3:54:12,720
boom it's running and sure enough it's

6493
3:54:12,720 --> 3:54:14,720
right there running for us and it will

6494
3:54:14,720 --> 3:54:16,319
run when the computer reboots because

6495
3:54:16,319 --> 3:54:18,239
we've changed it to enabled i really

6496
3:54:18,239 --> 3:54:20,560
like systemd because systemctl is kind

6497
3:54:20,560 --> 3:54:22,479
of the one-stop shop it's like the swiss

6498
3:54:22,479 --> 3:54:24,640
army knife for managing services on a

6499
3:54:24,640 --> 3:54:25,920
computer that's controlled with the

6500
3:54:25,920 --> 3:54:28,960
systemd startup init service

6501
3:54:28,960 --> 3:54:32,239
sys5 or sysv or system five it's called

6502
3:54:32,239 --> 3:54:33,920
a lot of different things but this is an

6503
3:54:33,920 --> 3:54:36,880
older way that linux systems would put

6504
3:54:36,880 --> 3:54:39,120
themselves in various modes or run

6505
3:54:39,120 --> 3:54:41,279
levels that determine the type of system

6506
3:54:41,279 --> 3:54:43,199
whether it's a gui system whether it's

6507
3:54:43,199 --> 3:54:46,080
just a standalone network system and we

6508
3:54:46,080 --> 3:54
can switch those various modes we can

6509
3:54 --> 3:54:49,840
set defaults to those modes but it's

6510
3:54:49,840 --> 3:54:51,680
important to understand what the modes

6511
3:54:51,680 --> 3:54:53,680
actually are and there's a whole list of

6512
3:54:53,680 --> 3:54:55,920
them unfortunately the modes are

6513
3:54:55,920 --> 3:54:57,680
different in debian

6514
3:54:57,680 --> 3:55:00,239
and centos or debbie and ubuntu centos

6515
3:55:00,239 --> 3:55:02,479
souza they actually use the various

6516
3:55:02,479 --> 3:55:03,920
levels differently so i just want to

6517
3:55:03,920 --> 3:55:05,279
briefly go over the difference so that

6518
3:55:05,279 --> 3:55:06,560
if you're on one system you kind of

6519
3:55:06,560 --> 3:55:08,800
understand what's going on so centos

6520
3:55:08,800 --> 3:55:10,239
actually separates them the most so

6521
3:55:10,239 --> 3:55:12,399
let's go here first we have run level

6522
3:55:12,399 --> 3:55:14,800
zero and run level zero is basically if

6523
3:55:14,800 --> 3:55:17,600
you go into this mode it halts the

6524
3:55:17,600 --> 3:55:19,279
system this is like a way to power the

6525
3:55:19,279 --> 3:55:21,920
system down run level one is single user

6526
3:55:21,920 --> 3:55:23,359
mode there's no networking or anything

6527
3:55:23,359 --> 3:55:24,960
and there's no asking for the root

6528
3:55:24,960 --> 3:55:26,640
password this is the way that you would

6529
3:55:26,640 --> 3:55:29,600
recover a root password on a sys5

6530
3:55:29,600 --> 3:55:33,600
computer mode 2 is multi-user with no

6531
3:55:33,600 --> 3:55:36,960
network 3 is multi-user with network 4

6532
3:55:36,960 --> 3:55:40,160
is not used at all with centos and 5 is

6533
3:55:40,160 --> 3:55:42,399
the multi-user gui system like if you

6534
3:55:42,399 --> 3:55:45,120
have x windows installed and then lastly

6535
3:55:45,120 --> 3:55:47,199
run level six is reboot if you switch

6536
3:55:47,199 --> 3:55:49,760
into run level six it will then reboot

6537
3:55:49,760 --> 3:55:51,600
your computer and it will go into

6538
3:55:51,600 --> 3:55:53,840
whichever default is set now debian

6539
3:55:53,840 --> 3:55:55,920
ubuntu are similar

6540
3:55:55,920 --> 3:55:58,560
halt is the same reboot is the same

6541
3:55:58,560 --> 3:56:00,160
single user mode is the same the

6542
3:56:00,160 --> 3:56:01,520
difference is here

6543
3:56:01,520 --> 3:56:04,960
two run level two is the full multi-user

6544
3:56:04,960 --> 3:56:08,319
system just like run level three is here

6545
3:56:08,319 --> 3:56:10,160
and then if there's a gui installed on

6546
3:56:10,160 --> 3:56:12,319
the system the gui will start up there's

6547
3:56:12,319 --> 3:56:15,279
no difference in debian ubuntu between

6548
3:56:15,279 --> 3:56:17,840
having a gui system and having a not gui

6549
3:56:17,840 --> 3:56:19,680
system when it comes to run levels

6550
3:56:19,680 --> 3:56:21,760
that's only if the gui is installed so

6551
3:56:21,760 --> 3:56:23,840
run level 2 is pretty much what we use

6552
3:56:23,840 --> 3:56:25,359
all the time when we're in debian and

6553
3:56:25,359 --> 3:56:27,040
ubuntu run levels three through five

6554
3:56:27,040 --> 3:56:28,800
don't do anything at all they're just

6555
3:56:28,800 --> 3:56:31,359
not used so that's the big big

6556
3:56:31,359 --> 3:56:33,199
difference between the two we still have

6557
3:56:33,199 --> 3:56:35,199
reboot we still have halt we still have

6558
3:56:35,199 --> 3:56:36,880
single user mode but it's how they

6559
3:56:36,880 --> 3:56:38,080
handle the other things that are a

6560
3:56:38,080 --> 3:56:39,520
little bit different now switching

6561
3:56:39,520 --> 3:56:41,279
between them and setting the defaults

6562
3:56:41,279 --> 3:56:43,199
are exactly the same now here's the

6563
3:56:43,199 --> 3:56:45,279
gotcha it took me a long time to find a

6564
3:56:45,279 --> 3:56:47,760
system that still uses sys5. this is

6565
3:56:47,760 --> 3:56
outmoded and not used in any modern

6566
3:56 --> 3:56:52,560
distributions but if you go if you find

6567
3:56:52,560 --> 3:56:53,920
one that is still in use like this is

6568
3:56:53,920 --> 3:56:57,199
centos version six it will still use it

6569
3:56:57,199 --> 3:56:59,840
so what we can do we can say run level

6570
3:56:59,840 --> 3:57:01,439
and it will show us what run level we're

6571
3:57:01,439 --> 3:57:03,680
in we're in run level five

6572
3:57:03,680 --> 3:57:06,080
and the previous run level we're in was

6573
3:57:06,080 --> 3:57:08,080
just a new boot okay now if we want to

6574
3:57:08,080 --> 3:57:10,479
switch between run levels we can say

6575
3:57:10,479 --> 3:57:12,800
tell init and then the run level we want

6576
3:57:12,800 --> 3:57:14,239
to switch to so i'm going to say 3. this

6577
3:57:14,239 --> 3:57:16,239
should drop us out of a gui

6578
3:57:16,239 --> 3:57:19,439
and into a text only environment you can

6579
3:57:19,439 --> 3:57:20,880
see here there's no gui there's just

6580
3:57:20,880 --> 3:57:23,040
this text box right here so i'm going to

6581
3:57:23,040 --> 3:57:25,840
log in so we can go back if i want to go

6582
3:57:25,840 --> 3:57:28,239
back into the gui system i can say tell

6583
3:57:28,239 --> 3:57:30,720
init 5 and it'll get us right back into

6584
3:57:30,720 --> 3:57:32,720
the gui system and here we are in the

6585
3:57:32,720 --> 3:57:35,199
gui system if i start up

6586
3:57:35,199 --> 3:57:37,520
a terminal and we say run level we're

6587
3:57:37,520 --> 3:57:39,439
gonna see we're currently in run level

6588
3:57:39,439 --> 3:57:42,399
five our previous run level was three

6589
3:57:42,399 --> 3:57:44,720
now if we switch into run level six it's

6590
3:57:44,720 --> 3:57:46,319
going to reboot if we switch into run

6591
3:57:46,319 --> 3:57:48,720
level zero it's going to just halt the

6592
3:57:48,720 --> 3:57:50,479
computer and power it down if you want

6593
3:57:50,479 --> 3:57:52,160
to change the default and the default is

6594
3:57:52,160 --> 3:57:53,760
just what run level it automatically

6595
3:57:53,760 --> 3:57:56,160
boots into we need to edit a file so i'm

6596
3:57:56,160 --> 3:57:58,319
going to become root and we need to edit

6597
3:57:58,319 --> 3:58:00,319
etc init

6598
3:58:00,319 --> 3:58:01,359
tab

6599
3:58:01,359 --> 3:58:02,880
and this file has a couple things we can

6600
3:58:02,880 --> 3:58:04,479
edit but really the main thing is all

6601
3:58:04,479 --> 3:58:06,160
the way down at the bottom which is the

6602
3:58:06,160 --> 3:58:07,680
default run level now it gives us a

6603
3:58:07,680 --> 3:58:09,600
little bit of a cheat sheet here and

6604
3:58:09,600 --> 3:58:11,199
this is actually really really good

6605
3:58:11,199 --> 3:58:12,160
advice

6606
3:58:12,160 --> 3:58:14,720
the halt mode run level 0 do not set

6607
3:58:14,720 --> 3:58:16,239
your init default to this because it'll

6608
3:58:16,239 --> 3:58:17,840
boot up and immediately halt and that's

6609
3:58:17,840 --> 3:58:19,600
not what we want same thing with setting

6610
3:58:19,600 --> 3:58:22,160
it to run level 6. it will boot up and

6611
3:58:22,160 --> 3:58
switch immediately into run level 6

6612
3:58 --> 3:58:25,439
which is reboot so it's going to be in a

6613
3:58:25,439 --> 3:58:27,520
constant reboot loop so you never want

6614
3:58:27,520 --> 3:58:29,680
to set the default to that ours is

6615
3:58:29,680 --> 3:58:31,199
currently in

6616
3:58:31,199 --> 3:58:33,920
run level five for the default and it's

6617
3:58:33,920 --> 3:58:36,640
right here now we could change that to

6618
3:58:36,640 --> 3:58:37,680
three

6619
3:58:37,680 --> 3:58:39,600
save this file and now when we reboot

6620
3:58:39,600 --> 3:58:40,960
the computer it's just going to

6621
3:58:40,960 --> 3:58:44,399
automatically go into the text only mode

6622
3:58:44,399 --> 3:58:45,600
i'll just show you really quick what

6623
3:58:45,600 --> 3:58:46,800
happens if we

6624
3:58:46,800 --> 3:58:49,120
telling it into run level six

6625
3:58:49,120 --> 3:58:50,880
it's going to reboot that's what it does

6626
3:58:50,880 --> 3:58:52,800
so if you run across an older system

6627
3:58:52,800 --> 3:58:55,760
that uses run levels specifically system

6628
3:58:55,760 --> 3:58:57,520
five run levels you need to know what

6629
3:58:57,520 --> 3:58:59,279
the various modes do and remember it's

6630
3:58:59,279 --> 3:59:00,319
going to be different whether it's

6631
3:59:00,319 --> 3:59:02,960
ubuntu ubuntu and debian or centos and

6632
3:59:02,960 --> 3:59:04,560
red hat and then you need to know how to

6633
3:59:04,560 --> 3:59:06,560
switch the modes using telonit and how

6634
3:59:06,560 --> 3:59:08,720
to set those defaults and most

6635
3:59:08,720 --> 3:59:10,560
importantly what not to set the defaults

6636
3:59:10,560 --> 3:59:15,040
to namely run level 0 or run level 6.

6637
3:59:15,040 --> 3:59:17,279
i often find myself on a system thinking

6638
3:59:17,279 --> 3:59:19,040
what if i need to switch between modes

6639
3:59:19,040 --> 3:59:20,880
like i have a gui machine that i want to

6640
3:59:20,880 --> 3:59:22,479
get rid of that gui interface so it's

6641
3:59:22,479 --> 3:59:24,880
just a server with the text mode or vice

6642
3:59:24,880 --> 3:59:26,960
versa well switching modes and setting

6643
3:59:26,960 --> 3:59:29,120
the defaults is done one way with the

6644
3:59:29,120 --> 3:59:31,680
sys5 system but if you have a newer

6645
3:59:31,680 --> 3:59:33,120
system d

6646
3:59:33,120 --> 3:59:35,120
initialization system it can be very

6647
3:59:35,120 --> 3:59:37,120
very confusing especially if you have

6648
3:59:37,120 --> 3:59:39,600
that cis 5 background thankfully there

6649
3:59:39,600 --> 3:59:42,080
are pretty simple comparisons when it

6650
3:59:42,080 --> 3:59:43,840
comes to how it used to be and how it

6651
3:59:43,840 --> 3:59
currently is now if you're not familiar

6652
3:59 --> 3:59:48,880
with init 5 or with sys5 init that's all

6653
3:59:48,880 --> 3:59
right we're just going to talk about

6654
3:59 --> 3:59:52,560
what the various modes are basically we

6655
3:59:52,560 --> 3:59:55,040
start with run level zero which has a

6656
3:59:55,040 --> 3:59:58,399
correlation in the system d world as a

6657
3:59:58,399 --> 4:00:01,600
boot target called power off now boot

6658
4:00:01,600 --> 4:00
targets are basically just modes right

6659
4:00 --> 4:00:06,640
these are modes that computers are are

6660
4:00:06,640 --> 4:00:08,479
set to so that they can function in a

6661
4:00:08,479 --> 4:00:10,640
specific way and while it doesn't seem

6662
4:00:10,640 --> 4:00:12,880
like a mode it's a really easy way to

6663
4:00:12,880 --> 4:00:14,479
shut your computer down by switching

6664
4:00:14,479 --> 4:00:17,520
into the power off mode now there's also

6665
4:00:17,520 --> 4:00:20,080
one this is single user mode in the

6666
4:00:20,080 --> 4:00:22,080
world of systemd it's called rescue mode

6667
4:00:22,080 --> 4:00:24,399
this is like insist five if you want to

6668
4:00:24,399 --> 4:00:26,160
like reset your root password you need

6669
4:00:26,160 --> 4:00
to switch into single user mode well

6670
4:00 --> 4:00:29,600
same thing with a boot target it's just

6671
4:00:29,600 --> 4:00:31,840
called rescue mode then there's mode

6672
4:00:31,840 --> 4:00:34,239
three which in a centos system is going

6673
4:00:34,239 --> 4:00:36,800
to be like a non-graphical user

6674
4:00:36,800 --> 4:00:39,040
interface with networking support that

6675
4:00:39,040 --> 4:00:41,520
translates to just multi-user target in

6676
4:00:41,520 --> 4:00:45,040
system d uh the gui mode 5 translates to

6677
4:00:45,040 --> 4:00:47,680
graphical target and of course 6 is like

6678
4:00:47,680 --> 4:00:50,720
the the compatriot to run level zero and

6679
4:00:50,720 --> 4:00:52,479
this is how you can reboot your system

6680
4:00:52,479 --> 4:00:55,199
by switching into run level six or boot

6681
4:00:55,199 --> 4:00
target reboot now switching between them

6682
4:00 --> 4:01
is actually easier than it is with the

6683
4:01 --> 4:01:02,160
old sys5 you can actually just use a

6684
4:01:02,160 --> 4:01:04,560
command line tool instead of editing

6685
4:01:04,560 --> 4:01:06,239
that init tab file that you have to do

6686
4:01:06,239 --> 4:01:09,600
with sys5 now i'm on centos version 7

6687
4:01:09,600 --> 4:01:11,600
here because centos version 7 uses

6688
4:01:11,600 --> 4:01
system d whereas centos version 6 uses

6689
4:01 --> 4:01:15,760
sys5. now the first thing you need to do

6690
4:01:15,760 --> 4:01:17,600
is be root so i'm going to quickly

6691
4:01:17,600 --> 4:01:20,319
become root once we're root we can type

6692
4:01:20,319 --> 4:01:22,560
system ctl which is the way we do most

6693
4:01:22,560 --> 4:01:26,080
things with system d but system ctl get

6694
4:01:26,080 --> 4:01:27,840
default and this is going to tell us

6695
4:01:27,840 --> 4:01:29,439
what the default mode is and that makes

6696
4:01:29,439 --> 4:01:31,600
sense because our default mode here is

6697
4:01:31,600 --> 4:01:33,600
graphical target and you can see we have

6698
4:01:33,600 --> 4:01:36,160
a gui interface now we could change that

6699
4:01:36,160 --> 4:01:38,960
we could say system ctl

6700
4:01:38,960 --> 4:01:39,760
set

6701
4:01:39,760 --> 4:01:44,399
default to multi-user.target

6702
4:01:44,399 --> 4:01:46,399
and see now it's changed that so if we

6703
4:01:46,399 --> 4:01:47,840
say get default it's going to tell us

6704
4:01:47,840 --> 4:01:49,600
okay now it's multi-user but notice it

6705
4:01:49,600 --> 4:01:51,439
didn't change we're still in the gui

6706
4:01:51,439 --> 4:01:53,199
environment well that's because it just

6707
4:01:53,199 --> 4:01:55,120
changed the default if we were to reboot

6708
4:01:55,120 --> 4:01:57,520
this computer it would reboot into a

6709
4:01:57,520 --> 4:01:59,840
text only mode now if you want to switch

6710
4:01:59,840 --> 4:02:02,479
between modes or between targets with a

6711
4:02:02,479 --> 4:02:04,160
computer that's already started you

6712
4:02:04,160 --> 4:02
simply type system

6713
4:02 --> 4:02:07,439
ctl

6714
4:02:07,439 --> 4:02:09,920
isolate and then the name of the target

6715
4:02:09,920 --> 4:02:12,840
in our case let's say isolate

6716
4:02:12,840 --> 4:02:15,040
multi-user and it should drop us

6717
4:02:15,040 --> 4:02:17,680
directly into sure enough the text only

6718
4:02:17,680 --> 4:02:19,920
mode now if you're already used to the

6719
4:02:19,920 --> 4:02
world of run levels you just have to

6720
4:02 --> 4:02:24,080
kind of think what the different targets

6721
4:02:24,080 --> 4:02:25,680
that correspond to it are but if you're

6722
4:02:25,680 --> 4:02:27,359
not familiar with run levels like this

6723
4:02:27,359 --> 4:02:29,120
is something that happened before your

6724
4:02:29,120 --> 4:02:30,800
time in linux that's okay because

6725
4:02:30,800 --> 4:02:33,120
honestly boot targets make a heck of a

6726
4:02:33,120 --> 4:02:36,080
lot more sense than the run levels did

6727
4:02:36,080 --> 4:02:37,439
because they actually have their

6728
4:02:37,439 --> 4:02:39,680
description right in their names and

6729
4:02:39,680 --> 4:02:41,920
while it's important to understand both

6730
4:02:41,920 --> 4:02:44,800
sys5 and system d you should know that

6731
4:02:44,800 --> 4:02:46,560
all systems going forward are going to

6732
4:02:46,560 --> 4:02:49,279
be system d so you're gonna have to know

6733
4:02:49,279 --> 4:02:50,880
about the various modes how to switch

6734
4:02:50,880 --> 4:02:53,120
between them using isolate and then how

6735
4:02:53,120 --> 4:02:55,600
to set and get the default so you know

6736
4:02:55,600 --> 4:02:57,120
what happens to a system when it boots

6737
4:02:57,120 --> 4:02:59,359
up so you don't have your rack servers

6738
4:02:59,359 --> 4:03:01,040
booting up to a gui environment because

6739
4:03:01,040 --> 4:03:04,640
that just doesn't make any sense

6740
4:03:04,640 --> 4:03:07,120
services are the various programs that

6741
4:03:07,120 --> 4:03:08,720
are installed on a server that are going

6742
4:03:08,720 --> 4:03:10,720
to run and serve out like web pages or

6743
4:03:10,720 --> 4:03:12,080
whatever you might have installed

6744
4:03:12,080 --> 4:03
they're called services and if you have

6745
4:03 --> 4:03:16,640
sys5 on your computer the way that you

6746
4:03:16,640 --> 4:03:18,720
manage and start and set defaults for

6747
4:03:18,720 --> 4:03:21,199
those individual services are by using

6748
4:03:21,199 --> 4:03:22,960
specific programs in the et cetera

6749
4:03:22,960 --> 4:03:24,560
init.d

6750
4:03:24,560 --> 4:03:26,239
folder now there are tools that we can

6751
4:03:26,239 --> 4:03:28,479
use to manage those specifically service

6752
4:03:28,479 --> 4:03:30,239
and check config and i want to show you

6753
4:03:30,239 --> 4:03:32,880
how they work because the services are

6754
4:03:32,880 --> 4:03
determined

6755
4:03 --> 4:03:37,040
to start and stop based on the run level

6756
4:03:37,040 --> 4:03:38,640
of a particular what the computer is set

6757
4:03:38,640 --> 4:03:41,359
to so if like it's run level three a

6758
4:03:41,359 --> 4:03:43,439
certain system might start and if it's

6759
4:03:43,439 --> 4:03:45,040
run level five

6760
4:03:45,040 --> 4:03:47,199
another service might not start let me

6761
4:03:47,199 --> 4:03:49,040
show you what i'm talking about here on

6762
4:03:49,040 --> 4:03:51,120
our system this is centos 6 which has

6763
4:03:51,120 --> 4:03:55,040
sys5 if we look in etc.d

6764
4:03:55,040 --> 4:03:57,359
these are all the various services or

6765
4:03:57,359 --> 4:03:59,279
programs that are installed on the

6766
4:03:59,279 --> 4:04:01,359
computer we can see things you know like

6767
4:04:01,359 --> 4:04:04,479
post fixes the email server sshd is our

6768
4:04:04,479 --> 4:04:07,680
ssh server and we can start and stop

6769
4:04:07,680 --> 4:04:10,160
these by using the service command so i

6770
4:04:10,160 --> 4:04:11,920
can say service

6771
4:04:11,920 --> 4:04:13,760
sshd

6772
4:04:13,760 --> 4:04:14,720
start

6773
4:04:14,720 --> 4:04:16,720
and it's going to start the service i

6774
4:04:16,720 --> 4:04:19,040
can say service sshd

6775
4:04:19,040 --> 4:04:20,960
stop and it will stop the service i can

6776
4:04:20,960 --> 4:04:22,880
actually do status to see what it's

6777
4:04:22,880 --> 4:04:24,880
currently doing so right now it's

6778
4:04:24,880 --> 4:04:27,040
currently stopped it says but what i

6779
4:04:27,040 --> 4:04:29,279
want to do is change how it starts or

6780
4:04:29,279 --> 4:04
stops on system boot and what we can do

6781
4:04 --> 4:04:34,479
is say chk config

6782
4:04:34,479 --> 4:04:37,600
dash dash list sshd and it's going to

6783
4:04:37,600 --> 4:04:40,800
show us what sshd is going to do on

6784
4:04:40,800 --> 4:04:43,120
every run level so run level zero it's

6785
4:04:43,120 --> 4:04:44,720
off one it's off two it's off three it's

6786
4:04:44,720 --> 4:04:46,319
off four it's off five it's off and six

6787
4:04:46,319 --> 4:04:48,319
it's off so this means it is not going

6788
4:04:48,319 --> 4:04:51,680
to start up on system boot regardless of

6789
4:04:51,680 --> 4:04:53,760
what run level the system is starting at

6790
4:04:53,760 --> 4:04:55,760
now we can set it so that it will start

6791
4:04:55,760 --> 4:04:58,560
for all of the run levels one through

6792
4:04:58,560 --> 4:04:59,920
five it's never going to start

6793
4:04:59,920 --> 4:05:01,920
automatically for zero or for six

6794
4:05:01,920 --> 4:05:03,279
because those are

6795
4:05:03,279 --> 4:05:04,880
those are halt and reboot and that would

6796
4:05:04,880 --> 4:05:06,640
just be silly but if we wanted to start

6797
4:05:06,640 --> 4:05:09,840
on all of them we can just say chk

6798
4:05:09,840 --> 4:05:11,199
config

6799
4:05:11,199 --> 4:05:14,640
sshd on and it's going to set them to on

6800
4:05:14,640 --> 4:05:16,319
for all of the run levels and we can do

6801
4:05:16,319 --> 4:05:17,600
that list command again and we're going

6802
4:05:17,600 --> 4:05:20,239
to see now it's on four two three four

6803
4:05:20,239 --> 4:05:21,680
and five actually it doesn't do it for

6804
4:05:21,680 --> 4:05:24,080
single user mode so if we just say on

6805
4:05:24,080 --> 4:05:26,160
it's going to set it for run level two

6806
4:05:26,160 --> 4:05:27,840
three four and five it's going to be

6807
4:05:27,840 --> 4:05:29,840
turned on but we can do it individually

6808
4:05:29,840 --> 4:05:31,920
too so first of all let's turn it back

6809
4:05:31,920 --> 4:05:34,640
off so now they're all set to off if we

6810
4:05:34,640 --> 4:05:36,399
look see they're all off again we can do

6811
4:05:36,399 --> 4:05:39,680
a single one so we could say chk config

6812
4:05:39,680 --> 4:05:41,520
dash dash level

6813
4:05:41,520 --> 4:05:42,960
3 on

6814
4:05:42,960 --> 4:05:45,040
and now if we look it's just gonna be on

6815
4:05:45,040 --> 4:05:47,600
for level oop

6816
4:05:47,600 --> 4:05:51,439
gotta get the format right sshd on

6817
4:05:51,439 --> 4:05:53,199
and now if we look there now let's turn

6818
4:05:53,199 --> 4:05:55,439
it on for run level three but the other

6819
4:05:55,439 --> 4:05:57,920
ones are still off so chk config is the

6820
4:05:57,920 --> 4:06:00,319
way that we change how it boots up

6821
4:06:00,319 --> 4:06:02,399
whereas the service command up here is

6822
4:06:02,399 --> 4:06:04,080
how we change it immediately if we

6823
4:06:04,080 --> 4:06:05,760
wanted to start or stop we can use the

6824
4:06:05,760 --> 4:06:07,600
service command but if we wanted to

6825
4:06:07,600 --> 4:06:09,840
start on boot we need to use the chk

6826
4:06:09,840 --> 4:06:11,920
config command because that's going to

6827
4:06:11,920 --> 4:06
change the behavior at the various run

6828
4:06 --> 4:06:15,840
levels thankfully when you install

6829
4:06:15,840 --> 4:06:17,920
packages they create their own entries

6830
4:06:17,920 --> 4:06:20,160
in the et cetera init.d folder we don't

6831
4:06:20,160 --> 4:06:21,600
need to make scripts or anything in

6832
4:06:21,600 --> 4:06:23,680
there and the programs install things in

6833
4:06:23,680 --> 4:06:26,080
there so that the service and the chk

6834
4:06:26,080 --> 4:06:28,800
config commands know exactly what to do

6835
4:06:28,800 --> 4:06:30,960
in order to start and stop or configure

6836
4:06:30,960 --> 4:06:33,199
what happens on boot with a given system

6837
4:06:33,199 --> 4:06:35,520
that's running sys5

6838
4:06:35,520 --> 4:06:38,479
modern linux systems use system d to

6839
4:06:38,479 --> 4:06:40,239
manage their services things like their

6840
4:06:40,239 --> 4:06:43,359
web server their ssh server and the same

6841
4:06:43,359 --> 4:06:45,760
tool is used to start them stop them

6842
4:06:45,760 --> 4:06:47,680
enable them on boot and that's that

6843
4:06:47,680 --> 4:06:49,840
swiss army knife that catch all tool for

6844
4:06:49,840 --> 4:06:50,960
system d

6845
4:06:50,960 --> 4:06:53,359
system ctl so i want to show you how to

6846
4:06:53,359 --> 4:06:55,120
go about starting and stopping

6847
4:06:55,120 --> 4:06:57,120
individual services but also how to

6848
4:06:57,120 --> 4:06:59,680
affect what happens on boot when a

6849
4:06:59,680 --> 4:07:01,520
system boots up what happens with

6850
4:07:01,520 --> 4:07:04,160
particular services but first there is

6851
4:07:04,160 --> 4:07:05,760
one thing that can be frustrating about

6852
4:07:05,760 --> 4:07:08,160
system d and that is that the service

6853
4:07:08,160 --> 4:07:10,720
files can be scattered all over the hard

6854
4:07:10,720 --> 4:07:14,800
drive so for example inside etc systemd

6855
4:07:14,800 --> 4:07:16,800
system we're going to find a couple

6856
4:07:16,800 --> 4:07:18,319
service files like anything that ends in

6857
4:07:18,319 --> 4:07:20,880
dot service is going to be a system d

6858
4:07:20,880 --> 4:07:22,479
service file but you'll notice like

6859
4:07:22,479 --> 4:07:24,720
there's no ssh here well that's

6860
4:07:24,720 --> 4:07:26,399
frustrating well let's actually search

6861
4:07:26,399 --> 4:07:28,920
for that say locate

6862
4:07:28,920 --> 4:07:31,120
sshd.service you'll find that this is

6863
4:07:31,120 --> 4:07:34,640
actually located in user lib systemd

6864
4:07:34,640 --> 4:07:36,040
system that's where

6865
4:07:36,040 --> 4:07:38,239
sshd.servicelive so there's several

6866
4:07:38,239 --> 4:07:40,239
places that you can find the service

6867
4:07:40,239 --> 4:07:42,399
files whereas with sys5 it was always in

6868
4:07:42,399 --> 4:07
the etc.d folder here there are several

6869
4:07 --> 4:07:49,359
folders that are going to house system

6870
4:07:49,359 --> 4:07:51,760
files that are service files for your

6871
4:07:51,760 --> 4:07:53,199
system so that can be frustrating but

6872
4:07:53,199 --> 4:07:54,880
nonetheless we regardless of where

6873
4:07:54,880 --> 4:07:56,640
they're stored we can still use

6874
4:07:56,640 --> 4:07:59,359
systemctl to query them so we can say

6875
4:07:59,359 --> 4:08:01,520
for example systemctl

6876
4:08:01,520 --> 4:08:05,120
sshd let's do a status

6877
4:08:05,120 --> 4:08:06,640
and this is another got you if you're

6878
4:08:06,640 --> 4:08:10,159
going from sys5 right into system d the

6879
4:08:10,159 --> 4:08:11,840
frustrating thing is normally we would

6880
4:08:11,840 --> 4:08:14,880
say like service sshd status well now

6881
4:08:14,880 --> 4:08:17,040
it's backwards now we have to say

6882
4:08:17,040 --> 4:08:19,279
system ctl

6883
4:08:19,279 --> 4:08:22,960
status sshd ger it's frustrating but you

6884
4:08:22,960 --> 4:08:24,880
get used to it unless you go back and

6885
4:08:24,880 --> 4:08:26,239
forth from systems then it can be a

6886
4:08:26,239 --> 4:08:28,080
little bit frustrating but nonetheless

6887
4:08:28,080 --> 4:08:30,560
on systemd we have to say status or

6888
4:08:30,560 --> 4:08:32,560
start or stop and then the service name

6889
4:08:32,560 --> 4:08:35,359
whereas it's backwards with sys5 anyway

6890
4:08:35,359 --> 4:08:37,439
we have a lot of information here so we

6891
4:08:37,439 --> 4:08:38,960
can see that it's active which means

6892
4:08:38,960 --> 4:08:41,279
it's running so it's currently started

6893
4:08:41,279 --> 4:08:43,120
there's more information here though if

6894
4:08:43,120 --> 4:08:45,439
we look up here it says it's loaded it's

6895
4:08:45,439 --> 4:08:48,239
enabled and enabled in systemd world

6896
4:08:48,239 --> 4:08:51,040
means that it's going to start on system

6897
4:08:51,040 --> 4:08:52,640
boot and there's even some more

6898
4:08:52,640 --> 4:08:55,040
information here it says vendor preset

6899
4:08:55,040 --> 4:08:57,359
is enabled now what that means is when

6900
4:08:57,359 --> 4:09:00,960
we install the sshd daemon it's going to

6901
4:09:00,960 --> 4:09:03,439
automatically be enabled now that

6902
4:09:03,439 --> 4:09:05,040
doesn't mean it's going to start unless

6903
4:09:05,040 --> 4:09:07,279
we restart the system but it means that

6904
4:09:07,279 --> 4:09:09,600
it's going to be set to start on the

6905
4:09:09,600 --> 4:09:11,760
system boot that's what the vendor

6906
4:09:11,760 --> 4:09:14,080
preset is now we can change this easily

6907
4:09:14,080 --> 4:09:15,279
we can say

6908
4:09:15,279 --> 4:09:16,319
system

6909
4:09:16,319 --> 4:09:20,640
ctl disable sshd and now if we go back

6910
4:09:20,640 --> 4:09:23,199
and say status sshd we're going to see

6911
4:09:23,199 --> 4:09:26,239
now it's disabled and the vendor preset

6912
4:09:26,239 --> 4:09:28,239
is still enabled but we've changed it

6913
4:09:28,239 --> 4:09:30,159
now so that it's not going to start on

6914
4:09:30,159 --> 4:09
boot however this is another important

6915
4:09 --> 4:09:34,399
thing to note it's still running because

6916
4:09:34,399 --> 4:09:36,560
we've changed what happens on boot but

6917
4:09:36,560 --> 4:09:38,800
we haven't changed what's currently

6918
4:09:38,800 --> 4:09:41,359
happening on the system so if we reboot

6919
4:09:41,359 --> 4:09:43,040
it's not going to be running but if we

6920
4:09:43,040 --> 4:09:45,120
want it to not run we actually have to

6921
4:09:45,120 --> 4:09:48,319
tell it that so we have to say systemctl

6922
4:09:48,319 --> 4:09:50,720
stop sshd

6923
4:09:50,720 --> 4:09:52,800
and now if we were to say status now we

6924
4:09:52,800 --> 4:09:54,640
would see it's no longer running it's

6925
4:09:54,640 --> 4:09:57,520
inactive and it's not going to start on

6926
4:09:57,520 --> 4:09:59,359
system boot but let's change that

6927
4:09:59,359 --> 4:10:01,199
because we definitely wanted to start on

6928
4:10:01,199 --> 4:10:04,640
system boot so system ctl will start it

6929
4:10:04,640 --> 4:10:05,520
up

6930
4:10:05,520 --> 4:10:09,279
sshd and system ctl

6931
4:10:09,279 --> 4:10:13,600
enable sshd and now if we do systemctl

6932
4:10:13,600 --> 4:10:15,600
again this is a catch-all tool

6933
4:10:15,600 --> 4:10:18,479
status sshd we're going to see it's back

6934
4:10:18,479 --> 4:10:20,640
to how it should be it's running and

6935
4:10:20,640 --> 4:10:22,640
it's enabled which means it's going to

6936
4:10:22,640 --> 4:10:24,479
start on boot

6937
4:10:24,479 --> 4:10:26,720
so regardless of what service we want to

6938
4:10:26,720 --> 4:10:28,960
start stop or enable or disable that

6939
4:10:28,960 --> 4:10:31,600
system ctl tool is what we use for just

6940
4:10:31,600 --> 4:10:33,680
about everything in the world of system

6941
4:10:33,680 --> 4:10:35,920
d really the only gotcha with going from

6942
4:10:35,920 --> 4:10:39,120
sysv to system d when it comes to

6943
4:10:39,120 --> 4:10:41,120
services you have to remember to use the

6944
4:10:41,120 --> 4:10:43,359
systemctl tool and then you have to

6945
4:10:43,359 --> 4:10:46,479
remember that the actual command goes

6946
4:10:46,479 --> 4:10:48,880
before the name of the service and

6947
4:10:48,880 --> 4:10:50,640
that's backwards from sys5. so we have

6948
4:10:50,640 --> 4:10:54,399
to say like systemctl start sshd whereas

6949
4:10:54,399 --> 4:10:56,880
with sys5 it was backwards but it's easy

6950
4:10:56,880 --> 4:10:58,800
to get used to and i love having a

6951
4:10:58,800 --> 4:11:02,560
one-stop tool to do all of the things

6952
4:11:02,560 --> 4:11:04,239
that when we're planning servers on our

6953
4:11:04,239 --> 4:11:05,600
network it's important to know that

6954
4:11:05,600 --> 4:11:07,840
servers serve things they serve things

6955
4:11:07,840 --> 4:11:09,680
like ntp which is a network time

6956
4:11:09,680 --> 4:11:12,080
protocol ssh a secure shell so you can

6957
4:11:12,080 --> 4:11:14,399
get into the computer remotely dns is

6958
4:11:14,399 --> 4:11:16,399
domain name service which translates

6959
4:11:16,399 --> 4:11:18,640
things like cbtnuggets.com into an ip

6960
4:11:18,640 --> 4:11:21,600
address dhcp hands out ip addresses on a

6961
4:11:21,600 --> 4:11:22,800
local network so you don't have to

6962
4:11:22,800 --> 4:11:24,880
manually assign them a docker is a

6963
4:11:24,880 --> 4:11:26,800
containerization system that allows you

6964
4:11:26,800 --> 4:11:29,439
to run services in siloed environments

6965
4:11:29,439 --> 4:11:30,880
and then of course configuration

6966
4:11:30,880 --> 4:11:33,439
management tools allow you to centralize

6967
4:11:33,439 --> 4:11:35,359
the individual configuration of servers

6968
4:11:35,359 --> 4:11:37,600
so there's basically several kinds of

6969
4:11:37,600 --> 4:11:39,120
services that we're going to install in

6970
4:11:39,120 --> 4:11:41,120
our networks we have centralized things

6971
4:11:41,120 --> 4:11:42,800
which are going to run on like one

6972
4:11:42,800 --> 4:11:44,800
server for your entire network and then

6973
4:11:44,800 --> 4:11:47,600
individual which are going to run on all

6974
4:11:47,600 --> 4:11:50,560
or most of your servers so here we have

6975
4:11:50,560 --> 4:11:53,520
things like i mentioned before dhcp dns

6976
4:11:53,520 --> 4:11:55,600
configuration management server these

6977
4:11:55,600 --> 4:11:58,239
are going to run on one server on your

6978
4:11:58,239 --> 4:11:59,520
network you don't need more than one

6979
4:11:59,520 --> 4:12:01,920
dhcp server more than one dns server

6980
4:12:01,920 --> 4:12:03,439
apart from redundancy or high

6981
4:12:03,439 --> 4:12:05,439
availability but generally speaking you

6982
4:12:05,439 --> 4:12
only need this in one place

6983
4:12 --> 4:12:10,640
individual computers all have to have an

6984
4:12:10,640 --> 4:12:12,880
ssh server installed because you want to

6985
4:12:12,880 --> 4:12:15,840
get into every server on your network

6986
4:12:15,840 --> 4:12:17,040
right this is just something that's

6987
4:12:17,040 --> 4:12:19,120
going to be installed everywhere your

6988
4:12:19,120 --> 4:12:21,279
configuration management client is going

6989
4:12:21,279 --> 4:12:24,080
to be installed on every computer it's a

6990
4:12:24,080 --> 4:12:25,760
service that needs to be there so that

6991
4:12:25,760 --> 4:12:27,439
it can take advantage of the

6992
4:12:27,439 --> 4:12:29,600
configuration management system like

6993
4:12:29,600 --> 4:12:32,080
chef or puppet or ansible so that it can

6994
4:12:32,080 --> 4:12
you know work together to keep those

6995
4:12 --> 4:12:35,920
servers in line docker is a

6996
4:12:35,920 --> 4:12:37,840
containerization program that runs on an

6997
4:12:37,840 --> 4:12:39,680
individual server and if you're gonna

6998
4:12:39,680 --> 4:12:41,520
have a lot of different servers out

6999
4:12:41,520 --> 4:12:43,520
there you may have docker installed on

7000
4:12:43,520 --> 4:12:46,479
multiple computers so that it can host

7001
4:12:46,479 --> 4:12:48,960
services for you now ntp is kind of the

7002
4:12:48,960 --> 4:12:51,600
in the junction point of my venn diagram

7003
4:12:51,600 --> 4:12:53,439
here and that's because ntp or network

7004
4:12:53,439 --> 4:12:55,680
time protocol is the service that keeps

7005
4:12:55,680 --> 4:12:58,159
your computer in the proper time like

7006
4:12:58,159 --> 4:12:59,600
you know if you have some clock skew

7007
4:12:59,600 --> 4:13:00,880
where it's a little bit too fast or a

7008
4:13:00,880 --> 4:13:04,399
little bit too slow ntp will keep your

7009
4:13:04,399 --> 4:13:06,640
server running in the proper time now

7010
4:13:06,640 --> 4:13:09,359
there is a centralized ntp server very

7011
4:13:09,359 --> 4:13:11,680
often on your network and all of the

7012
4:13:11,680 --> 4:13:14,319
other computers or servers on your

7013
4:13:14,319 --> 4:13:17,359
network will then query your centralized

7014
4:13:17,359 --> 4:13:20,080
ntp server but here's the deal this same

7015
4:13:20,080 --> 4:13:22,800
ntp server software is actually the

7016
4:13:22,800 --> 4:13:25,680
client software as well so ntp does two

7017
4:13:25,680 --> 4:13:28,640
things one it queries an above computer

7018
4:13:28,640 --> 4:13:30,239
for the time you know in the case of the

7019
4:13:30,239 --> 4:13:32,479
centralized one it's in the cloud and it

7020
4:13:32,479 --> 4:13:35,359
also can serve out that time information

7021
4:13:35,359 --> 4:13:37,760
to its peers or to people on your local

7022
4:13:37,760 --> 4:13:40,399
network so usually we have a centralized

7023
4:13:40,399 --> 4:13:42,319
ntp server but we don't even have to

7024
4:13:42,319 --> 4:13:45,840
right all of these ntp server machines

7025
4:13:45,840 --> 4:13:48,319
could query right out to the cloud and

7026
4:13:48,319 --> 4:13:51,120
bypass a centralized ntp server it's

7027
4:13:51,120 --> 4:13:52,800
just nice to have a centralized place

7028
4:13:52,800 --> 4:13:54,960
that you have one time frame that your

7029
4:13:54,960 --> 4:13:56,800
entire network is based on but it's the

7030
4:13:56,800 --> 4:13:59,120
same server program so that's why i kind

7031
4:13:59,120 --> 4:14:00,560
of put it in both camps here as

7032
4:14:00,560 --> 4:14:03,120
individual and centralized now when

7033
4:14:03,120 --> 4:14:05,279
you're setting up your servers on your

7034
4:14:05,279 --> 4:14
network it's important to think through

7035
4:14 --> 4:14:09,840
how it should work and it's actually

7036
4:14:09,840 --> 4:14:12,880
gone through this change as computer

7037
4:14:12,880 --> 4:14:14,960
hardware and technology has progressed

7038
4:14:14,960 --> 4:14:16,560
there used to be a time where you would

7039
4:14:16,560 --> 4:14:19,520
have a bare metal server for every

7040
4:14:19,520 --> 4:14:21,680
service on your network if you had a dns

7041
4:14:21,680 --> 4:14:24,399
server it would literally be a physical

7042
4:14:24,399 --> 4:14:26,720
server sitting in your server closet and

7043
4:14:26,720 --> 4:14:29,279
it would sit right next to your dhcp

7044
4:14:29,279 --> 4:14:31,760
server whose sole purpose was to serve

7045
4:14:31,760 --> 4:14:34,399
out dhcp same with ntp or you know a web

7046
4:14:34,399 --> 4:14:36,880
server but then we said you know what

7047
4:14:36,880 --> 4:14:39,680
now computers are getting to be so fast

7048
4:14:39,680 --> 4:14:42,720
that we could put multiple services on a

7049
4:14:42,720 --> 4:14:44,960
single computer because the problem here

7050
4:14:44,960 --> 4:14:46,960
is it was very expensive right if you

7051
4:14:46,960 --> 4:14:48,880
had to buy a physical server for every

7052
4:14:48,880 --> 4:14:50,479
service you wanted to do it got

7053
4:14:50,479 --> 4:14:52,239
expensive fast so what if we bought a

7054
4:14:52,239 --> 4:14:54,080
decent sized server and then we

7055
4:14:54,080 --> 4:14:57,040
installed dns software we installed dhcp

7056
4:14:57,040 --> 4:14:59,920
software ntp software web software

7057
4:14:59,920 --> 4:15:01,760
whatever we wanted to do it would all

7058
4:15:01,760 --> 4:15:03,600
run alongside each other and be really

7059
4:15:03,600 --> 4:15:04,399
happy

7060
4:15:04,399 --> 4:15:06,800
the problem comes what if you need to

7061
4:15:06,800 --> 4:15:08,880
run an update on one of these like we

7062
4:15:08,880 --> 4:15:10,880
need to take dns offline so we can

7063
4:15:10,880 --> 4:15:12,800
update it and maybe restart the server

7064
4:15:12,800 --> 4:15:15,120
when we restart the server all of our

7065
4:15:15,120 --> 4:15:17,920
services go down because we've put them

7066
4:15:17,920 --> 4:15:20,319
all in one basket right all of our eggs

7067
4:15:20,319 --> 4:15:22,159
are in one basket it's also a single

7068
4:15:22,159 --> 4:15:25,040
point of failure basically it's messy

7069
4:15:25,040 --> 4:15:27,359
and then the dawn of virtualization

7070
4:15:27,359 --> 4:15:29,120
happened and this is where

7071
4:15:29,120 --> 4:15:31,840
server closets got really awesome really

7072
4:15:31,840 --> 4:15:34,640
fast that's because we had large

7073
4:15:34,640 --> 4:15:36,880
computers you know basically the same

7074
4:15:36,880 --> 4:15:38,479
large computer it's not that computer

7075
4:15:38,479 --> 4:15:40,479
hardware got all that much faster but

7076
4:15:40,479 --> 4:15:43,040
virtualization technology allowed us to

7077
4:15:43,040 --> 4:15:45,600
instead of just installing a dns service

7078
4:15:45,600 --> 4:15:46,479
software

7079
4:15:46,479 --> 4:15:49,120
we could install a virtual server inside

7080
4:15:49,120 --> 4:15:51,279
here by taking a slice of the resources

7081
4:15:51,279 --> 4:15:53,279
from the bigger server and

7082
4:15:53,279 --> 4:15:56,080
install a completely new server

7083
4:15:56,080 --> 4:15:57,680
virtualized in there that would run dns

7084
4:15:57,680 --> 4:15:59,279
and we could do that alongside another

7085
4:15:59,279 --> 4:16:01,120
virtual server and if we had to take

7086
4:16:01,120 --> 4:16:03,279
this offline or or restart it it

7087
4:16:03,279 --> 4:16:04,960
wouldn't affect the others because they

7088
4:16:04,960 --> 4:16:07,199
were their own standalone virtualized

7089
4:16:07,199 --> 4:16:09,120
servers it was really really awesome it

7090
4:16:09,120 --> 4:16:11,920
still is a very powerful way to go about

7091
4:16:11,920 --> 4:16:14,399
protecting your different services from

7092
4:16:14,399 --> 4:16:16,239
each other on the network the problem is

7093
4:16:16,239 --> 4:16:17,680
and this is something that i've fallen

7094
4:16:17,680 --> 4:16:20,319
prey to is sprawl potential it's really

7095
4:16:20,319 --> 4:16:22,159
easy to spin up another server oh i want

7096
4:16:22,159 --> 4:16:23,760
to do this i'll spin up another server

7097
4:16:23,760 --> 4:16:25,760
oh what if we did this sir spin up

7098
4:16:25,760 --> 4:16:28,080
another server that's where docker comes

7099
4:16:28,080 --> 4:16:29,760
into play and i won't go too much into

7100
4:16:29,760 --> 4:16:31,760
docker other than to tell you what

7101
4:16:31,760 --> 4:16:34,239
docker does is it takes a server and it

7102
4:16:34,239 --> 4:16:36,800
has a single operating system running

7103
4:16:36,800 --> 4:16:39,920
linux and then each service has its own

7104
4:16:39,920 --> 4:16:42,159
like isolated pocket it doesn't have its

7105
4:16:42,159 --> 4:16:42,880
own

7106
4:16:42,880 --> 4:16:45,040
operating system it's not like a virtual

7107
4:16:45,040 --> 4:16:47,199
machine all it does is have its own

7108
4:16:47,199 --> 4:16:50,479
little slice of the running system where

7109
4:16:50,479 --> 4:16:53,199
it has its own file system and it can

7110
4:16:53,199 --> 4:16:55,439
run its own little service here and it

7111
4:16:55,439 --> 4:16:57,279
doesn't affect anything else because

7112
4:16:57,279 --> 4:17:00,239
it's walled off so containerization is

7113
4:17:00,239 --> 4:17:02,560
an even better way to take better

7114
4:17:02,560 --> 4:17:04,560
advantage of server hardware even than

7115
4:17:04,560 --> 4:17:06,640
virtualization when it comes to virtual

7116
4:17:06,640 --> 4:17:08,640
servers so yes there's a lot to think

7117
4:17:08,640 --> 4:17:10,640
about when you're installing servers on

7118
4:17:10,640 --> 4:17:12,319
your network and where to put them but

7119
4:17:12,319 --> 4:17:13,920
the nice thing is whether it's a local

7120
4:17:13,920 --> 4:17:15,199
service that has to be installed on

7121
4:17:15,199 --> 4:17:17,520
every computer or a centralized service

7122
4:17:17,520 --> 4:17:19,279
that you just install like in one place

7123
4:17:19,279 --> 4:17:21,359
for your whole network planning has

7124
4:17:21,359 --> 4:17:23,279
gotten a lot easier because you don't

7125
4:17:23,279 --> 4:17:24,880
have to worry so much about putting all

7126
4:17:24,880 --> 4:17:26,479
of your eggs in one basket we've been

7127
4:17:26,479 --> 4:17:28,960
able to isolate individual services

7128
4:17:28,960 --> 4:17:30,720
without the need to buy brand new

7129
4:17:30,720 --> 4:17:32,720
hardware so planning is kind of fun and

7130
4:17:32,720 --> 4:17:35,840
more flexible than it's ever been before

7131
4:17:35,840 --> 4:17:37,520
conceptually we pretty much understand

7132
4:17:37,520 --> 4:17:39,120
how a web server works you send a

7133
4:17:39,120 --> 4:17:40,880
request and the web server sends back

7134
4:17:40,880 --> 4:17:44,080
the web page but when you add ssl or tls

7135
4:17:44,080 --> 4:17:46,159
it really does add a layer of complexity

7136
4:17:46,159 --> 4:17:48,479
but that complexity is for a good reason

7137
4:17:48,479 --> 4:17:50,239
because it can secure the traffic so

7138
4:17:50,239 --> 4:17:52,479
nobody knows what is going

7139
4:17:52,479 --> 4:17:53,920
through your

7140
4:17:53,920 --> 4:17:55,760
internet connection like bank account

7141
4:17:55,760 --> 4:17:57,199
information and stuff like that so it's

7142
4:17:57,199 --> 4:17:59,439
very important that we have ssl

7143
4:17:59,439 --> 4:18:01,600
encrypted secured traffic now the

7144
4:18:01,600 --> 4:18:03,439
process is going to be a little bit

7145
4:18:03,439 --> 4:18:05,279
different than just a standard web page

7146
4:18:05,279 --> 4:18:06,960
and part of the thing that you want to

7147
4:18:06,960 --> 4:18:08,800
make sure you have if it's like for a

7148
4:18:08,800 --> 4:18:10,479
bank or something is a certificate

7149
4:18:10,479 --> 4:18:12,640
authority now let me demonstrate exactly

7150
4:18:12,640 --> 4:18
what goes on

7151
4:18 --> 4:18:16,640
when you try to get a web page from a

7152
4:18:16,640 --> 4:18:18,239
web server let's say this is our web

7153
4:18:18,239 --> 4:18:20,399
server now if you're not talking about

7154
4:18:20,399 --> 4:18:22,399
ssl basically the guy in the computer

7155
4:18:22,399 --> 4:18:24,560
here says hey i would like to see your

7156
4:18:24,560 --> 4:18:26,800
web page and then the computer says okay

7157
4:18:26,800 --> 4:18:28,479
here is my web page and that's pretty

7158
4:18:28,479 --> 4:18:30,479
much the entire process there's no

7159
4:18:30,479 --> 4:18:32,800
encryption at all but when you go to

7160
4:18:32,800 --> 4:18:35,040
like your bank's website you're going to

7161
4:18:35,040 --> 4:18:37,760
set up an ssl session so that all of

7162
4:18:37,760 --> 4:18:39,520
your information that goes back and

7163
4:18:39,520 --> 4:18:41,359
forth is encrypted so basically here is

7164
4:18:41,359 --> 4:18:44,080
how the process works the client sends a

7165
4:18:44,080 --> 4:18:45,760
message to the server

7166
4:18:45,760 --> 4:18:48,080
and it says hey i would like to start an

7167
4:18:48,080 --> 4:18:50,880
ssl encrypted session with you and then

7168
4:18:50,880 --> 4:18:53,760
the web server responds okay

7169
4:18:53,760 --> 4:18:56,399
here is my certificate this says who i

7170
4:18:56,399 --> 4:18:59,199
am and that i'm valid and look here's a

7171
4:18:59,199 --> 4:19:01,359
picture of my kid playing softball maybe

7172
4:19:01,359 --> 4:19:03,359
not that bar but it sends a certificate

7173
4:19:03,359 --> 4:19:05,760
describing who it is to prove that it's

7174
4:19:05,760 --> 4:19:07,439
who the server says it is that it's not

7175
4:19:07,439 --> 4:19:09,520
like some man-in-the-middle attack now

7176
4:19:09,520 --> 4:19:12,159
the only way the end user knows that

7177
4:19:12,159 --> 4:19:15,359
it's real is because he contacts a

7178
4:19:15,359 --> 4:19:17,439
certificate authority which is a

7179
4:19:17,439 --> 4:19:20,880
centralized trusted place that signs

7180
4:19:20,880 --> 4:19:22,560
certificates basically it's this

7181
4:19:22,560 --> 4:19:26,159
person's job to contact this web server

7182
4:19:26,159 --> 4:19:28,640
and make it prove who it is and then

7183
4:19:28,640 --> 4:19:30,880
once it proves who it is it gets its

7184
4:19:30,880 --> 4:19:32,880
certificate signed by the certificate

7185
4:19:32,880 --> 4:19:35,359
authority so then let's say this guy's

7186
4:19:35,359 --> 4:19:38,479
name is bob bob says okay i see that at

7187
4:19:38,479 --> 4:19:40,159
the bottom of your certificate it was

7188
4:19:40,159 --> 4:19:42,159
signed by somebody who i trust so i'm

7189
4:19:42,159 --> 4:19:43,680
going to trust that you're really who

7190
4:19:43,680 --> 4:19:44,960
you say you are

7191
4:19:44,960 --> 4:19:47,600
so then after that identification has

7192
4:19:47,600 --> 4:19:51,199
been verified bob then sends his

7193
4:19:51,199 --> 4:19:53,439
encryption key to the web server so the

7194
4:19:53,439 --> 4:19:55,840
key is sent from the end user to the

7195
4:19:55,840 --> 4:19:59,439
server and then the server uses that key

7196
4:19:59,439 --> 4:20:02,080
that bob sent and that is what is used

7197
4:20:02,080 --> 4:20:05,199
to encrypt the actual data that is going

7198
4:20:05,199 --> 4:20:08,159
to go to bob's computer so the actual

7199
4:20:08,159 --> 4:20:09,760
encryption

7200
4:20:09,760 --> 4:20:12,319
uses bob's key that he sends to the

7201
4:20:12,319 --> 4:20:15,520
server after the server proves who it is

7202
4:20:15,520 --> 4:20:17,439
and then they use this tunnel back and

7203
4:20:17,439 --> 4:20:18,880
forth and that's how they communicate

7204
4:20:18,880 --> 4:20:21,279
using bob's key now if you set up a

7205
4:20:21,279 --> 4:20:23,040
server in your own network you've

7206
4:20:23,040 --> 4:20:24,840
probably heard of something called a

7207
4:20:24,840 --> 4:20:27,199
self-signed certificate now that is

7208
4:20:27,199 --> 4:20:28,880
exactly what it sounds like when that

7209
4:20:28,880 --> 4:20:30,560
initial request comes from bob and he

7210
4:20:30,560 --> 4:20:32,640
says hey server i would like to set up

7211
4:20:32,640 --> 4:20:35,040
an ssl connection the server does

7212
4:20:35,040 --> 4:20:37,680
respond with a copy of its certificate

7213
4:20:37,680 --> 4:20:39,359
it says here i am this is all my

7214
4:20:39,359 --> 4:20:41,760
information uh this is the stuff that

7215
4:20:41,760 --> 4:20:43,279
you know describes who i am i'm

7216
4:20:43,279 --> 4:20:45,439
promising that i am the person i say i

7217
4:20:45,439 --> 4:20:47,680
am but there's no signature on the

7218
4:20:47,680 --> 4:20:49,439
bottom from the certificate authority

7219
4:20:49,439 --> 4:20:51,120
it's something that that the server

7220
4:20:51,120 --> 4:20:52,880
signed himself so bob

7221
4:20:52,880 --> 4:20:55,439
has to like just trust that this server

7222
4:20:55,439 --> 4:20:57,359
is who he says it is now if it's on your

7223
4:20:57,359 --> 4:20:59,439
own local network that's usually fine

7224
4:20:59,439 --> 4:21:01,120
and it's okay to accept a self-signed

7225
4:21:01,120 --> 4:21:03,199
certificate but if it's over the

7226
4:21:03,199 --> 4:21:05,120
internet you don't want to accept a

7227
4:21:05,120 --> 4:21:07,120
self-signed certificate because there's

7228
4:21:07,120 --> 4:21:09,279
no way to be sure that it's actually the

7229
4:21:09,279 --> 4:21:11,680
server it says it is and if you trust a

7230
4:21:11,680 --> 4:21:13,439
self-signed certificate and it ends up

7231
4:21:13,439 --> 4:21:15,359
being like a man in the middle attack

7232
4:21:15,359 --> 4:21:17,279
you could be sending all of your banking

7233
4:21:17,279 --> 4:21:19,920
data to a server that isn't who it says

7234
4:21:19,920 --> 4:21:21,920
it is and that's very dangerous so a

7235
4:21:21,920 --> 4:21:24,080
self-signed certificate encrypts the

7236
4:21:24,080 --> 4:21:26,560
exact same way the problem is you're not

7237
4:21:26,560 --> 4:21:29,040
a hundred percent positive who it is

7238
4:21:29,040 --> 4:21:31,600
that initially set up that certificate

7239
4:21:31,600 --> 4:21:33,279
so there's a lot of trust involved

7240
4:21:33,279 --> 4:21:34,960
whereas if you use a certificate

7241
4:21:34,960 --> 4:21:36,720
authority trust is taken out of the

7242
4:21:36,720 --> 4:21:38,319
picture because you trust the

7243
4:21:38,319 --> 4:21:40,479
certificate authority it's built into

7244
4:21:40,479 --> 4:21:43,199
your web browser so the actual ssl

7245
4:21:43,199 --> 4:21:45,040
encryption is the same whether it's a

7246
4:21:45,040 --> 4:21:46,880
certificate authority or a self-signed

7247
4:21:46,880 --> 4:21:49,279
certificate but you don't know if it's

7248
4:21:49,279 --> 4:21:51,680
the server it says it is unless you have

7249
4:21:51,680 --> 4:21:54,159
that certificate authority that signs

7250
4:21:54,159 --> 4:21:56,080
the server certificate that's why it's

7251
4:21:56,080 --> 4:21:57,680
very important especially on the

7252
4:21:57,680 --> 4:21:59,760
internet to make sure that you don't get

7253
4:21:59,760 --> 4:22:02,239
an error about not having a certificate

7254
4:22:02,239 --> 4:22:04,319
signed by an authority but the process

7255
4:22:04,319 --> 4:22:06,800
is the same either way

7256
4:22:06,800 --> 4:22:08,960
it turns out that local network server

7257
4:22:08,960 --> 4:22:11,520
roles have changed fairly dramatically

7258
4:22:11,520 --> 4:22:13,520
over just the past few years now don't

7259
4:22:13,520 --> 4:22:15,359
get me wrong things have come a long way

7260
4:22:15,359 --> 4:22:17,520
from when we used to have a sneaker net

7261
4:22:17,520 --> 4:22:19,279
so if we had a file we'd have to put it

7262
4:22:19,279 --> 4:22:21,199
on a floppy disk and then you know carry

7263
4:22:21,199 --> 4:22:23,120
it to the cubicle next to us and pass it

7264
4:22:23,120 --> 4:22:26,720
on like that but we don't even use local

7265
4:22:26,720 --> 4:22:29,439
servers as much as we used to now what

7266
4:22:29,439 --> 4:22:30,960
am i talking about well i'm talking

7267
4:22:30,960 --> 4:22:33,199
about the introduction of cloud

7268
4:22:33,199 --> 4:22:34,800
computing now let's look at file

7269
4:22:34,800 --> 4:22:37,040
services for example we used to have and

7270
4:22:37,040 --> 4:22:39,439
then we actually we do still have local

7271
4:22:39,439 --> 4:22:41,120
file services that you know if we want

7272
4:22:41,120 --> 4:22:43,040
to save files in a local centralized

7273
4:22:43,040 --> 4:22:44,800
place we do things whether we're on

7274
4:22:44,800 --> 4:22:47,040
windows or linux or mac if we want to

7275
4:22:47,040 --> 4:22:48,960
serve to windows computers we can use

7276
4:22:48,960 --> 4:22:50,720
the samba program which allows us

7277
4:22:50,720 --> 4:22:53,359
through file sharing that is hosted on

7278
4:22:53,359 --> 4:22:56,080
linux but is accessible from a windows

7279
4:22:56,080 --> 4:22:58,560
machine it's a free way very stable very

7280
4:22:58,560 --> 4:23:00,239
scalable that we can actually share

7281
4:23:00,239 --> 4:23:02,319
files with windows computers same thing

7282
4:23:02,319 --> 4:23:04,640
with nfs which is network file storage

7283
4:23:04,640 --> 4:23:07,120
and this is applicable for linux mac

7284
4:23:07,120 --> 4:23:09,279
windows and then if you have old school

7285
4:23:09,279 --> 4:23
apples that only use like the apple talk

7286
4:23 --> 4:23:14,080
sort of networking stuff well there's

7287
4:23:14,080 --> 4:23:16,720
neta talk which uses the native apple

7288
4:23:16,720 --> 4:23:18,880
file sharing but this isn't even used

7289
4:23:18,880 --> 4:23:21,359
anymore so much because now macintosh

7290
4:23:21,359 --> 4:23:23,279
computers can very easily do windows

7291
4:23:23,279 --> 4:23
shares using samba or nfs but netetalk

7292
4:23 --> 4:23:27,600
is still around if you like that native

7293
4:23:27,600 --> 4:23
apple file sharing stuff the point is

7294
4:23 --> 4:23:32,399
linux computers can do local file

7295
4:23:32,399 --> 4:23:35,040
sharing very very well the thing to

7296
4:23:35,040 --> 4:23:36,399
think about if you're implementing a

7297
4:23:36,399 --> 4:23:38,640
network though is should i and that's

7298
4:23:38,640 --> 4:23:40,560
where cloud services come into play

7299
4:23:40,560 --> 4:23:42,560
because while sure you can serve things

7300
4:23:42,560 --> 4:23:43,920
locally on a file you might want to

7301
4:23:43,920 --> 4:23:45,680
consider something like dropbox or

7302
4:23:45,680 --> 4:23:48,239
onedrive or google drive that works on

7303
4:23:48,239 --> 4:23:50,800
almost every platform and allows you to

7304
4:23:50,800 --> 4:23:53,680
not only sync things between computers

7305
4:23:53,680 --> 4:23:57,359
but also have an online backup which is

7306
4:23:57,359 --> 4:24:00,319
really really vital and it saves a ton

7307
4:24:00,319 --> 4:24:03,359
of money if you don't have to buy the

7308
4:24:03,359 --> 4:24:05,760
servers to actually store all of your

7309
4:24:05,760 --> 4:24:08,159
files if it's stored on a cloud service

7310
4:24:08,159 --> 4:24:10,319
that you usually pay a service fee for

7311
4:24:10,319 --> 4:24
you're going to save that money on

7312
4:24 --> 4:24
maintenance and hardware purchases and

7313
4:24 --> 4:24:17,279
etc etc so think about cloud services

7314
4:24:17,279 --> 4:24:19,359
every time you're thinking about local

7315
4:24:19,359 --> 4:24:20,960
services there are some cases you'll

7316
4:24:20,960 --> 4:24:22,960
want local services but some cases it

7317
4:24:22,960 --> 4:24:24,960
just doesn't make any sense and there

7318
4:24:24,960 --> 4:24:27,120
are complementary cloud services to

7319
4:24:27,120 --> 4:24:29,680
almost every one of our local services

7320
4:24:29,680 --> 4:24:31,439
that we can offer i want to mention the

7321
4:24:31,439 --> 4:24:33,040
ways that you can serve them locally

7322
4:24:33,040 --> 4:24:35,199
because it does make sense sometimes for

7323
4:24:35,199 --> 4:24:37,040
example a print server is going to be

7324
4:24:37,040 --> 4:24:39,040
cups common unix printing system this

7325
4:24:39,040 --> 4:24:40,640
works across the board if you're sharing

7326
4:24:40,640 --> 4:24:43,359
a printer with mac or linux it's going

7327
4:24:43,359 --> 4:24:45,439
to be using cups and even windows can

7328
4:24:45,439 --> 4:24:47,359
print to cups servers it's like a

7329
4:24:47,359 --> 4:24:49,920
centralized place but honestly most

7330
4:24:49,920 --> 4:24:52,560
printers now pretty much have a robust

7331
4:24:52,560 --> 4:24:55,520
ability to share and queue jobs on their

7332
4:24:55,520 --> 4:24:57,760
own so we don't always have to use a

7333
4:24:57,760 --> 4:24:59,760
centralized cup server we can all print

7334
4:24:59,760 --> 4:25:00,880
to the same printer and it's just

7335
4:25:00,880 --> 4:25:03,040
handled well netatalk also has printing

7336
4:25:03,040 --> 4:25:04,720
if you have an old school apple computer

7337
4:25:04,720 --> 4:25:06,239
you want to use that for but again

7338
4:25:06,239 --> 4:25:08,640
that's not even used very much anymore

7339
4:25:08,640 --> 4:25:10,239
how could your local printer be used

7340
4:25:10,239 --> 4:25:12,080
with cloud services well it doesn't make

7341
4:25:12,080 --> 4:25:13,840
sense until you think about

7342
4:25:13,840 --> 4:25
no configuration printing right with

7343
4:25 --> 4:25:18,479
google print or airprint these are ways

7344
4:25:18,479 --> 4:25:20,239
that you can actually send your print

7345
4:25:20,239 --> 4:25:22,720
job over the internet to a printer that

7346
4:25:22,720 --> 4:25:25,199
may or may not be connected directly so

7347
4:25:25,199 --> 4:25:26,479
it's something that isn't going to

7348
4:25:26,479 --> 4:25:28,720
replace common everyday office printing

7349
4:25:28,720 --> 4:25:30,399
but it's something to think about if you

7350
4:25:30,399 --> 4:25:31,920
want to be able to configure or

7351
4:25:31,920 --> 4:25:33,680
especially print from mobile devices

7352
4:25:33,680 --> 4:25:36,159
having cloud solutions is very powerful

7353
4:25:36,159 --> 4:25:38,640
now mail is a special case because a lot

7354
4:25:38,640 --> 4:25:41,520
of times we want mail to be as secure as

7355
4:25:41,520 --> 4:25:43,040
possible and that means we don't

7356
4:25:43,040 --> 4:25:45,520
necessarily want to give the ability to

7357
4:25:45,520 --> 4:25:48,239
another company to host our mail but

7358
4:25:48,239 --> 4:25:50,159
remember with great power comes great

7359
4:25:50,159 --> 4:25:51,680
responsibility

7360
4:25:51,680 --> 4:25:54,159
keeping your locally hosted email files

7361
4:25:54,159 --> 4:25:56,640
whether it's using postfix or xm or send

7362
4:25:56,640 --> 4:25:59,600
mail can be a full time job because we

7363
4:25:59,600 --> 4:26:02,080
want those to be really secure not only

7364
4:26:02,080 --> 4:26
so people can't read our emails but so

7365
4:26 --> 4:26:06,159
our servers aren't compromised and used

7366
4:26:06,159 --> 4:26:08,720
to send out spam to the entire world so

7367
4:26:08,720 --> 4:26:10,880
even though having that fine control

7368
4:26:10,880 --> 4:26:12,560
over security of your own mail is

7369
4:26:12,560 --> 4:26:13,520
important

7370
4:26:13,520 --> 4:26
think about how nice it is if a huge

7371
4:26 --> 4:26:18,560
company like google or microsoft or

7372
4:26:18,560 --> 4:26:20,479
yahoo would have to worry about the

7373
4:26:20,479 --> 4:26:23,040
security aspect so you can actually just

7374
4:26:23,040 --> 4:26:25,120
focus on communicating with it so

7375
4:26:25,120 --> 4:26:26,880
there's a lot to be said about using a

7376
4:26:26,880 --> 4:26:28,720
third-party company for email even

7377
4:26:28,720 --> 4:26:30,239
though you do lose some of that local

7378
4:26:30,239 --> 4:26:31,920
control and then lastly i want to talk

7379
4:26:31,920 --> 4:26:33,439
about a proxy now when we talk about

7380
4:26:33,439 --> 4:26:34,880
proxies in linux we're talking about

7381
4:26:34,880 --> 4:26:37,199
squid or squid guard which is an add-on

7382
4:26:37,199 --> 4:26:39,600
to squid and generally proxies have

7383
4:26:39,600 --> 4:26:42,399
historically taken the load off of your

7384
4:26:42,399 --> 4:26:44,159
internet connection so a bunch of

7385
4:26:44,159 --> 4:26:46,720
computers can actually request things

7386
4:26:46,720 --> 4:26:48,800
one time from the cloud and then the

7387
4:26:48,800 --> 4:26:50,640
proxy server kind of takes that and

7388
4:26:50,640 --> 4:26:52,720
distributes it internally but our

7389
4:26:52,720 --> 4:26:54,159
internet connections are very powerful

7390
4:26:54,159 --> 4:26:56,479
now so we don't often do that now when

7391
4:26:56,479 --> 4:26:58,720
we're thinking about proxy a lot of

7392
4:26:58,720 --> 4:27:01,920
people mistakenly call a web filter a

7393
4:27:01,920 --> 4:27:04,319
proxy and what a web filter does is it

7394
4:27:04,319 --> 4:27:05,520
stops you from going to like

7395
4:27:05,520 --> 4:27:07,199
pornographic websites and that's what

7396
4:27:07,199 --> 4:27:08,720
squid guard does there's a lot of

7397
4:27:08,720 --> 4:27:11,040
commercial products that keep a list of

7398
4:27:11,040 --> 4:27:13,199
sites that shouldn't be visited by

7399
4:27:13,199 --> 4:27:14,960
people and there are other solutions too

7400
4:27:14,960 --> 4:27:17,439
like open dns is a way that you can set

7401
4:27:17,439 --> 4:27:20,399
your dns server your upstream dns server

7402
4:27:20,399 --> 4:27:22,720
so that it doesn't resolve sites that

7403
4:27:22,720 --> 4:27:24,159
you don't want to see like pornographic

7404
4:27:24,159 --> 4:27:25,600
websites they won't even resolve

7405
4:27:25,600 --> 4:27:27,760
properly so your users can't get there

7406
4:27:27,760 --> 4:27:29,840
now when it comes to actually caching or

7407
4:27:29,840 --> 4:27:32,560
proxying large things there are some big

7408
4:27:32,560 --> 4:27:35,359
companies like akamai that will cache

7409
4:27:35,359 --> 4:27:37,520
entire video libraries of like netflix

7410
4:27:37,520 --> 4:27:39,359
and stuff because that's a way that they

7411
4:27:39,359 --> 4:27:42,239
can save bandwidth between isps but in

7412
4:27:42,239 --> 4:27:44,319
general we don't use proxies as much as

7413
4:27:44,319 --> 4:27:46,080
we used to although there are still a

7414
4:27:46,080 --> 4:27:48,399
lot of use cases for things like squid

7415
4:27:48,399 --> 4:27:51,439
guard or open dns for blocking unwanted

7416
4:27:51,439 --> 4:27:53,520
websites that are going to waste time or

7417
4:27:53,520 --> 4:27:55,359
expose us to things that you know we may

7418
4:27:55,359 --> 4:27:56,960
not want to be exposed to in the company

7419
4:27:56,960 --> 4:27:58,560
or in a school so while it's really

7420
4:27:58,560 --> 4:28:00,399
important to know that there are local

7421
4:28:00,399 --> 4:28:02,399
services that you can provide on your

7422
4:28:02,399 --> 4:28:05,120
network using linux i encourage you to

7423
4:28:05,120 --> 4:28:07,279
think through before you install a

7424
4:28:07,279 --> 4:28:09,040
server on your network to do a

7425
4:28:09,040 --> 4:28:11,199
particular task see if it really makes

7426
4:28:11,199 --> 4:28:13,359
sense to host that locally or if going

7427
4:28:13,359 --> 4:28:15,520
for a third party service might make

7428
4:28:15,520 --> 4:28:17,600
more sense

7429
4:28:17,600 --> 4:28:19,680
authentication services and database

7430
4:28:19,680 --> 4:28:21,600
services are both things that we often

7431
4:28:21,600 --> 4:28:23,359
do on local computers i want to talk

7432
4:28:23,359 --> 4:28:25,520
about their purpose and their importance

7433
4:28:25,520 --> 4:28:26,880
but it also might seem a little weird

7434
4:28:26,880 --> 4:28:28,399
that i group them together and that's

7435
4:28:28,399 --> 4:28:29,840
because we usually think about

7436
4:28:29,840 --> 4:28:32,159
authentication and databases as local

7437
4:28:32,159 --> 4:28:34,239
services that run on robust servers and

7438
4:28:34,239 --> 4:28:35,840
that's for a reason it's because they're

7439
4:28:35,840 --> 4:28:38,319
very very important to what we do on a

7440
4:28:38,319 --> 4:28:40,479
regular basis and i just want to talk

7441
4:28:40,479 --> 4:28:42,880
about while we oftentimes still run them

7442
4:28:42,880 --> 4:28:44,800
on local computers there's still an

7443
4:28:44,800 --> 4:28:46,479
argument to be made for putting those in

7444
4:28:46,479 --> 4:28:48,159
the cloud as well now generally if

7445
4:28:48,159 --> 4:28:49,359
you're talking about linux you're

7446
4:28:49,359 --> 4:28:51,600
thinking about a sql service if you're

7447
4:28:51,600 --> 4:28:52,960
thinking traditionally right this could

7448
4:28:52,960 --> 4:28:55,279
be my sequel or

7449
4:28:55,279 --> 4:28:57,920
maria database which is basically mysql

7450
4:28:57,920 --> 4:28:59,120
only newer

7451
4:28:59,120 --> 4:29:01,680
postgres there's a whole bunch of other

7452
4:29:01,680 --> 4:29:03,680
sql servers that would normally run on a

7453
4:29:03,680 --> 4:29:05,760
really robust server on our network now

7454
4:29:05,760 --> 4:29:08,479
there are tons of other

7455
4:29:08,479 --> 4:29:10,479
database services some of them are you

7456
4:29:10,479 --> 4:29:13,199
know are non-sql and and some of them

7457
4:29:13,199 --> 4:29:14,800
are good for certain types of data and

7458
4:29:14,800 --> 4:29:16,800
bad for other types of data but there

7459
4:29:16,800 --> 4:29:19,359
are tons and tons of database services

7460
4:29:19,359 --> 4:29:21,279
and generally when we have a database

7461
4:29:21,279 --> 4:29:24,080
server it's going to be on its own

7462
4:29:24,080 --> 4:29
computer and that's just because

7463
4:29 --> 4:29:27,760
database servers tend to be kind of

7464
4:29:27,760 --> 4:29:29,520
robust so you're going to have something

7465
4:29:29,520 --> 4:29:32,159
like mysql maria postgres they're going

7466
4:29:32,159 --> 4:29:34,319
to be on their own server and

7467
4:29:34,319 --> 4:29:36,800
authentication services are similar as

7468
4:29:36,800 --> 4:29:39,040
well because we need to have a central

7469
4:29:39,040 --> 4:29:40,800
place to authenticate all of our users

7470
4:29:40,800 --> 4:29:43,199
now when you log into like gmail you're

7471
4:29:43,199 --> 4:29:44,560
going to put in your username and

7472
4:29:44,560 --> 4:29:46,159
password and that's all stored in a

7473
4:29:46,159 --> 4:29:48,720
central place on google servers

7474
4:29:48,720 --> 4:29:50,399
if you're on your local network there

7475
4:29:50,399 --> 4:29:53,520
are tons of ways that you can store user

7476
4:29:53,520 --> 4:29:56,159
information on your own local network in

7477
4:29:56,159 --> 4:29:58,720
fact for years i would use nis on a

7478
4:29:58,720 --> 4:30:00,880
linux server and i would use all of our

7479
4:30:00,880 --> 4:30:02,239
computers in the network would

7480
4:30:02,239 --> 4:30:04,319
authenticate to this one centralized

7481
4:30:04,319 --> 4:30:06,319
server and it was so important that all

7482
4:30:06,319 --> 4:30:08,080
user information was stored on there

7483
4:30:08,080 --> 4:30:11,120
that i had a redundancy so that

7484
4:30:11,120 --> 4:30:13,199
in case one of the servers went bad i

7485
4:30:13,199 --> 4:30:15,680
would still have a backup that was live

7486
4:30:15,680 --> 4:30:17,600
high availability so there's lots of

7487
4:30:17,600 --> 4:30:18,960
ways we can do it but the vital

7488
4:30:18,960 --> 4:30:22,399
importance of having our own server or

7489
4:30:22,399 --> 4:30:25,359
even multiple servers is important but

7490
4:30:25,359 --> 4:30:26,960
here's the deal you'll notice i have all

7491
4:30:26,960 --> 4:30:28,399
of these things around the outside you

7492
4:30:28,399 --> 4:30:31,279
can use open ldap to host your user

7493
4:30:31,279 --> 4:30:33,199
accounts on your network and it's going

7494
4:30:33,199 --> 4:30:34,239
to work with a bunch of different

7495
4:30:34,239 --> 4:30:37,840
programs but honestly i would say 95 of

7496
4:30:37,840 --> 4:30:40,399
the time user data is going to be stored

7497
4:30:40,399 --> 4:30:42,479
on an active directory on a windows

7498
4:30:42,479 --> 4:30:44,800
computer even if you're a linux person

7499
4:30:44,800 --> 4:30:48,399
in a linux shop it seems like ad has

7500
4:30:48,399 --> 4:30:51,359
taken the cake as the king when it comes

7501
4:30:51,359 --> 4:30:54,159
to user authentication now the one

7502
4:30:54,159 --> 4:30:55,760
alternative to that is if you're going

7503
4:30:55,760 --> 4:30:58,960
to use an online like saml or i don't

7504
4:30:58,960 --> 4:31:00,399
want to get too much into programming

7505
4:31:00,399 --> 4:31:02,560
but there are ways that you can leverage

7506
4:31:02,560 --> 4:31:04,720
online authentication for your local

7507
4:31:04,720 --> 4:31:06,479
stuff like single sign-on and things

7508
4:31:06,479 --> 4:31:08,800
like that so that may take the place of

7509
4:31:08,800 --> 4:31:11,439
active directory on your network but if

7510
4:31:11,439 --> 4:31:13,120
you're if you're talking about user

7511
4:31:13,120 --> 4:31:15,199
authentication active directory is

7512
4:31:15,199 --> 4:31:17,680
almost certainly going to be where a

7513
4:31:17,680 --> 4:31:20,239
medium to large or even small office is

7514
4:31:20,239 --> 4:31:22,960
going to host all of their user accounts

7515
4:31:22,960 --> 4:31:25,040
so it's important to know that you can

7516
4:31:25,040 --> 4:31:27,279
host authentication services on a linux

7517
4:31:27,279 --> 4:31:28,159
machine

7518
4:31:28,159 --> 4:31:29,359
but you may

7519
4:31:29,359 --> 4:31:31,359
not end up doing that because active

7520
4:31:31,359 --> 4:31:32,479
directory is probably going to be

7521
4:31:32,479 --> 4:31:34,239
somewhere and it's a great place to

7522
4:31:34,239 --> 4:31:37,520
centralize your users and your computers

7523
4:31:37,520 --> 4:31:39,680
so the whole point of this nugget is

7524
4:31:39,680 --> 4:31:42,159
really twofold one authentication can be

7525
4:31:42,159 --> 4:31:44,560
done on linux and i did it for over a

7526
4:31:44,560 --> 4:31:46,479
decade where everything was hosted on a

7527
4:31:46,479 --> 4:31:49,040
local linux machine and i used nis for

7528
4:31:49,040 --> 4:31:50,239
authentication i could have used

7529
4:31:50,239 --> 4:31:52,960
openldap but generally you're not going

7530
4:31:52,960 --> 4:31:54,720
to do that on a big network because you

7531
4:31:54,720 --> 4:31:56,560
have more than linux machines that need

7532
4:31:56,560 --> 4:31:58,560
to authenticate now the other thing

7533
4:31:58,560 --> 4:32:01,040
though is database servers i want you to

7534
4:32:01,040 --> 4:32:02,640
know that they're almost always going to

7535
4:32:02,640 --> 4:32:05,359
be on their own server because they use

7536
4:32:05,359 --> 4:32:08,239
a lot of resources a lot of memory a lot

7537
4:32:08,239 --> 4:32:11,520
of cpu a lot of disk io so if you're

7538
4:32:11,520 --> 4:32:13,600
setting up server roles on your network

7539
4:32:13,600 --> 4:32:15,920
think about a database server as having

7540
4:32:15,920 --> 4:32:18,720
its own need unless you host it out on

7541
4:32:18,720 --> 4:32
the cloud in which case you're just

7542
4:32 --> 4:32:22,319
paying for somebody else's resources

7543
4:32:22,319 --> 4:32:26,560
which can often be even more effective

7544
4:32:26,560 --> 4:32:29,199
centralized logging and monitoring is

7545
4:32:29,199 --> 4:32:30,960
great for a big network because it's

7546
4:32:30,960 --> 4:32:32,800
easy to lose track of a big number of

7547
4:32:32,800 --> 4:32:35,120
servers but honestly it's great even if

7548
4:32:35,120 --> 4:32:37,680
you have a tiny little network now i'm

7549
4:32:37,680 --> 4:32:38,800
going to look at

7550
4:32:38,800 --> 4:32:40,960
combining syslogs but i also want to

7551
4:32:40,960 --> 4:32:41,960
peek at

7552
4:32:41,960 --> 4:32:45,680
snmp because both are vital for

7553
4:32:45,680 --> 4:32:47,439
combining information from multiple

7554
4:32:47,439 --> 4:32:49,680
sources centralizing them if you will so

7555
4:32:49,680 --> 4:32:52,080
that it's easier to see and easier to

7556
4:32:52,080 --> 4:32:54,800
use for making predictions and

7557
4:32:54,800 --> 4:32:56,560
adjustments in how your infrastructure

7558
4:32:56,560 --> 4:32:57,920
works so first of all i want to talk

7559
4:32:57,920 --> 4:33:00,640
about central logging okay now there are

7560
4:33:00,640 --> 4:33:02,880
a ton of devices out there a lot of them

7561
4:33:02,880 --> 4:33:04,799
can be you know servers you know and

7562
4:33:04,799 --> 4:33:06,400
lots of servers on the rack and you

7563
4:33:06,400 --> 4:33:08,240
don't want each one to have its own set

7564
4:33:08,240 --> 4:33
of logs you want to combine them but

7565
4:33 --> 4:33:12,639
there's other things now that can create

7566
4:33:12,639 --> 4:33:15,760
logs but may not have the storage area

7567
4:33:15,760 --> 4:33
to keep those logs on themselves like

7568
4:33 --> 4:33:20,561
security cameras routers motion

7569
4:33:20,561 --> 4:33:23,760
detectors smart bulbs printers all of

7570
4:33:23,760 --> 4:33:26,639
these things can create log files and if

7571
4:33:26,639 --> 4:33:28,719
you can redirect them

7572
4:33:28,719 --> 4:33:31,840
to a centralized server that's going to

7573
4:33:31,840 --> 4:33:34,160
allow you to comb through data in a very

7574
4:33:34,160 --> 4:33:36,080
efficient way and in fact sometimes this

7575
4:33:36,080 --> 4:33:39,119
is the only way you can get data from

7576
4:33:39,119 --> 4:33:41,039
certain devices that have absolutely no

7577
4:33:41,039 --> 4:33:43,439
storage on them but can generate logs

7578
4:33:43,439 --> 4:33:45,199
and information now when you combine

7579
4:33:45,199 --> 4:33:47,279
them all together it is pretty neat how

7580
4:33:47,279 --> 4:33:49,840
it works the centralized log server is

7581
4:33:49,840 --> 4:33:52,480
going to just have one big log file

7582
4:33:52,480 --> 4:33:55,279
however each individual device is going

7583
4:33:55,279 --> 4:33:59,039
to put its own name in the log file so

7584
4:33:59,039 --> 4:34:00,959
you can sort by whatever computer is

7585
4:34:00,959 --> 4:34:02,320
adding it so even though you have one

7586
4:34:02,320 --> 4:34:04,320
log file that is going to contain

7587
4:34:04,320 --> 4:34:07,199
everything it's easy to separate out the

7588
4:34:07,199 --> 4:34:09,359
individual devices to see what they're

7589
4:34:09,359 --> 4:34:11,359
doing using tools like grep or there are

7590
4:34:11,359 --> 4:34:13,119
some really fancy devops tools that will

7591
4:34:13,119 --> 4:34:16,400
allow you to sort data from combined log

7592
4:34:16,400 --> 4:34:17,359
files

7593
4:34:17,359 --> 4:34:19,680
when you combine log files like that you

7594
4:34:19,680 --> 4:34:22,959
end up being able to see some trends or

7595
4:34:22,959 --> 4:34:24,879
see some relationships that might not

7596
4:34:24,879 --> 4:34:26,799
otherwise be easily accessible for

7597
4:34:26,799 --> 4:34:29,279
example if none of these devices are

7598
4:34:29,279 --> 4:34:31,439
able to access a dns server well maybe

7599
4:34:31,439 --> 4:34:33,760
you have some problem with the network

7600
4:34:33,760 --> 4:34:35,920
in that portion of your company and so

7601
4:34:35,920 --> 4:34:37,840
you can help troubleshoot based on what

7602
4:34:37,840 --> 4:34:41,760
logs are being submitted now snmp

7603
4:34:41,760 --> 4:34:44,240
is slightly different and it stands for

7604
4:34:44,240 --> 4:34:47,520
simple network management protocol but

7605
4:34:47,520 --> 4:34:49,520
it's a little bit of a misnomer because

7606
4:34:49,520 --> 4:34:52,080
traditionally this was used to not only

7607
4:34:52,080 --> 4:34:55,680
read data but also remotely control

7608
4:34:55,680 --> 4:34:58,719
devices using this network management

7609
4:34:58,719 --> 4:35:00,799
again it was a two-way street protocol

7610
4:35:00,799 --> 4:35:02,480
now there are still some instances where

7611
4:35:02,480 --> 4:35:05,119
you can use this to manage devices but

7612
4:35:05,119 --> 4:35:08,480
mainly it's used for pulling data and

7613
4:35:08,480 --> 4:35
what i mean by that is let's say you

7614
4:35 --> 4:35:12,240
have some data that you'd like to

7615
4:35:12,240 --> 4:35:15,119
concatenate together for an informative

7616
4:35:15,119 --> 4:35:17,199
data pie that's just delicious you're

7617
4:35:17,199 --> 4:35:19,199
trying to make graphs or something you

7618
4:35:19,199 --> 4:35:21,600
can use snmp

7619
4:35:21,600 --> 4:35:23,760
to pull data from a device one of the

7620
4:35:23,760 --> 4:35:25,920
most common things that i use it for is

7621
4:35:25,920 --> 4:35
i have a router that i connect to the

7622
4:35 --> 4:35:29,840
internet with and i would like to see

7623
4:35:29,840 --> 4:35:32,639
some interface statistics for what's

7624
4:35:32,639 --> 4:35:34,240
going on how much data is going through

7625
4:35:34,240 --> 4:35:37,279
it and things like that snmp can pull

7626
4:35:37,279 --> 4:35:39,359
that data it's not really like

7627
4:35:39,359 --> 4:35:41,359
individual servers pushing data to a

7628
4:35:41,359 --> 4:35:42,879
centralized logging it's kind of going

7629
4:35:42,879 --> 4:35:46,320
the other way it's kind of using snmp to

7630
4:35:46,320 --> 4:35:48,639
pull data from individual devices and

7631
4:35:48,639 --> 4:35:51,039
what that looks like in practice here is

7632
4:35:51,039 --> 4:35:52,799
this is actually the home page that

7633
4:35:52,799 --> 4:35:54,240
every time i load up a web browser this

7634
4:35:54,240 --> 4:35:55,920
is what loads up and i have a couple

7635
4:35:55,920 --> 4:35:57,520
convenient links for me you know to go

7636
4:35:57,520 --> 4:35:59,199
to see the weather in my area that sort

7637
4:35:59,199 --> 4:36:01,840
of thing but i have these graphs that

7638
4:36:01,840 --> 4:36:04,480
show the bandwidth usage both in my

7639
4:36:04,480 --> 4:36:07,359
house in the town and we own a farm as

7640
4:36:07,359 --> 4:36:09,680
well that has fiber internet connection

7641
4:36:09,680 --> 4:36:12,160
and this shows the connection between

7642
4:36:12,160 --> 4:36:14,240
them now you'll notice there's a lot of

7643
4:36:14,240 --> 4:36:16,080
matching between the two and that's

7644
4:36:16,080 --> 4:36:18,561
because i will often back all of my

7645
4:36:18,561 --> 4:36:21,520
townhouse data to our farm because it's

7646
4:36:21,520 --> 4:36:23,199
an off-site storage location so that

7647
4:36:23,199 --> 4:36:25,039
makes a lot of sense but this is just a

7648
4:36:25,039 --> 4:36:26,561
way that i can see what's happening on

7649
4:36:26,561 --> 4:36:28,400
my network and i pull this from my

7650
4:36:28,400 --> 4:36:31,600
routers using snmp now it's important to

7651
4:36:31,600 --> 4:36:33,279
realize that while they accomplish sort

7652
4:36:33,279 --> 4:36:35,680
of the same thing centralized logging

7653
4:36:35,680 --> 4:36:38,480
allows all of your servers to push data

7654
4:36:38,480 --> 4:36:40,480
to a centralized server so you can comb

7655
4:36:40,480 --> 4:36:42,400
through all that data in one place

7656
4:36:42,400 --> 4:36:45,760
whereas snmp is generally used as a

7657
4:36:45,760 --> 4:36:49,359
protocol that you can pull data out of a

7658
4:36:49,359 --> 4:36:51,439
server and do something with it like

7659
4:36:51,439 --> 4:36:53,119
make cool graphs or whatever it is you

7660
4:36:53,119 --> 4:36:54,480
want to do

7661
4:36:54,480 --> 4:36:56,160
vpns might be something that you use

7662
4:36:56,160 --> 4:36:57,600
every day but don't really understand

7663
4:36:57,600 --> 4:37:00,080
what's going on so vpns or virtual

7664
4:37:00,080 --> 4:37:02,160
private networks are really just a way

7665
4:37:02,160 --> 4:37:04,240
to connect to a private network that

7666
4:37:04,240 --> 4:37:06,320
isn't accessible from the internet

7667
4:37:06,320 --> 4:37:08,080
itself now talk about the concepts then

7668
4:37:08,080 --> 4:37:09,680
i want to talk about what options are

7669
4:37:09,680 --> 4:37:12,160
available if you're using linux because

7670
4:37:12,160 --> 4:37:14,160
vpn isn't just a one-size-fits-all thing

7671
4:37:14,160 --> 4:37:16,320
there are several different protocols

7672
4:37:16,320 --> 4:37:17,840
and stuff that you can use to connect

7673
4:37:17,840 --> 4:37
but first of all conceptually what is

7674
4:37 --> 4:37:23,279
going on well we have two networks let's

7675
4:37:23,279 --> 4:37
say these networks are separated by

7676
4:37 --> 4:37:28,080
being in different countries okay now

7677
4:37:28,080 --> 4:37:30,480
you want to have this computer be able

7678
4:37:30,480 --> 4:37:32,959
to interact with this computer or this

7679
4:37:32,959 --> 4:37:34,639
server or something on the remote

7680
4:37:34,639 --> 4:37:36,639
network but you don't want to open those

7681
4:37:36,639 --> 4:37:38,480
ports up to the internet right because

7682
4:37:38,480 --> 4:37:41,119
that's unsafe so what you do is your

7683
4:37:41,119 --> 4:37:43,920
router or your linux server or something

7684
4:37:43,920 --> 4:37:46,480
will establish what's called a tunnel

7685
4:37:46,480 --> 4:37:48,639
and this tunnel is just a layer of

7686
4:37:48,639 --> 4:37:50,240
encryption

7687
4:37:50,240 --> 4:37:52,799
that goes from one side to the other and

7688
4:37:52,799 --> 4:37:55,199
then inside that encrypted tunnel it

7689
4:37:55,199 --> 4:37:57,600
just sets up a route like it would any

7690
4:37:57,600 --> 4:37:59,520
other route on your network so your

7691
4:37:59,520 --> 4:38:01,760
router just sees inside the tunnel and

7692
4:38:01,760 --> 4:38:04,719
it sees a route using standard network

7693
4:38:04,719 --> 4:38:07,600
addressing like let's say the vpn

7694
4:38:07,600 --> 4:38:10,920
internal route is

7695
4:38:10,920 --> 4:38:13,520
10.10.0.5 or something and it just sees

7696
4:38:13,520 --> 4:38:15,920
this as another route so that this

7697
4:38:15,920 --> 4:38:18,160
computer can route information across

7698
4:38:18,160 --> 4:38:20,639
the tunnel to this router and then get

7699
4:38:20,639 --> 4:38:22,959
into here so it works the same as

7700
4:38:22,959 --> 4:38:25,119
traditional routing the only difference

7701
4:38:25,119 --> 4:38:27,920
is the router or like i said the linux

7702
4:38:27,920 --> 4:38:30,639
server or whatever it is sets up this

7703
4:38:30,639 --> 4:38:33,199
tunnel that blocks anybody on the

7704
4:38:33,199 --> 4:38:35,119
internet from actually seeing what's

7705
4:38:35,119 --> 4:38:37,439
going on in the route so that tunnel is

7706
4:38:37,439 --> 4:38:39,760
set up and then the route goes inside

7707
4:38:39,760 --> 4:38:42,160
the tunnel so nobody sees the traffic

7708
4:38:42,160 --> 4:38
now this setup that i have here is

7709
4:38 --> 4:38:47,199
called a site to site vpn and what it

7710
4:38:47,199 --> 4:38:49,920
means is since there is a standard route

7711
4:38:49,920 --> 4:38:52,480
set up here anything on this network is

7712
4:38:52,480 --> 4:38:54,240
going to be go is going to be able to go

7713
4:38:54,240 --> 4:38:56,160
over here to this network and anything

7714
4:38:56,160 --> 4:38
on this network is going to route over

7715
4:38 --> 4:39:00,320
to this network as if they were in the

7716
4:39:00,320 --> 4:39:02,879
same building it's just a standard route

7717
4:39:02,879 --> 4:39:05,119
inside that encrypted tunnel now the

7718
4:39:05,119 --> 4:39:07,439
other type of vpn is going to be just an

7719
4:39:07,439 --> 4:39:10,160
end user connecting to an office and if

7720
4:39:10,160 --> 4:39:12,320
if you're a remote worker or you're like

7721
4:39:12,320 --> 4:39:14,080
a road warrior you're going to use this

7722
4:39:14,080 --> 4:39:16,080
a lot your computer is going to

7723
4:39:16,080 --> 4:39:18,561
establish the same type of tunnel to

7724
4:39:18,561 --> 4:39:20,480
block all of the internal

7725
4:39:20,480 --> 4:39:23,039
network traffic from the internet itself

7726
4:39:23,039 --> 4:39:25,600
once it sets up that tunnel then just

7727
4:39:25,600 --> 4:39:28,719
your computer is going to be connected

7728
4:39:28,719 --> 4:39:32,160
to this internal network okay so you're

7729
4:39:32,160 --> 4:39:34,480
actually going to as if you plugged into

7730
4:39:34,480 --> 4:39:37,600
an ethernet port in the wall next to all

7731
4:39:37,600 --> 4:39:39,600
of your other employees or your other

7732
4:39:39,600 --> 4:39:41,520
fellow workers who happen to be in the

7733
4:39:41,520 --> 4:39:43,520
headquarters so what this does is it

7734
4:39:43,520 --> 4:39:46,718
puts your computer inside this local

7735
4:39:46,718 --> 4:39:49,360
network by establishing a tunnel and

7736
4:39:49,360 --> 4:39:51,440
then setting up routing protocols that

7737
4:39:51,440 --> 4:39:53,600
will put you inside there so it's a

7738
4:39:53,600 --> 4:39:55,040
little bit different than a site to site

7739
4:39:55,040 --> 4:39
because these computers are probably not

7740
4:39 --> 4:40:00,320
going to like serve data from your

7741
4:40:00,320 --> 4:40:02,160
computer it's going to work a little bit

7742
4:40:02,160 --> 4:40:04,240
differently but conceptually the same

7743
4:40:04,240 --> 4:40:06,798
thing is happening your remote computer

7744
4:40:06,798 --> 4:40:09,680
is now able to connect to computers

7745
4:40:09,680 --> 4:40:12,160
inside the remote network and it's all

7746
4:40:12,160 --> 4:40:14,400
protected from the internet by using a

7747
4:40:14,400 --> 4:40:16,160
vpn now i talked about different

7748
4:40:16,160 --> 4:40:18,080
protocols to do that and there are a

7749
4:40:18,080 --> 4:40:21,120
bunch there's openvpn which is an open

7750
4:40:21,120 --> 4:40:22,878
source program that allows you to

7751
4:40:22,878 --> 4:40:25,120
establish these types of connections uh

7752
4:40:25,120 --> 4:40:27,920
there's ssh which can establish a tunnel

7753
4:40:27,920 --> 4:40:30,798
for you to do stuff there's l2

7754
4:40:30,798 --> 4:40:34,638
tp there's ipsec there's all these

7755
4:40:34,638 --> 4:40:36,240
different protocols and programs that

7756
4:40:36,240 --> 4:40:38,798
will allow these tunnels to be created

7757
4:40:38,798 --> 4:40:40,718
and a vast majority of these will

7758
4:40:40,718 --> 4:40:44,160
actually run on a linux server inside

7759
4:40:44,160 --> 4:40:46,480
the network so if your router itself

7760
4:40:46,480 --> 4:40:48,638
doesn't support vpn that's okay you can

7761
4:40:48,638 --> 4:40:51,360
port forward into a linux server and the

7762
4:40:51,360 --> 4:40:54,560
linux server will handle all of the vpn

7763
4:40:54,560 --> 4:40:56,480
routing now there are lots of nuances

7764
4:40:56,480 --> 4:40:58,638
when it comes to vpn like can you only

7765
4:40:58,638 --> 4:41:00,400
connect through the remote business can

7766
4:41:00,400 --> 4:41:02,798
you connect to the internet and also to

7767
4:41:02,798 --> 4:41:04,480
those things is all of your traffic

7768
4:41:04,480 --> 4:41:06,320
routed through the vpn even if it's a

7769
4:41:06,320 --> 4:41:08,160
slow link so there's a lot to think

7770
4:41:08,160 --> 4:41:10,240
about when setting up vpns but once you

7771
4:41:10,240 --> 4:41:12,160
understand what's going on it's a lot

7772
4:41:12,160 --> 4:41:13,840
easier to plan how you're going to

7773
4:41:13,840 --> 4:41
implement it so that it so that it can

7774
4:41 --> 4:41:18,958
best serve your users or your multiple

7775
4:41:18,958 --> 4:41:20,878
branch offices so they can communicate

7776
4:41:20,878 --> 4:41:22,480
to each other i hope this has been

7777
4:41:22,480 --> 4:41
informative for you and i'd like to

7778
4:41 --> 4:41:26,240
thank you for viewing containers aren't

7779
4:41:26,240 --> 4:41:27,680
really new technology they've been

7780
4:41:27,680 --> 4:41:29,520
around for quite a while there have been

7781
4:41:29,520 --> 4:41:32,160
options like lxc and you've probably

7782
4:41:32,160 --> 4:41:35,280
heard of docker and also kubernetes

7783
4:41:35,280 --> 4:41:36,560
comes into the mix which is actually

7784
4:41:36,560 --> 4:41:38,560
like an orchestration tool that takes

7785
4:41:38,560 --> 4:41:40,560
care of docker but while containers

7786
4:41:40,560 --> 4:41:42,480
aren't new they are kind of the new kid

7787
4:41:42,480 --> 4:41:44,520
on the block when it comes to devops and

7788
4:41:44,520 --> 4:41:46,878
containerizing applications is something

7789
4:41:46,878 --> 4:41:48,560
that's really really popular now

7790
4:41:48,560 --> 4:41:50,320
conceptually they're a little bit like a

7791
4:41:50,320 --> 4:41:52,400
virtual machine but they're they're

7792
4:41:52,400 --> 4:41:53,840
different enough that it's important to

7793
4:41:53,840 --> 4:41:55,600
understand the difference so let's say

7794
4:41:55,600 --> 4:41
we have a traditional virtual machine

7795
4:41 --> 4:41:59,440
which i'm going to say is the left hand

7796
4:41:59,440 --> 4:42:01,360
side of this slide so how it works is

7797
4:42:01,360 --> 4:42:03,440
you have the the big computer you know

7798
4:42:03,440 --> 4:42:05,920
and then that computer or that host has

7799
4:42:05,920 --> 4:42:08,878
its own operating system and then on top

7800
4:42:08,878 --> 4:42:12,160
of that we carve out a section of the

7801
4:42:12,160 --> 4:42:15,760
host's cpu and memory and and cards and

7802
4:42:15,760 --> 4:42:17,680
hard drive space we carve that out and

7803
4:42:17,680 --> 4:42:19,840
then on top of that we install another

7804
4:42:19,840 --> 4:42:22,240
operating system inside this virtualized

7805
4:42:22,240 --> 4:42:23,840
environment and then we can put

7806
4:42:23,840 --> 4:42:26,798
applications on that now containers work

7807
4:42:26,798 --> 4:42:29,520
in a different way they run right inside

7808
4:42:29,520 --> 4:42:31,680
the host operating system so you just

7809
4:42:31,680 --> 4:42:32,958
have an app

7810
4:42:32,958 --> 4:42:34,480
running in another app running and

7811
4:42:34,480 --> 4:42:36,480
another app running and this seems like

7812
4:42:36,480 --> 4:42:38,240
the traditional server model right where

7813
4:42:38,240 --> 4:42:40,480
you just install linux and then you

7814
4:42:40,480 --> 4:42:42,400
install applications like apache on top

7815
4:42:42,400 --> 4:42:44,240
of it the difference is with a

7816
4:42:44,240 --> 4:42:46,718
containerized application they are

7817
4:42:46,718 --> 4:42:49,200
running directly on the host computer

7818
4:42:49,200 --> 4:42:50,638
but they have

7819
4:42:50,638 --> 4:42:53,040
not really their own operating system

7820
4:42:53,040 --> 4:42:56,480
all they have is like their own file

7821
4:42:56,480 --> 4:42:57,520
system

7822
4:42:57,520 --> 4:42:59,520
and they're jailed off or they're

7823
4:42:59,520 --> 4:43:02,400
completely separate from the file system

7824
4:43:02,400 --> 4:43:04,798
of the host operating system itself so

7825
4:43:04,798 --> 4:43:08,560
they run in their own little world

7826
4:43:08,560 --> 4:43:10,400
but they're still running directly on

7827
4:43:10,400 --> 4:43
the operating system it's just like

7828
4:43 --> 4:43:14,160
they're sectioned off in a little

7829
4:43:14,160 --> 4:43:15,920
container

7830
4:43:15,920 --> 4:43:17,280
but they're still running on the host

7831
4:43:17,280 --> 4:43:18,878
operating system and that's really what

7832
4:43:18,878 --> 4:43:20,400
makes them efficient you'll notice over

7833
4:43:20,400 --> 4:43:22,638
here um yeah it's drawing it's not like

7834
4:43:22,638 --> 4:43:24,638
the actual technology but it takes up a

7835
4:43:24,638 --> 4:43:27,680
lot more hardware and storage and slices

7836
4:43:27,680 --> 4:43:29,920
of the host system itself if you're

7837
4:43:29,920 --> 4:43:32,638
going to install an entire operating

7838
4:43:32,638 --> 4:43:36,240
system on top of virtualized hardware it

7839
4:43:36,240 --> 4:43:37,920
just you're not you can't put as many

7840
4:43:37,920 --> 4:43:41,280
things on one host operating system plus

7841
4:43:41,280 --> 4:43:43,680
you also have then this operating system

7842
4:43:43,680 --> 4:43:46,240
to maintain along with this operating

7843
4:43:46,240 --> 4:43:48,400
system these don't have their own

7844
4:43:48,400 --> 4:43:50,160
operating system so you don't need to

7845
4:43:50,160 --> 4:43:52,958
maintain anything except the application

7846
4:43:52,958 --> 4:43:55,040
itself and it works really cool that

7847
4:43:55,040 --> 4:43:56,560
jail system is neat so i want to show

7848
4:43:56,560 --> 4:43:58,638
you how that works and let's go actually

7849
4:43:58,638 --> 4:44:01,200
over to a virtualized environment so

7850
4:44:01,200 --> 4:44:03,600
here i am in i'm running ubuntu and i

7851
4:44:03,600 --> 4:44
have docker installed so we're not going

7852
4:44 --> 4:44:08,240
to get into how docker works there's a

7853
4:44:08,240 --> 4:44
whole course on how docker works that i

7854
4:44 --> 4:44:11,200
taught which is one of my favorite

7855
4:44:11,200 --> 4:44:12,718
courses but first of all we're just

7856
4:44:12,718 --> 4:44:14,958
going to start a docker container and

7857
4:44:14,958 --> 4:44:16,878
we're going to put ourselves inside of

7858
4:44:16,878 --> 4:44:18,480
it so this is just a little bit of free

7859
4:44:18,480 --> 4:44:19,920
info we're going to say

7860
4:44:19,920 --> 4:44:22,080
docker run dash

7861
4:44:22,080 --> 4:44:24,638
it for interactive tty let's say we're

7862
4:44:24,638 --> 4:44:27,040
going to run the ubuntu image and i want

7863
4:44:27,040 --> 4:44:28,480
to run bin

7864
4:44:28,480 --> 4:44:30,480
bash which is the shell command that i

7865
4:44:30,480 --> 4:44:32,560
want to run so now boom it it was that

7866
4:44:32,560 --> 4:44:35,200
fast right it created the container that

7867
4:44:35,200 --> 4:44:36,958
quickly and i didn't like pause the

7868
4:44:36,958 --> 4:44:38,320
video and wait for it it actually went

7869
4:44:38,320 --> 4:44:40,958
that quickly and now we're inside this

7870
4:44:40,958 --> 4:44:42,878
container which acts like its own

7871
4:44:42,878 --> 4:44:44,160
operating system because remember it's

7872
4:44:44,160 --> 4:44:46,240
jailed off but it's still running on the

7873
4:44:46,240 --> 4:44:47,680
system and we can demonstrate that see

7874
4:44:47,680 --> 4:44:49,680
i'm not i'm no longer on cbt docker now

7875
4:44:49,680 --> 4:44:52,320
i'm on this internal container and we

7876
4:44:52,320 --> 4:44:53,920
have our own file system but let's run a

7877
4:44:53,920 --> 4:44:55,280
command in here we're going to run

7878
4:44:55,280 --> 4:44:57,040
something that'll show up with cpu usage

7879
4:44:57,040 --> 4:44:58,400
so i'm just going to say

7880
4:44:58,400 --> 4:44:59,280
dd

7881
4:44:59,280 --> 4:45:02,718
input file equals dev 0 i'll put file

7882
4:45:02,718 --> 4:45:04,080
equals

7883
4:45:04,080 --> 4:45:06,320
dev no and this is just something that's

7884
4:45:06,320 --> 4:45:07,840
going to keep running keep running keep

7885
4:45:07,840 --> 4:45:09,360
running and not really do anything

7886
4:45:09,360 --> 4:45:11,440
except use up resources on the computer

7887
4:45:11,440 --> 4:45:13,040
and i want to do that so we can come

7888
4:45:13,040 --> 4:45:15,840
over to cbt docker here run the top

7889
4:45:15,840 --> 4:45:18,080
command and even though this is now in

7890
4:45:18,080 --> 4:45:20,400
its own container completely separate

7891
4:45:20,400 --> 4:45:22,958
from cbt docker the operating system you

7892
4:45:22,958 --> 4:45:26,080
can see look dd shows up as another

7893
4:45:26,080 --> 4:45:28,798
command running inside this computer

7894
4:45:28,798 --> 4:45:30,718
because even though it's separated in a

7895
4:45:30,718 --> 4:45:33,040
container it's still using the same

7896
4:45:33,040 --> 4:45:34,878
operating system the same kernel the

7897
4:45:34,878 --> 4:45:37,200
same hardware that everything else along

7898
4:45:37,200 --> 4:45:39,280
this system is it's just separated so it

7899
4:45:39,280 --> 4:45:41,280
doesn't interfere and dependencies won't

7900
4:45:41,280 --> 4:45:42,718
interfere with other apps it won't

7901
4:45:42,718 --> 4:45:44,320
interfere with dependencies on the host

7902
4:45:44,320 --> 4:45:46,718
system it's just super efficient so

7903
4:45:46,718 --> 4:45:49,120
whether you're looking at lxc containers

7904
4:45:49,120 --> 4:45:50,958
or docker containers which is what we

7905
4:45:50,958 --> 4:45:52,798
looked at it's important to understand

7906
4:45:52,798 --> 4:45:55,360
that containers are a lot like a virtual

7907
4:45:55,360 --> 4:45:57,280
machine except they don't use all of

7908
4:45:57,280 --> 4:45:58,958
that hardware and they don't completely

7909
4:45:58,958 --> 4:46:00,560
section themselves off and most

7910
4:46:00,560 --> 4:46:02,160
importantly they don't have their own

7911
4:46:02,160 --> 4:46:04,240
operating system that's where containers

7912
4:46:04,240 --> 4:46:06,480
make things much more efficient and much

7913
4:46:06,480 --> 4:46:08,560
easier to deal with with much less

7914
4:46:08,560 --> 4:46:09,760
overhead meaning you don't have to

7915
4:46:09,760 --> 4:46:11,600
maintain the operating systems of

7916
4:46:11,600 --> 4:46:13,920
individual apps

7917
4:46:13,920 --> 4:46:15,920
it's really easy to confuse the concepts

7918
4:46:15,920 --> 4:46:18,560
of clustering and load balancing because

7919
4:46:18,560 --> 4:46:20,638
they kind of are the same it's kind of

7920
4:46:20,638 --> 4:46:22,160
like the question is a hot dog a

7921
4:46:22,160 --> 4:46:23,760
sandwich i mean they're both meat

7922
4:46:23,760 --> 4:46:25,200
between bread but are they the same

7923
4:46:25,200 --> 4:46:26,160
thing

7924
4:46:26,160 --> 4:46:28,400
not exactly not quite but they both

7925
4:46:28,400 --> 4:46:30,320
function similarly and that's what

7926
4:46:30,320 --> 4:46:32,080
clustering and load balancing is like

7927
4:46:32,080 --> 4:46
the difference is though clustering is

7928
4:46 --> 4:46:37,040
an actual computer term for computers

7929
4:46:37,040 --> 4:46:39,360
working together to do one task that can

7930
4:46:39,360 --> 4:46:41,440
be split up whereas load balancing is

7931
4:46:41,440 --> 4:46:43,760
more of an i.t concept that can be

7932
4:46:43,760 --> 4:46:45,840
accomplished in the multiple ways so

7933
4:46:45,840 --> 4:46:47,440
when we have a cluster basically we have

7934
4:46:47,440 --> 4:46:49,360
a bunch of computers like we have here

7935
4:46:49,360 --> 4:46:50,798
that are working together and then

7936
4:46:50,798 --> 4:46:52,878
there's like a cluster manager it can be

7937
4:46:52,878 --> 4:46:54,638
a computer it can be a software on you

7938
4:46:54,638 --> 4:46:56,958
know one of the cluster computers but it

7939
4:46:56,958 --> 4:46:59,920
actually keeps track of which computer

7940
4:46:59,920 --> 4:47:02,160
in the cluster is doing what part of the

7941
4:47:02,160 --> 4:47:04,080
task and these are designed to work

7942
4:47:04,080 --> 4:47:05,760
together they know about each other

7943
4:47:05,760 --> 4:47:08,320
these computers are a team and they

7944
4:47:08,320 --> 4:47:11,040
really do well if susie here

7945
4:47:11,040 --> 4:47:13,200
sends them a task that is designed to be

7946
4:47:13,200 --> 4:47:14,878
broken up into multiple pieces so people

7947
4:47:14,878 --> 4:47:17,440
can work on it at the same time so some

7948
4:47:17,440 --> 4:47:19,920
jobs lend themselves to clustering

7949
4:47:19,920 --> 4:47:22,320
solutions whereas some of them don't but

7950
4:47:22,320 --> 4:47:24,400
basically they know about each other the

7951
4:47:24,400 --> 4:47:26,320
cluster works together as a team to

7952
4:47:26,320 --> 4:47:28,160
break down a bigger task into a bunch of

7953
4:47:28,160 --> 4:47:29,760
smaller ones they can work on at the

7954
4:47:29,760 --> 4:47:32,240
same time a load balancer like i said is

7955
4:47:32,240 --> 4:47:34,560
more of a concept it load balances

7956
4:47:34,560 --> 4:47:37,280
meaning it it has a big job and it

7957
4:47:37,280 --> 4:47:39,520
splits that job up and lets different

7958
4:47:39,520 --> 4:47:43,280
computers do the job but usually these

7959
4:47:43,280 --> 4:47:46,160
computers don't know or care about each

7960
4:47:46,160 --> 4:47:47,920
other at all they don't know each other

7961
4:47:47,920 --> 4:47:50,400
exist the load balancer itself whether

7962
4:47:50,400 --> 4:47:52,878
it's software or a hardware device it

7963
4:47:52,878 --> 4:47:53,840
knows

7964
4:47:53,840 --> 4:47:55,920
the entire big load that susie is

7965
4:47:55,920 --> 4:47:58,080
sending to it and it splits it up and

7966
4:47:58,080 --> 4:48:01,280
says okay she has 12 jobs so you do

7967
4:48:01,280 --> 4:48:03,280
three jobs and you do three jobs and you

7968
4:48:03,280 --> 4:48:05,360
do three jobs they don't know each other

7969
4:48:05,360 --> 4:48:07,040
are doing jobs as far as the computers

7970
4:48:07,040 --> 4:48:08,958
know there's only three jobs to do it's

7971
4:48:08,958 --> 4:48:11,200
the load balancers job to keep track of

7972
4:48:11,200 --> 4:48:12,400
everything so it's a little bit

7973
4:48:12,400 --> 4:48:13,440
different they don't really work

7974
4:48:13,440 --> 4:48:15,920
together they each work separately

7975
4:48:15,920 --> 4:48
and accomplish a bigger task that the

7976
4:48 --> 4:48:20,400
load balancer itself knows about now i

7977
4:48:20,400 --> 4:48:22,240
said it's a concept it can work multiple

7978
4:48:22,240 --> 4:48:24,240
ways right a very common way it's done

7979
4:48:24,240 --> 4:48:26,320
is the load balancer will be in front of

7980
4:48:26,320 --> 4:48:28,638
some web servers and there's a whole

7981
4:48:28,638 --> 4:48:30,718
bunch of people that want to hit that

7982
4:48:30,718 --> 4:48:33,040
web server and so the load balancer says

7983
4:48:33,040 --> 4:48:36,240
okay you go to this one and now you go

7984
4:48:36,240 --> 4:48:37,920
to this one and the next request will go

7985
4:48:37,920 --> 4:48
to this one and it splits up the load so

7986
4:48 --> 4:48:42,320
that one computer isn't doing all of the

7987
4:48:42,320 --> 4:48:45,360
work now we can do that very simply on a

7988
4:48:45,360 --> 4:48:47,680
linux machine if the linux machine is

7989
4:48:47,680 --> 4:48:50,560
set up for round robin dns now this is

7990
4:48:50,560 --> 4:48:52,718
not a great way to load balance just

7991
4:48:52,718 --> 4:48:54,400
conceptually this is what it's going to

7992
4:48:54,400 --> 4:48:57,840
do so here is my dns configuration on my

7993
4:48:57,840 --> 4:49:01,200
network i have the domain name web it's

7994
4:49:01,200 --> 4:49:03,680
actually set up for three different ip

7995
4:49:03,680 --> 4:49:05,040
addresses okay so you'll see it's

7996
4:49:05,040 --> 4:49:07,200
actually web web web but they have three

7997
4:49:07,200 --> 4:49:09,040
different ip addresses and what my dns

7998
4:49:09,040 --> 4:49:10,798
server is going to do is then round

7999
4:49:10,798 --> 4:49:13,920
robin and it will split up the load

8000
4:49:13,920 --> 4:49:15,920
between these three let me show you how

8001
4:49:15,920 --> 4:49:17,840
that works here we are on the command

8002
4:49:17,840 --> 4:49:20,798
line so i'm going to say ping web

8003
4:49:20,798 --> 4:49:22,480
and we'll see we get the response from

8004
4:49:22,480 --> 4:49:24,320
the web server notice the ip address

8005
4:49:24,320 --> 4:49:26,360
here is 216

8006
4:49:26,360 --> 4:49:29,280
58192.238. if we do the exact same thing

8007
4:49:29,280 --> 4:49:30,320
now

8008
4:49:30,320 --> 4:49:32,958
boom if we get responses but notice it

8009
4:49:32,958 --> 4:49:35,600
sent it to a different computer together

8010
4:49:35,600 --> 4:49:38,240
so we got these from another computer

8011
4:49:38,240 --> 4:49:40,160
and if we do it again we'll get still

8012
4:49:40,160 --> 4:49:41,520
that third one

8013
4:49:41,520 --> 4:49:42,798
if we do it a fourth time it's going to

8014
4:49:42,798 --> 4:49:44,798
wrap around and give us the first one

8015
4:49:44,798 --> 4:49:47,280
again so this is technically a load

8016
4:49:47,280 --> 4:49:49,200
balancer we're using dns round robin

8017
4:49:49,200 --> 4:49:52,080
load balancing and it's conceptually

8018
4:49:52,080 --> 4:49:54,160
splitting up the load of the pings so

8019
4:49:54,160 --> 4:49:56,400
that each computer that is responding

8020
4:49:56,400 --> 4:49:59,600
only gets a third of the requests so i

8021
4:49:59,600 --> 4:50:01,440
guess it's fair to say that all

8022
4:50:01,440 --> 4:50:04,080
clustering is load balancing but not all

8023
4:50:04,080 --> 4:50:06,160
load balancing is technically clustering

8024
4:50:06,160 --> 4:50:07,840
because clustering is a specific way

8025
4:50:07,840 --> 4:50:10,080
that computers work together to

8026
4:50:10,080 --> 4:50:12,240
accomplish a task now is a hot dog a

8027
4:50:12,240 --> 4:50:13,760
sandwich i gotta leave that one up to

8028
4:50:13,760 --> 4:50:15,920
you i have no idea but i hope this has

8029
4:50:15,920 --> 4:50:17,520
been informative for you and i'd like to

8030
4:50:17,520 --> 4:50:19,280
thank you for viewing cron jobs are

8031
4:50:19,280 --> 4:50:21,440
pretty much the linux equivalent to like

8032
4:50:21,440 --> 4:50:23,840
the task scheduler in windows now

8033
4:50:23,840 --> 4:50:25,200
there's some really cool things that we

8034
4:50:25,200 --> 4:50:27,440
need to understand and that's how to set

8035
4:50:27,440 --> 4:50:28,958
up the scheduling which is kind of

8036
4:50:28,958 --> 4:50:31,040
complicated but also very powerful and

8037
4:50:31,040 --> 4:50:33,120
i'll be honest it's kind of fun the

8038
4:50:33,120 --> 4:50:34,160
other thing i want to point out though

8039
4:50:34,160 --> 4:50
is that there are pre-made folders that

8040
4:50 --> 4:50:38,080
you can just drop scripts in and they

8041
4:50:38,080 --> 4:50:40,240
will execute at a regular interval i'll

8042
4:50:40,240 --> 4:50:41,840
show you those but first let's talk

8043
4:50:41,840 --> 4:50:43,520
about how we set up the schedules

8044
4:50:43,520 --> 4:50:45,680
because it can be intimidating but like

8045
4:50:45,680 --> 4:50:47,200
i said it's not that bad and it's

8046
4:50:47,200 --> 4:50:50,160
actually kind of fun so the scheduling

8047
4:50:50,160 --> 4:50:52,160
fields which we'll look at in practice

8048
4:50:52,160 --> 4:50:54,480
are separated into five different fields

8049
4:50:54,480 --> 4:50:56,958
so we have minute hour day of the month

8050
4:50:56,958 --> 4:50:59,440
month of the year and day of the week

8051
4:50:59,440 --> 4:51
and how it works is for example this

8052
4:51 --> 4:51:04,480
first line that i have has all asterisks

8053
4:51:04,480 --> 4:51:06,480
and this means everything so every

8054
4:51:06,480 --> 4:51:08,718
minute of every hour of every day of the

8055
4:51:08,718 --> 4:51:10,320
month of every month of the year of

8056
4:51:10,320 --> 4:51:11,760
every day of the week it's going to

8057
4:51:11,760 --> 4:51:13,680
happen so this means every minute for

8058
4:51:13,680 --> 4:51:15,840
all of eternity whatever task we

8059
4:51:15,840 --> 4:51:18,878
schedule with this string is going to

8060
4:51:18,878 --> 4:51:20,560
execute so every minute it's going to do

8061
4:51:20,560 --> 4:51:22,240
whatever you tell it to do

8062
4:51:22,240 --> 4:51:24,240
now there are some shortcuts we can use

8063
4:51:24,240 --> 4:51:26,160
for example down here i have asterisk

8064
4:51:26,160 --> 4:51:29,280
divided by five this means every five

8065
4:51:29,280 --> 4:51:31,200
minutes now we could actually spell it

8066
4:51:31,200 --> 4:51:33,600
out we could say zero comma five comma

8067
4:51:33,600 --> 4:51:36,080
ten comma fifteen all the way to

8068
4:51:36,080 --> 4:51:38,240
fifty-five but i don't really like to do

8069
4:51:38,240 --> 4:51:40,080
that because it's a big mess and you

8070
4:51:40,080 --> 4:51:42,160
know one field would be this entire big

8071
4:51:42,160 --> 4:51:44,878
string of numbers so rather than do that

8072
4:51:44,878 --> 4:51:48,160
we can just say asterisk divided by five

8073
4:51:48,160 --> 4:51
and this is going to be every five

8074
4:51 --> 4:51:51,200
minutes

8075
4:51:51,200 --> 4:51:54,240
during the third hour of the day so this

8076
4:51:54,240 --> 4:51:58,878
means at 3 am 305 am 3 10 am 3 15 am but

8077
4:51:58,878 --> 4:52:01,040
once it gets to 4 am it's going to stop

8078
4:52:01,040 --> 4:52:02,878
doing it okay so this is during the

8079
4:52:02,878 --> 4:52:05,600
third hour every 5 minutes every day of

8080
4:52:05,600 --> 4:52:07,040
the month every month year every day of

8081
4:52:07,040 --> 4:52:08,480
the week so this means every day it's

8082
4:52:08,480 --> 4:52:10,718
going to do this but only between 3 a.m

8083
4:52:10,718 --> 4:52
and 3 59 a.m and every five minutes okay

8084
4:52 --> 4:52:16,878
now this one is very very very specific

8085
4:52:16,878 --> 4:52:19,360
this says two minutes after the fourth

8086
4:52:19,360 --> 4:52:23,600
hour so two and four means at 402 a.m on

8087
4:52:23,600 --> 4:52:25,280
the 13th

8088
4:52:25,280 --> 4:52:29,520
of july but only when that 13th of july

8089
4:52:29,520 --> 4:52:31,760
lands on a tuesday the day of the week

8090
4:52:31,760 --> 4:52:34,160
goes from zero to six so two is a

8091
4:52:34,160 --> 4:52:36,638
tuesday right sunday is zero monday is

8092
4:52:36,638 --> 4:52:39,440
one tuesday is two so this means every

8093
4:52:39,440 --> 4:52:43,520
july 13th at 402 am if it happens to

8094
4:52:43,520 --> 4:52:46,080
also be tuesday so this is only going to

8095
4:52:46,080 --> 4:52:49,040
execute every few years when july 13th

8096
4:52:49,040 --> 4:52:50,878
happens to land on a tuesday and then

8097
4:52:50,878 --> 4:52:53,280
down here this one zero minutes after

8098
4:52:53,280 --> 4:52:55,360
the hour so this means that six a.m

8099
4:52:55,360 --> 4:52:57,280
precisely on

8100
4:52:57,280 --> 4:52:59,120
every day of the month every month of

8101
4:52:59,120 --> 4:53:00,240
the year

8102
4:53:00,240 --> 4:53:02,718
days one through five so this means

8103
4:53:02,718 --> 4:53:05,520
monday through friday at six a.m it's

8104
4:53:05,520 --> 4:53:08,080
going to execute whatever task okay so

8105
4:53:08,080 --> 4:53:09,920
this is basically the way of saying six

8106
4:53:09,920 --> 4:53:11,920
a.m every weekday because we've

8107
4:53:11,920 --> 4:53:14,638
specified one through five on the days

8108
4:53:14,638 --> 4:53:16,480
of the week over here pretty cool right

8109
4:53:16,480 --> 4:53:17,760
let's actually see how it works in

8110
4:53:17,760 --> 4:53
practice now i'm on a centos system here

8111
4:53 --> 4:53:21,360
and i'm root because we're talking about

8112
4:53:21,360 --> 4:53:24,878
the system wide cron jobs if we go into

8113
4:53:24,878 --> 4:53:27,040
etcon

8114
4:53:27,040 --> 4:53:29,200
dot d we're going to see we have a few

8115
4:53:29,200 --> 4:53:31,520
files in here now any file in here is

8116
4:53:31,520 --> 4:53:33,680
going to be read by the cron daemon so

8117
4:53:33,680 --> 4:53:36,120
let's actually look at one let's look at

8118
4:53:36,120 --> 4:53:38,480
systat all right because this is already

8119
4:53:38,480 --> 4:53:40,400
in there so we're going to look at

8120
4:53:40,400 --> 4:53:42,958
systat and here we can see a couple

8121
4:53:42,958 --> 4:53:45,280
things are scheduled here are the five

8122
4:53:45,280 --> 4:53:46,878
fields that we just talked about so

8123
4:53:46,878 --> 4:53:48,718
here's the first field so every 10

8124
4:53:48,718 --> 4:53:50,798
minutes of every hour

8125
4:53:50,798 --> 4:53:53,520
every day every month year every day of

8126
4:53:53,520 --> 4:53:55,280
the week so this is going to be every 10

8127
4:53:55,280 --> 4:53:57,600
minutes it's going to execute

8128
4:53:57,600 --> 4:54:00,480
as root so this field talks about what

8129
4:54:00,480 --> 4:54:02,798
user it's going to run as and then the

8130
4:54:02,798 --> 4:54:04,480
rest of it is what it's going to

8131
4:54:04,480 --> 4:54:06,958
actually do so we have the five

8132
4:54:06,958 --> 4:54:09,440
scheduling fields who it runs as and

8133
4:54:09,440 --> 4:54:11,520
then the last part however long it is is

8134
4:54:11,520 --> 4:54:13,200
what it's going to execute so down here

8135
4:54:13,200 --> 4:54:14,480
these are commented out but let's

8136
4:54:14,480 --> 4:54:16,480
pretend it's not this would be every

8137
4:54:16,480 --> 4:54:18,878
hour at zero past right because this is

8138
4:54:18,878 --> 4:54:21,200
like at one o'clock two o'clock three

8139
4:54:21,200 --> 4:54:22,878
o'clock four o'clock it's going to run

8140
4:54:22,878 --> 4:54:27,200
as root this command down here at 23

8141
4:54:27,200 --> 4:54:30,638
which is 11 so 11 53 p.m

8142
4:54:30,638 --> 4:54:32,878
every day see all these are asterisk so

8143
4:54:32,878 --> 4:54:35,760
every day as root it's going to execute

8144
4:54:35,760 --> 4:54:37,840
this so you can either add to any of

8145
4:54:37,840 --> 4:54:39,840
these or really the best thing to do is

8146
4:54:39,840 --> 4:54:41,840
create your own right just create a file

8147
4:54:41,840 --> 4:54:43,520
and then put that scheduling the

8148
4:54:43,520 --> 4:54:45,600
username and what you want it to execute

8149
4:54:45,600 --> 4:54:47,120
and it will do that now the one other

8150
4:54:47,120 --> 4:54:48,638
thing i wanted to mention really quick

8151
4:54:48,638 --> 4:54:50,718
if you go back into

8152
4:54:50,718 --> 4:54:52,878
the etc folder and let's do an ls and

8153
4:54:52,878 --> 4:54:53,760
just

8154
4:54:53,760 --> 4:54:54,798
look for

8155
4:54:54,798 --> 4:54:56,798
cron we're going to see there are a

8156
4:54:56,798 --> 4:54:59,520
bunch of folders in here there are cron

8157
4:54:59,520 --> 4:55:02,160
daily cron hourly cron monthly cron

8158
4:55:02,160 --> 4:55:03,680
weekly and if we go in there let's go

8159
4:55:03,680 --> 4:55:05,440
into cron dot

8160
4:55:05,440 --> 4:55:06,958
daily

8161
4:55:06,958 --> 4:55:08,958
we're going to see these are just

8162
4:55:08,958 --> 4:55
executable scripts these are not timed

8163
4:55 --> 4:55:13,200
things right let's look at one real

8164
4:55:13,200 --> 4:55:16,160
quick so vi log rotate notice there's no

8165
4:55:16,160 --> 4:55
like startup star star star star star

8166
4:55 --> 4:55
star there's no scheduling in here this

8167
4:55 --> 4:55:22,400
is just an executable script that we

8168
4:55:22,400 --> 4:55:23,680
want to have

8169
4:55:23,680 --> 4:55:25,600
execute every

8170
4:55:25,600 --> 4:55:27,600
day so this is going to do the

8171
4:55:27,600 --> 4:55:29,760
scheduling of everything in here once a

8172
4:55:29,760 --> 4:55:32,240
day same with monthly same with hourly

8173
4:55:32,240 --> 4:55:34,240
the kran deny is a way that we can tell

8174
4:55:34,240 --> 4:55:36,320
a specific user that they're not allowed

8175
4:55:36,320 --> 4:55:38,480
to use the cron daemon for personal use

8176
4:55:38,480 --> 4:55:41,120
uh cron.d we looked at actually cron tab

8177
4:55:41,120 --> 4:55:42,878
is a single file let's look at that one

8178
4:55:42,878 --> 4:55:44,240
really quick that'll be our last thing

8179
4:55:44,240 --> 4:55:46,400
etc

8180
4:55:46,400 --> 4:55:48,560
tab and this is the same sort of thing

8181
4:55:48,560 --> 4:55:50,400
we can put things in here if we want it

8182
4:55:50,400 --> 4:55:52,798
even tells us like very specifically all

8183
4:55:52,798 --> 4:55:54,798
the things the five fields the username

8184
4:55:54,798 --> 4:55:56,320
we want it to run as and then the

8185
4:55:56,320 --> 4:55:58,400
command to be executed this is the same

8186
4:55:58,400 --> 4:56
thing as creating a file in the

8187
4:56 --> 4:56:02,400
eccentric cron.d folder you can just add

8188
4:56:02,400 --> 4:56:03,840
things here and they'll automatically

8189
4:56:03,840 --> 4:56:05,840
execute now the pre-made folders are

8190
4:56:05,840 --> 4:56:07,760
very convenient for dropping scripts in

8191
4:56:07,760 --> 4:56:09,600
that you want to have execute every so

8192
4:56:09,600 --> 4:56:11,840
often but really the coolest part about

8193
4:56:11,840 --> 4:56:13,520
cron is just how flexible that

8194
4:56:13,520 --> 4:56:15,520
scheduling system is and you can figure

8195
4:56:15,520 --> 4:56:17,200
out how to do that by you know

8196
4:56:17,200 --> 4:56:19,280
manipulating all of those different

8197
4:56:19,280 --> 4:56:21,200
fields like we looked at in this slide

8198
4:56:21,200 --> 4:56:22,718
here so i encourage you to just try to

8199
4:56:22,718 --> 4:56:24,160
figure out how you would specify a

8200
4:56:24,160 --> 4:56:26,480
particular time and you know just play

8201
4:56:26,480 --> 4:56:29,120
with it it's a lot of fun to do

8202
4:56:29,120 --> 4:56:31,120
when it comes to scheduling events you

8203
4:56:31,120 --> 4:56:33,600
have a couple options as a personal end

8204
4:56:33,600 --> 4:56:35,360
user on a linux account you can use

8205
4:56:35,360 --> 4:56:38,080
crontab personal crontab which you

8206
4:56:38,080 --> 4:56:40,798
invoke by typing crontab minus e or we

8207
4:56:40,798 --> 4:56:42,798
can use the at daemon which is a one

8208
4:56:42,798 --> 4:56:44,958
time thing it's not like for recurring

8209
4:56:44,958 --> 4:56:46,958
events it's for events that happen

8210
4:56:46,958 --> 4:56:49,520
just at a specific time so let's go

8211
4:56:49,520 --> 4:56:50,878
right to the command line because it's

8212
4:56:50,878 --> 4:56:52,958
not difficult to use either one and

8213
4:56:52,958 --> 4:56:55,120
scheduling tasks is something that's

8214
4:56:55,120 --> 4:56:57,440
really really nice to be able to do so

8215
4:56:57,440 --> 4:57
here we are on a centos machine i'm

8216
4:57 --> 4:57:02,480
logged in just as a user notice i'm not

8217
4:57:02,480 --> 4:57:04,320
root and the first thing i want to do is

8218
4:57:04,320 --> 4:57:07,200
look at my personal cron tab now this is

8219
4:57:07,200 --> 4:57:08,958
a little bit different than a system

8220
4:57:08,958 --> 4:57:11,040
wide crontab so first we type

8221
4:57:11,040 --> 4:57:13,600
cron tab minus e and it's going to bring

8222
4:57:13,600 --> 4:57:16,560
us into an editor okay and now this is

8223
4:57:16,560 --> 4:57
my personal crown tab again it's not

8224
4:57 --> 4:57:20,160
system wide and it's slightly different

8225
4:57:20,160 --> 4:57:22,798
because i still have five fields if

8226
4:57:22,798 --> 4:57:24,240
you're not familiar with the five fields

8227
4:57:24,240 --> 4:57:26,400
look at the system-wide crontab nugget

8228
4:57:26,400 --> 4:57:29,040
because it'll explain how this works but

8229
4:57:29,040 --> 4:57:32,080
we have every 10 minutes of every hour

8230
4:57:32,080 --> 4:57:33,920
of every day of every month of the year

8231
4:57:33,920 --> 4:57:35,600
every day of the week so here we have

8232
4:57:35,600 --> 4:57:37,280
every 10 minutes it's going to do

8233
4:57:37,280 --> 4:57:39,760
something now notice there's no field

8234
4:57:39,760 --> 4:57:42,638
here that specifies the user in the

8235
4:57:42,638 --> 4:57:44,878
system wide we have to specify what user

8236
4:57:44,878 --> 4:57:47,280
it runs as but since this is my personal

8237
4:57:47,280 --> 4:57:50,320
crontab it obviously runs as me so we

8238
4:57:50,320 --> 4:57:52,718
just have the five fields and then we

8239
4:57:52,718 --> 4:57:55,360
have the command that we want to have it

8240
4:57:55,360 --> 4:57:57,520
execute at the time scheduled here so

8241
4:57:57,520 --> 4:57:59,040
what this what happens here is we have

8242
4:57:59,040 --> 4:58:01,680
echo and this text string and append it

8243
4:58:01,680 --> 4:58:04,560
to a file called homebob timetracker.log

8244
4:58:04,560 --> 4:58:06,400
every 10 minutes so every 10 minutes it

8245
4:58:06,400 --> 4:58:09,040
should add a line to our field so let's

8246
4:58:09,040 --> 4:58:11,120
see if this is actually running because

8247
4:58:11,120 --> 4:58:13,040
it's been here a while

8248
4:58:13,040 --> 4:58
let's quit here if we do ls we can see

8249
4:58 --> 4:58:18,560
oh there is a file time tracker.log and

8250
4:58:18,560 --> 4:58:20,080
if we look at it well sure enough it

8251
4:58:20,080 --> 4:58:21,840
looks like about a half hour has gone by

8252
4:58:21,840 --> 4:58:24,560
since i created that crontab entry and

8253
4:58:24,560 --> 4:58:26,958
it's been adding to this file if we do

8254
4:58:26,958 --> 4:58:29,040
ls minus l we can see the last time that

8255
4:58:29,040 --> 4:58:32,160
was touched was at 18 10. so if we

8256
4:58:32,160 --> 4:58:34,798
waited around until 1820 it would do the

8257
4:58:34,798 --> 4:58:36,878
same thing again it would add another

8258
4:58:36,878 --> 4:58:38,560
line to it so that's how you do a

8259
4:58:38,560 --> 4:58:41,360
recurring event using a personal crontab

8260
4:58:41,360 --> 4:58:42,878
now if you just have something you want

8261
4:58:42,878 --> 4:58:45,520
to have execute one time let's clear the

8262
4:58:45,520 --> 4:58:48,160
screen we can use the at daemon and

8263
4:58:48,160 --> 4:58:49,680
first i'm going to do something really

8264
4:58:49,680 --> 4:58:52,160
quickly so we'll say at and then can

8265
4:58:52,160 --> 4:58:54,638
specify the time and this is what's nice

8266
4:58:54,638 --> 4:58:57,920
it's very flexible we could say tomorrow

8267
4:58:57,920 --> 4:58:59,120
we could say

8268
4:58:59,120 --> 4:59:01,920
next week and it will interpret all of

8269
4:59:01,920 --> 4:59
those different commands it uses a lot

8270
4:59 --> 4:59:05,760
of fuzzy logic to figure out what you

8271
4:59:05,760 --> 4:59:09,760
want i'm going to say at now plus one

8272
4:59:09,760 --> 4:59
minute and then we're gonna get this at

8273
4:59 --> 4:59:14,638
prompt which now allows us to execute

8274
4:59:14,638 --> 4:59:17,680
something so i wanted to do echo

8275
4:59:17,680 --> 4:59:21,520
this was a one-off and i want to append

8276
4:59:21,520 --> 4:59:23,280
that to home

8277
4:59:23,280 --> 4:59:27,680
bob time tracker dot log press enter and

8278
4:59:27,680 --> 4:59:29,280
now we could do another thing we could

8279
4:59:29,280 --> 4:59:30,718
have like a whole list of things we

8280
4:59:30,718 --> 4:59:33,200
wanted to do at now plus one minute but

8281
4:59:33,200 --> 4:59:35,600
i'm just going to do control d

8282
4:59:35,600 --> 4:59:37,360
and that will put it in queue so it says

8283
4:59:37,360 --> 4:59:39,440
job4 is in queue and it's going to

8284
4:59:39,440 --> 4:59:42,958
execute at 18 13. okay now if we type

8285
4:59:42,958 --> 4:59:44,560
atq

8286
4:59:44,560 --> 4:59:47,360
oh it already happened dog on it

8287
4:59:47,360 --> 4:59:50,080
first of all let's look cat time tracker

8288
4:59:50,080 --> 4:59:51,760
look at that it did it right it put it

8289
4:59:51,760 --> 4:59:53,520
to the end of the file but i need to do

8290
4:59:53,520 --> 4:59:57,520
another one so at now plus one minute

8291
4:59:57,520 --> 5:00:01,040
again and i'm gonna say echo hello

8292
5:00:01,040 --> 5:00:02,160
into

8293
5:00:02,160 --> 5:00:05,840
home bob time tracker dot

8294
5:00:05,840 --> 5:00:07,120
control d

8295
5:00:07,120 --> 5:00:10,240
atq ah there we go okay did it in time

8296
5:00:10,240 --> 5:00:12,320
so what this shows us is the queue of

8297
5:00:12,320 --> 5:00:14,560
things that at is going to run so job

8298
5:00:14,560 --> 5:00:16,878
number five is scheduled for thursday

8299
5:00:16,878 --> 5:00:20,480
june 20th at 1814 and the user bob is

8300
5:00:20,480 --> 5:00:23,200
who's doing it so if we keep pressing at

8301
5:00:23,200 --> 5:00:23,920
q

8302
5:00:23,920 --> 5:00
once the time rolls around it's going to

8303
5:00 --> 5:00:27,760
execute that and then go away because

8304
5:00:27,760 --> 5:00:29,520
it's a one-off right we could do

8305
5:00:29,520 --> 5:00:32,320
multiple things we could say at tomorrow

8306
5:00:32,320 --> 5:00:33,760
then i want to say

8307
5:00:33,760 --> 5:00:34,798
echo

8308
5:00:34,798 --> 5:00:37,040
test tomorrow i spelled it wrong but

8309
5:00:37,040 --> 5:00:38,080
that's okay

8310
5:00:38,080 --> 5:00:42,240
on home bob time tracker.log control d

8311
5:00:42,240 --> 5:00:44,958
on a blank line now if we do at q we're

8312
5:00:44,958 --> 5:00:47,280
going to see well look job 5 executed

8313
5:00:47,280 --> 5:00:49,200
but job six is going to wait until

8314
5:00:49,200 --> 5:00:51,440
tomorrow and it does it the same time

8315
5:00:51,440 --> 5:00:53,920
tomorrow so 24 hours from now and

8316
5:00:53,920 --> 5:00:56,560
tomorrow at 18 14 it's going to do that

8317
5:00:56,560 --> 5:00:59,200
command test tomorrow okay now let's say

8318
5:00:59,200 --> 5:01:00,400
we don't want to do that we want to

8319
5:01:00,400 --> 5:01:02,480
change our mind well then we can say at

8320
5:01:02,480 --> 5:01:06,400
rm job six and now at q is going to say

8321
5:01:06,400 --> 5:01:08,560
there's no jobs because we've deleted

8322
5:01:08,560 --> 5:01:10,480
job number six that was going to execute

8323
5:01:10,480 --> 5:01:12,320
tomorrow but if we look at time tracker

8324
5:01:12,320 --> 5:01
look at that sure enough hello was put

8325
5:01 --> 5:01:15,680
there along with that this is the one

8326
5:01:15,680 --> 5:01:17,440
off and if we wait around until the next

8327
5:01:17,440 --> 5:01:19,600
10 minutes pass our cron job is going to

8328
5:01:19,600 --> 5:01:21,440
add another 10 minutes has passed on to

8329
5:01:21,440 --> 5:01:23,520
the end of this file and that's how we

8330
5:01:23,520 --> 5:01:25,680
can schedule things with crontab for a

8331
5:01:25,680 --> 5:01:28,080
repeating task like these or just a

8332
5:01:28,080 --> 5:01:30,320
one-off task like this by using the at

8333
5:01:30,320 --> 5:01:32,160
daemon it's great to be able to do

8334
5:01:32,160 --> 5:01:35,840
system-wide things using cron but i

8335
5:01:35,840 --> 5:01:37,920
personally like the fact that you can do

8336
5:01:37,920 --> 5:01:41,520
it as a personal end user using cron tab

8337
5:01:41,520 --> 5:01:44,400
minus e and it's going to do it just as

8338
5:01:44,400 --> 5:01
your user so you don't have to become

8339
5:01 --> 5:01:47,200
root or worry about escalating

8340
5:01:47,200 --> 5:01:49,440
privileges it's going to just execute it

8341
5:01:49,440 --> 5:01:51,600
as you even if you're logged out same

8342
5:01:51,600 --> 5:01:53,440
with the at daemon even if we're not

8343
5:01:53,440 --> 5:01:55,360
logged in it's still going to execute it

8344
5:01:55,360 --> 5:01:57,600
at the given time

8345
5:01:57,600 --> 5:02:00,080
working with multiple processes on linux

8346
5:02:00,080 --> 5:02:01,520
is really really easy because you can

8347
5:02:01,520 --> 5:02:02,798
put them in the foreground or the

8348
5:02:02,798 --> 5:02:04,400
background and interact with them

8349
5:02:04,400 --> 5:02:05,840
however you want now there are some

8350
5:02:05,840 --> 5:02:08,320
tools that may not seem intuitive at

8351
5:02:08,320 --> 5:02:10,160
first but once you get the hang of using

8352
5:02:10,160 --> 5:02:11,760
them they're really really easy and

8353
5:02:11,760 --> 5:02:13,120
there's also some keystrokes that we're

8354
5:02:13,120 --> 5:02:15,040
going to have to learn and a couple

8355
5:02:15,040 --> 5:02:16,560
tricks that will allow us to do things

8356
5:02:16,560 --> 5:02:18,560
that we normally couldn't do so let's go

8357
5:02:18,560 --> 5:02:20,160
right to the command line because this

8358
5:02:20,160 --> 5:02:21,280
is the kind of stuff you have to

8359
5:02:21,280 --> 5:02:23,760
experience in order to really understand

8360
5:02:23,760 --> 5:02:25,920
so first of all i am on the command line

8361
5:02:25,920 --> 5:02:27,680
and i'm going to show you how to put a

8362
5:02:27,680 --> 5:02:29,520
process in the background now i'm just

8363
5:02:29,520 --> 5:02:31,360
going to use a simple process called

8364
5:02:31,360 --> 5:02:32,718
sleep the sleep command if you're not

8365
5:02:32,718 --> 5:02:34,320
familiar with it it just pauses right so

8366
5:02:34,320 --> 5:02:36,240
if we say sleep one it's gonna sleep for

8367
5:02:36,240 --> 5:02:38,080
one second and then it's gonna be done

8368
5:02:38,080 --> 5:02:40,718
so i'm gonna say sleep for a whole bunch

8369
5:02:40,718 --> 5:02:42,080
of seconds which will like i don't know

8370
5:02:42,080 --> 5:02:43,200
that's probably a couple hours or

8371
5:02:43,200 --> 5:02:44,958
something and then i'm going to put the

8372
5:02:44,958 --> 5:02:46,878
ampersand after it

8373
5:02:46,878 --> 5:02:48,560
now what's going to happen is notice

8374
5:02:48,560 --> 5:02:51,520
it's done a number one and then this is

8375
5:02:51,520 --> 5:02:53,840
the actual process number so our job

8376
5:02:53,840 --> 5:02:55,360
number is one now we can do that with

8377
5:02:55,360 --> 5:02:58,160
another one sleep two two two two two

8378
5:02:58,160 --> 5:02:59,920
put that in the background and now we're

8379
5:02:59,920 --> 5:03:01,600
gonna see we have job number two in the

8380
5:03:01,600 --> 5:03:03,520
background with this process id and

8381
5:03:03,520 --> 5:03:04,878
they're just running in the background

8382
5:03:04,878 --> 5:03:07,040
if we type jobs we can see sure enough

8383
5:03:07,040 --> 5:03:08,560
there they are there's sleep one one one

8384
5:03:08,560 --> 5:03:10,320
there's sleep two two two job one and

8385
5:03:10,320 --> 5:03:13,200
job two now if we want to start going

8386
5:03:13,200 --> 5:03:14,798
and using one again like let's say we

8387
5:03:14,798 --> 5:03:16,560
wanna bring one in the foreground we

8388
5:03:16,560 --> 5:03:19,760
just type f g and then the job number so

8389
5:03:19,760 --> 5:03:21,920
fg two and it's going to bring us it

8390
5:03:21,920 --> 5:03:23,200
tells us what the command is that's

8391
5:03:23,200 --> 5:03:25,040
running and here we are we're just at

8392
5:03:25,040 --> 5:03:26,798
the command line here if we wanted to

8393
5:03:26,798 --> 5:03:28,798
stop this we'd have to do control c it

8394
5:03:28,798 --> 5:03:30,400
stopped that process and now if we do

8395
5:03:30,400 --> 5:03:32,638
jobs see there's only the one job

8396
5:03:32,638 --> 5:03:34,400
running it's actually really cool now

8397
5:03:34,400 --> 5:03:36,560
what if we did a job like we did

8398
5:03:36,560 --> 5:03:40,560
sleep 33333 and press enter and i'm like

8399
5:03:40,560 --> 5:03:42,480
oh man i really wish that was in the

8400
5:03:42,480 --> 5:03:44,160
background i didn't mean for it to just

8401
5:03:44,160 --> 5:03:46,560
like hold my command prompt here well

8402
5:03:46,560 --> 5:03:49,760
what we can do is do control z

8403
5:03:49,760 --> 5:03:51,600
and it stops it and puts it in the

8404
5:03:51,600 --> 5:03:53,200
background so see it says stop if we

8405
5:03:53,200 --> 5:03:55,760
type jobs we can see this first one that

8406
5:03:55,760 --> 5:03
we did is still running but this one is

8407
5:03 --> 5:04:00,480
stopped so if we want to make it run in

8408
5:04:00,480 --> 5:04:02,798
the background we have to say

8409
5:04:02,798 --> 5:04:05,920
b g for run in the background job number

8410
5:04:05,920 --> 5:04:06,798
two

8411
5:04:06,798 --> 5:04:08,718
and now if we do jobs we're gonna see

8412
5:04:08,718 --> 5:04:10,160
now they're both running in the

8413
5:04:10,160 --> 5:04:12,240
background so bg and then the job number

8414
5:04:12,240 --> 5:04:14,638
will start that background task running

8415
5:04:14,638 --> 5:04:16,480
fg will bring it out of the background

8416
5:04:16,480 --> 5:04:18,718
and bring it right to our interactive

8417
5:04:18,718 --> 5:04:20,560
terminal okay so that's kind of neat

8418
5:04:20,560 --> 5:04:22,160
it's a way we can create them we can put

8419
5:04:22,160 --> 5:04:24,160
them in the background if we've started

8420
5:04:24,160 --> 5:04:25,920
them and we don't and we want to put

8421
5:04:25,920 --> 5:04:27,840
them in the background just ctrl z will

8422
5:04:27,840 --> 5:04:30,638
suspend it briefly and then we can tell

8423
5:04:30,638 --> 5:04:32,798
it to go in the background by doing bg

8424
5:04:32,798 --> 5:04:34,320
and then the job

8425
5:04:34,320 --> 5:04:37,120
number so let's do foreground one i'm

8426
5:04:37,120 --> 5:04:38,718
going to do control c

8427
5:04:38,718 --> 5:04:41,920
foreground two control c and now jobs we

8428
5:04:41,920 --> 5:04:44,798
have no more jobs running now there is a

8429
5:04:44,798 --> 5:04:46,798
problem because if we have a job running

8430
5:04:46,798 --> 5:04:48,638
in the background like i have a command

8431
5:04:48,638 --> 5:04:50,718
here called my hello all right and all

8432
5:04:50,718 --> 5:04:53,120
it does is every two seconds it prints

8433
5:04:53,120 --> 5:04:54,958
hello on the screen

8434
5:04:54,958 --> 5:04:57,360
all right so i'm gonna control c what if

8435
5:04:57,360 --> 5:04:59,760
i wanted to put my hello

8436
5:04:59,760 --> 5:05:01,440
in the background and it's going to run

8437
5:05:01,440 --> 5:05:02,480
in the background i was still going to

8438
5:05:02,480 --> 5:05:04,240
put it out on the screen every hello but

8439
5:05:04,240 --> 5:05:06,240
it's running in the background if we do

8440
5:05:06,240 --> 5:05:07,760
exit it's still running in the

8441
5:05:07,760 --> 5:05:09,760
background but the problem comes where

8442
5:05:09,760 --> 5:05
if we log out

8443
5:05 --> 5:05:14,638
and then we log back in

8444
5:05:14,638 --> 5:05:16,878
we open a terminal window

8445
5:05:16,878 --> 5:05:21,360
and we do a ps aux grip for my hello

8446
5:05:21,360 --> 5:05:23,200
we're gonna see it's no longer running

8447
5:05:23,200 --> 5:05:24,798
this is just actually the grep process

8448
5:05:24,798 --> 5:05:26,560
that it actually found here but notice

8449
5:05:26,560 --> 5:05:28,400
it's not running in the background

8450
5:05:28,400 --> 5:05:30,718
anymore and if we wanted it to stay

8451
5:05:30,718 --> 5:05:32,080
running just putting it in the

8452
5:05:32,080 --> 5:05:33,440
background wouldn't work we'd have to

8453
5:05:33,440 --> 5:05
use a program called no hup because

8454
5:05 --> 5:05:38,080
here's the problem when we log out of

8455
5:05:38,080 --> 5:05:40,320
the system up here it actually sends a

8456
5:05:40,320 --> 5:05:42,320
hang up interrupt to all the running

8457
5:05:42,320 --> 5:05
processes and the hang up or hup

8458
5:05 --> 5:05:48,080
tells it to stop running well we can run

8459
5:05:48,080 --> 5:05:51,120
a program by saying no hup which means

8460
5:05:51,120 --> 5:05:53,520
don't hang up when the user logs out

8461
5:05:53,520 --> 5:05:56,878
what program we want to run so my hello

8462
5:05:56,878 --> 5:05:58,958
and then ampersand in the background

8463
5:05:58,958 --> 5:06:00,240
it's going to put it in the background

8464
5:06:00,240 --> 5:06:02,718
just like before we can see it jobs

8465
5:06:02,718 --> 5:06:04,480
there it is running but it says it's

8466
5:06:04,480 --> 5:06:05,920
ignoring the input and appending the

8467
5:06:05,920 --> 5:06:08,958
output to nohup dot out alright so i'm

8468
5:06:08,958 --> 5:06:11,520
going to exit i'm going to log out and

8469
5:06:11,520 --> 5:06:14,958
then i'm going to log back in

8470
5:06:14,958 --> 5:06:17,040
open up a terminal window

8471
5:06:17,040 --> 5:06:18,958
i want to notice two things one if we do

8472
5:06:18,958 --> 5:06:22,638
a ps minus aux grip for my hello it's

8473
5:06:22,638 --> 5:06:24,080
still going to be running see here it is

8474
5:06:24,080 --> 5:06:26,160
it's still running because we ran it

8475
5:06:26,160 --> 5:06:28,400
with no hup but here's another cool

8476
5:06:28,400 --> 5:06:30,878
thing if we do an ls see this nohup dot

8477
5:06:30,878 --> 5:06:32,798
out let's look at that

8478
5:06:32,798 --> 5:06
all of the output was put into that file

8479
5:06 --> 5:06:37,920
so all of the hellos were put into that

8480
5:06:37,920 --> 5:06
file so we know what's going on plus

8481
5:06 --> 5:06:41,680
when we logged out it didn't stop

8482
5:06:41,680 --> 5:06:43,680
running so not only is it really easy to

8483
5:06:43,680 --> 5:06:45,200
handle processes when you're on the

8484
5:06:45,200 --> 5:06:47,520
linux command line it's also possible to

8485
5:06:47,520 --> 5:06:49,840
do a couple cool things like no hup if

8486
5:06:49,840 --> 5:06:51,120
you want to make sure it doesn't quit

8487
5:06:51,120 --> 5:06:54,080
when you log out and also control z

8488
5:06:54,080 --> 5:06:55,680
of a running process which will put in

8489
5:06:55,680 --> 5:06:57,200
the background suspended and then you

8490
5:06:57,200 --> 5:06:58,958
can run bg to make sure that it

8491
5:06:58,958 --> 5:07:02,400
continues executing in the background

8492
5:07:02,400 --> 5:07:04,878
finding specific information about local

8493
5:07:04,878 --> 5:07:06,718
devices on your system can be a little

8494
5:07:06,718 --> 5:07:08,160
bit challenging but thankfully there's a

8495
5:07:08,160 --> 5:07:09,600
bunch of tools that will help us along

8496
5:07:09,600 --> 5:07
the way d message is one that we can use

8497
5:07 --> 5:07:13,520
that will kind of see how things are

8498
5:07:13,520 --> 5:07:15,360
going in real time if you plug something

8499
5:07:15,360 --> 5:07:17,440
in d message is going to show you the

8500
5:07:17,440 --> 5:07:19,120
results of plugging that in but then

8501
5:07:19,120 --> 5:07:21,440
there's a whole suite of ls tools if you

8502
5:07:21,440 --> 5:07:25,040
will they start with ls it's ls usb

8503
5:07:25,040 --> 5:07:30,560
lspci lsdev msblk ls cpu all of these

8504
5:07:30,560 --> 5:07:33,040
tools are going to be able to be used to

8505
5:07:33,040 --> 5:07:35,040
find out information about hardware on

8506
5:07:35,040 --> 5:07:36,958
our system and there's a nice trick to

8507
5:07:36,958 --> 5:07:38,480
remember these so that you don't have to

8508
5:07:38,480 --> 5:07:41,360
actually remember pci dev blk cpu all of

8509
5:07:41,360 --> 5:07:42,560
these different things so let's check

8510
5:07:42,560 --> 5:07:44,878
that out and see if we can find the

8511
5:07:44,878 --> 5:07:46,958
various hardware that is in our system

8512
5:07:46,958 --> 5:07:48,958
you have to be root to use most of these

8513
5:07:48,958 --> 5:07:50,878
some of these you can use as an end user

8514
5:07:50,878 --> 5:07:52,400
but since we're going to be looking at

8515
5:07:52,400 --> 5:07
all of them i became root just so that

8516
5:07 --> 5:07:56,240
we get a better view of what's going on

8517
5:07:56,240 --> 5:07:58,638
now first of all d message you just type

8518
5:07:58,638 --> 5:08:00,240
d message on the command line and it's

8519
5:08:00,240 --> 5:08:02,958
going to show you things as they happen

8520
5:08:02,958 --> 5:08:05,280
and this is the location that we'll see

8521
5:08:05,280 --> 5:08:07,520
things happen if we make changes to the

8522
5:08:07,520 --> 5:08:10,080
system like if we plug in a usb drive or

8523
5:08:10,080 --> 5:08:11,600
plug in a sata drive or something like

8524
5:08:11,600 --> 5:08:13,360
that a new mouse it's going to show up

8525
5:08:13,360 --> 5:08:14,320
here and it's going to give us

8526
5:08:14,320 --> 5:08:16,718
information about the particular device

8527
5:08:16,718 --> 5:08:18,798
but if something's already plugged in or

8528
5:08:18,798 --> 5:08:20,400
you just want to see like what's built

8529
5:08:20,400 --> 5:08:22,400
into the system that's where the ls

8530
5:08:22,400 --> 5:08:24,638
tools come into play so let's clear the

8531
5:08:24,638 --> 5:08:25,520
screen

8532
5:08:25,520 --> 5:08:27,840
and what i like to do is just do ls and

8533
5:08:27,840 --> 5:08:30,320
then hit tab a couple times and that's

8534
5:08:30,320 --> 5:08:32,480
the trick because really tab completion

8535
5:08:32,480 --> 5:08:34,718
is vital here there are so many of these

8536
5:08:34,718 --> 5:08:37,440
commands now we know ls just means list

8537
5:08:37,440 --> 5:08:39,840
like the file directory but they've used

8538
5:08:39,840 --> 5:08:42,718
this same tool or the same keystrokes to

8539
5:08:42,718 --> 5:08:46,560
prefix a bunch of commands like ls blk

8540
5:08:46,560 --> 5:08:48,638
for example which will show us the block

8541
5:08:48,638 --> 5:08:52,480
devices it will list the block devices

8542
5:08:52,480 --> 5:08:54,400
on our system if we do that it's going

8543
5:08:54,400 --> 5:08:56,560
to show us all the block devices that we

8544
5:08:56,560 --> 5:08:58,798
have like the floppy drive all of these

8545
5:08:58,798 --> 5:09:00,638
are virtual loopback devices that were

8546
5:09:00,638 --> 5:09:02,798
created down here these are our actual

8547
5:09:02,798 --> 5:09:04,958
drives on our system sda we can see

8548
5:09:04,958 --> 5:09:06,958
right here it's mounted on forward slash

8549
5:09:06,958 --> 5:09:09,360
sda1 is then we have a bunch of other

8550
5:09:09,360 --> 5:09:11,440
drives down here that aren't being used

8551
5:09:11,440 --> 5:09:12,798
right now but they're all 10 gigabytes

8552
5:09:12,798 --> 5:09:15,120
in size we used those and we set up raid

8553
5:09:15,120 --> 5:09:17,360
before but this shows us all of the

8554
5:09:17,360 --> 5:09:19,920
block devices so if we do ls and hit tab

8555
5:09:19,920 --> 5:09:21,520
a couple times again let's look at the

8556
5:09:21,520 --> 5:09:25,280
next one we have ls block we have ls cpu

8557
5:09:25,280 --> 5:09:26,878
now i actually really like this one

8558
5:09:26,878 --> 5:09:28,560
because it will give you all of the

8559
5:09:28,560 --> 5:09:31,600
information about the cpu in the system

8560
5:09:31,600 --> 5:09:33,520
so we can here we can see here that it's

8561
5:09:33,520 --> 5:09:37,040
a 64-bit processor little endian it's an

8562
5:09:37,040 --> 5:09:38,240
intel

8563
5:09:38,240 --> 5:09:40,160
it actually shows us the actual

8564
5:09:40,160 --> 5:09:42,638
processor itself the model number it

8565
5:09:42,638 --> 5:09:44,958
shows us the clock speed all sorts of

8566
5:09:44,958 --> 5:09:47,280
stuff that we have vtx enabled so we can

8567
5:09:47,280 --> 5:09:50,160
do virtualization and it shows us all of

8568
5:09:50,160 --> 5:09:52,958
the awesome things that our cpu has

8569
5:09:52,958 --> 5:09:55,040
including all the flags that it supports

8570
5:09:55,040 --> 5:09:56,638
when we're compiling things anyway

8571
5:09:56,638 --> 5:09:59,120
that's ls cpu if we hit ls and tab a

8572
5:09:59,120 --> 5:10:00,798
couple times again i'm going to do this

8573
5:10:00,798 --> 5:10:02,160
every time because it's the quickest way

8574
5:10:02,160 --> 5:10:04,560
to see what's there we have lsdev i want

8575
5:10:04,560 --> 5:10:06,080
to do this you have to be root to do

8576
5:10:06,080 --> 5:10:08,638
this and what this shows us this might

8577
5:10:08,638 --> 5:10:10,320
not be as useful as it was years and

8578
5:10:10,320 --> 5:10:11,360
years ago and we would have to

8579
5:10:11,360 --> 5:10:13,760
troubleshoot hardware more frequently

8580
5:10:13,760 --> 5:10
but what this is going to show us is the

8581
5:10 --> 5:10:17,920
the device like what device it is like

8582
5:10:17,920 --> 5:10:20,240
our floppy disk our keyboard a pci port

8583
5:10:20,240 --> 5:10:22,240
here and it's going to show us what

8584
5:10:22,240 --> 5:10:24,240
direct memory access number it uses what

8585
5:10:24,240 --> 5:10
dma what irq number it's using uh the io

8586
5:10 --> 5:10:30,320
ports meaning like in memory what io

8587
5:10:30,320 --> 5:10:32,240
parts of memory or what parts of memory

8588
5:10:32,240 --> 5:10:34,240
is it using for i o and it will show us

8589
5:10:34,240 --> 5:10:35,440
all these things now if we're trying to

8590
5:10:35,440 --> 5:10:37,440
find conflicts on our system this might

8591
5:10:37,440 --> 5:10:39,760
be useful but i'll be honest i've never

8592
5:10:39,760 --> 5:10:41,680
once had to use this in practice it's

8593
5:10:41,680 --> 5:10:43,280
important to know that it's there though

8594
5:10:43,280 --> 5:10:45,520
ls dev will show you all the devices on

8595
5:10:45,520 --> 5:10:48,480
the system now if you do ls tab tab

8596
5:10:48,480 --> 5:10:50,798
one that i actually do use fairly often

8597
5:10:50,798 --> 5:10:51,480
is

8598
5:10:51,480 --> 5:10:55,200
lspci where is that up here lspci so oh

8599
5:10:55,200 --> 5:10:57,920
pci will show us all the pci devices so

8600
5:10:57,920 --> 5:11:00,240
here we have a vga compatible controller

8601
5:11:00,240 --> 5:11:02,638
this is the acpi controller the ide

8602
5:11:02,638 --> 5:11
controller

8603
5:11 --> 5:11:06,560
so these are the pci devices that are

8604
5:11:06,560 --> 5:11:10,160
plugged into our system uh we can do ls

8605
5:11:10,160 --> 5:11:12,400
usb now i don't have anything plugged

8606
5:11:12,400 --> 5:11:15,200
into our usb ports but if we did ls usb

8607
5:11:15,200 --> 5:11:17,440
would would show us what's there same

8608
5:11:17,440 --> 5:11:18,520
thing ls

8609
5:11:18,520 --> 5:11:20,958
pcmcia if you're a laptop user you might

8610
5:11:20,958 --> 5:11:22,480
have things that show up if you type

8611
5:11:22,480 --> 5:11:24,160
that and one last one we'll look at is

8612
5:11:24,160 --> 5:11:26,718
ls mem and this will just give us the

8613
5:11:26,718 --> 5:11:28,480
range of the memory and how it's being

8614
5:11:28,480 --> 5:11:30,560
used and where it is in our system but

8615
5:11:30,560 --> 5:11:32,480
really the big big pull away from this

8616
5:11:32,480 --> 5:11:35,120
is ls tab tab and it'll show you all of

8617
5:11:35,120 --> 5:11:37,040
the different ways that you can look at

8618
5:11:37,040 --> 5:11:39,040
the devices on your system so whether

8619
5:11:39,040 --> 5:11:40,480
you're trying to get an inventory of the

8620
5:11:40,480 --> 5:11
things that are currently on your system

8621
5:11 --> 5:11:43,760
or you want to see changes as they

8622
5:11:43,760 --> 5:11:45,520
happen in real time there's some really

8623
5:11:45,520 --> 5:11:48,240
simple built-in tools on our local linux

8624
5:11:48,240 --> 5:11:50,240
machine for detecting and looking at

8625
5:11:50,240 --> 5:11:52,878
specifics on devices

8626
5:11:52,878 --> 5:11:54,718
you ever try to solve a problem only to

8627
5:11:54,718 --> 5:11:57,520
make it worse yeah me too for example

8628
5:11:57,520 --> 5:12:00,080
we had a wall with a nail in the wall

8629
5:12:00,080 --> 5:12:02,080
and that nail would get loose after

8630
5:12:02,080 --> 5:12:03,680
hanging stuff on the nail for a long

8631
5:12:03,680 --> 5:12:05,440
time because it was just in the thin

8632
5:12:05,440 --> 5:12:07,440
layer of drywall this nail just went in

8633
5:12:07,440 --> 5:12:09,120
the drywall and then the more we hung

8634
5:12:09,120 --> 5:12:10,878
stuff on it the more it got loose so i

8635
5:12:10,878 --> 5:12:12,480
thought i would make things better by

8636
5:12:12,480 --> 5:12:14,718
getting rid of the nail drilling a hole

8637
5:12:14,718 --> 5:12:16,560
in the drywall and then getting one of

8638
5:12:16,560 --> 5:12:19,040
those really nice hollow wall anchors

8639
5:12:19,040 --> 5:12:20,320
that you could then put a nail or a

8640
5:12:20,320 --> 5:12:22,080
screw into and it would be really nice

8641
5:12:22,080 --> 5:12
and sturdy the problem is i drilled the

8642
5:12 --> 5:12:26,638
hole way too big the hollow wall anchor

8643
5:12:26,638 --> 5:12:27,840
didn't work at all and then i just had

8644
5:12:27,840 --> 5:12:29,760
this gigantic hole in the wall that my

8645
5:12:29,760 --> 5:12:32,160
wife was really upset about that's kind

8646
5:12:32,160 --> 5:12
of what happened in the world of linux

8647
5:12 --> 5:12:36,400
virtual file systems and let me tell you

8648
5:12:36,400 --> 5:12
what i'm talking about here because the

8649
5:12 --> 5:12:39,680
idea of virtual file systems has been

8650
5:12:39,680 --> 5:12:41,680
around since the unix days basically

8651
5:12:41,680 --> 5:12:43,360
it's a file system that's created when

8652
5:12:43,360 --> 5:12:45,280
the system boots up and one of the

8653
5:12:45,280 --> 5:12:47,520
really popular ones is called proc and

8654
5:12:47,520 --> 5:12:49,680
what this was used for is process

8655
5:12:49,680 --> 5:12:51,760
information like of running apps and

8656
5:12:51,760 --> 5:12:53,280
running programs on the system they

8657
5:12:53,280 --> 5:12:55,040
would store all of their runtime

8658
5:12:55,040 --> 5:12:56,878
information in this virtual folder in

8659
5:12:56,878 --> 5:12:59,200
memory called proc and then people said

8660
5:12:59,200 --> 5:13:00,798
hey that's a really neat place to store

8661
5:13:00,798 --> 5:13:03,600
things like process id number 181 for

8662
5:13:03,600 --> 5:13:06,560
that application and 2 5 5 6 for that

8663
5:13:06,560 --> 5:13:08,480
application what if we also put things

8664
5:13:08,480 --> 5:13:10,878
about like the cpu in there or the

8665
5:13:10,878 --> 5:13:12,638
network card in there and then people

8666
5:13:12,638 --> 5:13:14,958
started adding things to the proc folder

8667
5:13:14,958 --> 5:13:17,040
it started to get a little bit confusing

8668
5:13:17,040 --> 5:13:19,120
and so we thought hey wouldn't it be a

8669
5:13:19,120 --> 5:13:21,920
great idea if we separated all of that

8670
5:13:21,920 --> 5:13:24,320
kernel information so that process

8671
5:13:24,320 --> 5:13:25,840
information was stored in the proc

8672
5:13:25,840 --> 5:13:28,798
folder and kernel information was stored

8673
5:13:28,798 --> 5:13:31,280
in assist folder they're both virtual

8674
5:13:31,280 --> 5:13:33,200
file systems that work the same way but

8675
5:13:33,200 --> 5:13:35,280
some organizations seem to make a lot of

8676
5:13:35,280 --> 5:13:37,680
sense right now the same thing with dev

8677
5:13:37,680 --> 5:13:38,958
dev is a folder that we thought why

8678
5:13:38,958 --> 5:13:40,400
don't we start putting things like

8679
5:13:40,400 --> 5:13:42,958
information on different devices like

8680
5:13:42,958 --> 5:13:47,040
hard drives or mouses mice mouse mice

8681
5:13:47,040 --> 5:13:49,440
mouses anyway when we put those things

8682
5:13:49,440 --> 5:13:51,120
into the dev folder

8683
5:13:51,120 --> 5:13:53,680
oh here's the issue the proc folder had

8684
5:13:53,680 --> 5:13:55,280
been around for a long time and it

8685
5:13:55,280 --> 5:13:58,240
already had a mix of things in it so we

8686
5:13:58,240 --> 5:14:00,160
said okay we'll keep all of those things

8687
5:14:00,160 --> 5:14:01,680
and then we'll just put new things in

8688
5:14:01,680 --> 5:14:03,600
the sys folder the problem is there's

8689
5:14:03,600 --> 5:14:05,280
not that many new things so while the

8690
5:14:05,280 --> 5:14:08,240
sys folder is very well maintained and

8691
5:14:08,240 --> 5:14:10,080
very neat and organized it doesn't

8692
5:14:10,080 --> 5:14:11,760
contain a lot of the things that we use

8693
5:14:11,760 --> 5:14:13,360
on a daily basis because they were

8694
5:14:13,360 --> 5:14:15,280
already in the proc file system and now

8695
5:14:15,280 --> 5:14:16,240
they're there for backwards

8696
5:14:16,240 --> 5:14:17,840
compatibility

8697
5:14:17,840 --> 5:14:19,760
now that doesn't mean proc and sys are

8698
5:14:19,760 --> 5:14:22,480
any less useful if we go into the proc

8699
5:14:22,480 --> 5:14:24,160
folder and do an ls we're going to see

8700
5:14:24,160 --> 5:14:25,760
here are all of those numbers these are

8701
5:14:25,760 --> 5:14:27,520
the process ids that i talked about

8702
5:14:27,520 --> 5:14:30,160
right and if we do like an ls of oh the

8703
5:14:30,160 --> 5:14:32,718
process id 47 inside here it's going to

8704
5:14:32,718 --> 5:14:35,040
be all of the various things that this

8705
5:14:35,040 --> 5:14:36,718
particular application is doing like

8706
5:14:36,718 --> 5:14:39,840
it's it's memory io what's mounted uh

8707
5:14:39,840 --> 5:14:41,760
the status all of the things about this

8708
5:14:41,760 --> 5:14:43,360
running thing are in here so if you want

8709
5:14:43,360 --> 5:14:45,680
to find out information about whatever

8710
5:14:45,680 --> 5:14:48,240
process id number 47 is you can look at

8711
5:14:48,240 --> 5:14:50,320
these various things but notice over

8712
5:14:50,320 --> 5:14:52,560
here on the right hand side there's also

8713
5:14:52,560 --> 5:14:54,160
a bunch of things that aren't process

8714
5:14:54,160 --> 5:14
ids and that's where like mdstad meminfo

8715
5:14 --> 5:15:00,240
cpu info let's look at that so if we

8716
5:15:00,240 --> 5:15:02,798
look at cpu info this is going to just

8717
5:15:02,798 --> 5:15:05,680
be a complete breakdown of the cpu in

8718
5:15:05,680 --> 5:15:07,840
the system right now that's running this

8719
5:15:07,840 --> 5:15:09,440
is our current cpu which is really

8720
5:15:09,440 --> 5:15:11,360
useful information but it might make

8721
5:15:11,360 --> 5:15:13,760
more sense if it was over here in the

8722
5:15:13,760 --> 5:15:15,920
sys folder because the sys folder is

8723
5:15:15,920 --> 5:15:17,760
very well laid out right there's not a

8724
5:15:17,760 --> 5:15:19,600
whole bunch of crud here this is laid

8725
5:15:19,600 --> 5:15:21,520
out in very nice sections we could go

8726
5:15:21,520 --> 5:15:24,160
into oh let's say the kernel folder and

8727
5:15:24,160 --> 5:15:26,240
inside the kernel folder it's separated

8728
5:15:26,240 --> 5:15
into various things about the kernel

8729
5:15 --> 5:15:30,080
like the current configuration

8730
5:15:30,080 --> 5:15:31,520
all of these things are nice and

8731
5:15:31,520 --> 5:15:34,718
organized but it's not all inclusive

8732
5:15:34,718 --> 5:15:36,320
meaning it doesn't contain a lot of the

8733
5:15:36,320 --> 5:15:38,878
information if we scroll up that's still

8734
5:15:38,878 --> 5:15:41,200
stored in the proc folder so here's how

8735
5:15:41,200 --> 5:15:42,878
it ends up working a lot of the

8736
5:15:42,878 --> 5:15:44,400
interactive stuff is going to be in the

8737
5:15:44,400 --> 5:15
proc folder because it's always been

8738
5:15 --> 5:15:48,160
there but a lot of the information about

8739
5:15:48,160 --> 5:15:50,320
the running kernel is very organized

8740
5:15:50,320 --> 5:15:52,560
well in the sys folder and that's where

8741
5:15:52,560 --> 5:15:54,480
a lot of times programs will look if

8742
5:15:54,480 --> 5:15:55,920
they want information about the current

8743
5:15:55,920 --> 5:15:57,920
running kernel like do i work on this

8744
5:15:57,920 --> 5:15:59,760
program well i don't know let's see you

8745
5:15:59,760 --> 5:16:01,840
know information about hypervisor and

8746
5:16:01,840 --> 5:16
kernel modules and all of those things

8747
5:16 --> 5:16:05,760
it'll look in the cis folder so

8748
5:16:05,760 --> 5:16:07,520
generally you'll find yourself in the

8749
5:16:07,520 --> 5:16:10,080
proc folder more often all right now one

8750
5:16:10,080 --> 5:16:12,080
other place that is worth looking in is

8751
5:16:12,080 --> 5:16:14,400
the dev folder and this just shows about

8752
5:16:14,400 --> 5:16:16,958
system devices right these are hardware

8753
5:16:16,958 --> 5:16:18,878
devices that are plugged into the system

8754
5:16:18,878 --> 5:16:20,160
either like soldered in like the

8755
5:16:20,160 --> 5:16:22,480
real-time clock or hardware like hard

8756
5:16:22,480 --> 5:16:24,160
drives that we put in here and this is

8757
5:16:24,160 --> 5:16:25,920
going to be information binary

8758
5:16:25,920 --> 5:16:27,760
information generally available to the

8759
5:16:27,760 --> 5:16:30,320
system talking about the various bits of

8760
5:16:30,320 --> 5:16:32,240
hardware that are plugged in now this is

8761
5:16:32,240 --> 5:16:34,240
fairly well organized too and a lot of

8762
5:16:34,240 --> 5:16:36,240
times programs will look here to find

8763
5:16:36,240 --> 5:16:38,160
out information like hey is there

8764
5:16:38,160 --> 5:16:39,840
hardware that is going to be compatible

8765
5:16:39,840 --> 5:16:41,440
with my software well this is where it

8766
5:16:41,440 --> 5:16
would look for hardware information so

8767
5:16 --> 5:16:45,680
while it sounds like it's a big mess

8768
5:16:45,680 --> 5:16:47,680
honestly it's not that bad there's three

8769
5:16:47,680 --> 5:16:50,160
main places to look the proc folder

8770
5:16:50,160 --> 5:16:52,480
which is what we see here the sys folder

8771
5:16:52,480 --> 5:16:55,040
which we see here and then the dev

8772
5:16:55,040 --> 5:16:57,120
folder which we see here all of them

8773
5:16:57,120 --> 5:16:59,680
contain different information sys and

8774
5:16:59,680 --> 5:17:01,840
proc have a little bit of crossover

8775
5:17:01,840 --> 5:17:03,600
there's going to be some kernel

8776
5:17:03,600 --> 5:17:05,840
information insist that's already living

8777
5:17:05,840 --> 5:17:07,920
in the proc file system but if you're

8778
5:17:07,920 --> 5:17:09,200
going to be interacting it's mostly

8779
5:17:09,200 --> 5:17:11,200
going to be in the proc file system and

8780
5:17:11,200 --> 5:17:12,798
applications are going to be hitting the

8781
5:17:12,798 --> 5:17:15,200
sys file system pretty hard now i know

8782
5:17:15,200 --> 5:17:17,520
that's a lot of information about linux

8783
5:17:17,520 --> 5:17
virtual file systems the key takeaways

8784
5:17 --> 5:17:21,760
are that we need to know information

8785
5:17:21,760 --> 5:17:23,600
about the running kernel are going to be

8786
5:17:23,600 --> 5:17:25,520
in generally one of three places in the

8787
5:17:25,520 --> 5:17:27,280
virtual file system that happens when

8788
5:17:27,280 --> 5:17:29,200
the computer boots up the proc file

8789
5:17:29,200 --> 5:17:31,680
system the sys file system and the dev

8790
5:17:31,680 --> 5:17:33,680
file system if you can look in all three

8791
5:17:33,680 --> 5:17:35,200
of those places you're going to find

8792
5:17:35,200 --> 5:17:37,200
what you're looking for but they might

8793
5:17:37,200 --> 5:17:38,878
be spread out in places that don't make

8794
5:17:38,878 --> 5:17:40,798
a whole lot of sense just because we

8795
5:17:40,798 --> 5:17:42,320
keep things there for backwards

8796
5:17:42,320 --> 5:17:44,080
compatibility i hope this has been

8797
5:17:44,080 --> 5:17:45,520
informative for you and i'd like to

8798
5:17:45,520 --> 5:17:47,680
thank you for viewing on a linux system

8799
5:17:47,680 --> 5:17:49,440
the printing is going to be handled by

8800
5:17:49,440 --> 5:17:52,480
cups which is common unix printing

8801
5:17:52,480 --> 5:17:54,080
system which interestingly is actually

8802
5:17:54,080 --> 5:17:55,920
owned by apple of all people but

8803
5:17:55,920 --> 5:17:57,920
nonetheless this is what every modern

8804
5:17:57,920 --> 5:17:59,600
linux distribution is going to use to

8805
5:17:59,600 --> 5:18:01,440
handle the printing now the nice thing

8806
5:18:01,440 --> 5:18:02,718
is there are some backwards

8807
5:18:02,718 --> 5:18:04,958
compatibility command line tools so we

8808
5:18:04,958 --> 5:18:07,280
can print things from the command line

8809
5:18:07,280 --> 5:18:09,440
and if you don't have a gui to actually

8810
5:18:09,440 --> 5:18:11,200
install the printer like if you don't

8811
5:18:11,200 --> 5:18:13,360
have gnome or kde or anything like that

8812
5:18:13,360 --> 5:18:15,520
installed you can use a really nice web

8813
5:18:15,520 --> 5:18:16,958
interface that will allow you to

8814
5:18:16,958 --> 5:18:19,440
interact with the cup system and install

8815
5:18:19,440 --> 5:18:21,360
modify and do all the things you need to

8816
5:18:21,360 --> 5:18:23,280
do to a printer but we're going to look

8817
5:18:23,280 --> 5:18:25,120
at the web interface really quickly just

8818
5:18:25,120 --> 5:18:26,320
to show you where it is and i want to

8819
5:18:26,320 --> 5:18:27,840
show you how to use the command line

8820
5:18:27,840 --> 5:18:30,080
tools so you can print from a command

8821
5:18:30,080 --> 5:18:31,760
line system even if it's a headless

8822
5:18:31,760 --> 5:18:34,480
system on a rack now i'm logged in here

8823
5:18:34,480 --> 5:18:36,878
on my local ubuntu computer on my local

8824
5:18:36,878 --> 5:18:38,798
network and you'll see up here i went to

8825
5:18:38,798 --> 5:18:42,320
localhost port 631

8826
5:18:42,320 --> 5:18
now that's important because cups

8827
5:18 --> 5:18:46,160
listens for incoming connections on port

8828
5:18:46,160 --> 5:18:48,718
631 and if you go there it'll allow you

8829
5:18:48,718 --> 5:18:50,480
to log in so you can do things like

8830
5:18:50,480 --> 5:18:52,958
administration for example we are here

8831
5:18:52,958 --> 5:18:54,878
and i have one printer installed we can

8832
5:18:54,878 --> 5:18:57,040
click on it'll give us information about

8833
5:18:57,040 --> 5:18:59,200
this particular printer called office

8834
5:18:59,200 --> 5:19:01,440
underscore laser we can see it's a

8835
5:19:01,440 --> 5:19:03,680
socket-based connection on this ip

8836
5:19:03,680 --> 5:19:06,480
address on port 9100 and basically it's

8837
5:19:06,480 --> 5:19:08,480
installed on the computer i actually

8838
5:19:08,480 --> 5:19:10,400
installed it using the web interface

8839
5:19:10,400 --> 5:19:12,560
instead of going into the gui on this

8840
5:19:12,560 --> 5:19:14,400
computer and installing it with the

8841
5:19:14,400 --> 5:19:16,320
ubuntu tools i used the web-based

8842
5:19:16,320 --> 5:19:18,320
interface to make sure that it would be

8843
5:19:18,320 --> 5:19:20,240
able to install correctly and it did

8844
5:19:20,240 --> 5:19:21,920
once we're here we can actually do

8845
5:19:21,920 --> 5:19:24,240
things you know from firefox like print

8846
5:19:24,240 --> 5:19:26,160
the page but if we're on the command

8847
5:19:26,160 --> 5:19
line things are a little bit different

8848
5:19 --> 5:19:29,920
there are a couple tools that start with

8849
5:19:29,920 --> 5:19:32,480
l p and if we hit lp and then hit tab a

8850
5:19:32,480 --> 5:19:34,798
couple times for tab autocomplete we're

8851
5:19:34,798 --> 5:19:36,320
going to see some of those here now

8852
5:19:36,320 --> 5:19:37,840
they're not all things we're going to

8853
5:19:37,840 --> 5:19:41,520
look at right now but mainly lpr

8854
5:19:41,520 --> 5:19:44,160
is going to send commands to the printer

8855
5:19:44,160 --> 5:19:46,718
lpq is going to show us the queue of

8856
5:19:46,718 --> 5:19:48,240
things waiting to be printed so if we

8857
5:19:48,240 --> 5:19:50,638
type lpq we're going to see office laser

8858
5:19:50,638 --> 5:19
is our default printer it says it's

8859
5:19 --> 5:19:53,520
ready but there are no entries meaning

8860
5:19:53,520 --> 5:19:55,520
there's nothing that's currently being

8861
5:19:55,520 --> 5:19:58,560
printed now we can use lpr to print

8862
5:19:58,560 --> 5:20:00,480
things in a couple different ways we

8863
5:20:00,480 --> 5:20:03,600
could actually just say echo this

8864
5:20:03,600 --> 5:20:07,440
is a test and we can pipe that into the

8865
5:20:07,440 --> 5:20:10,480
lpr command and if we look over here on

8866
5:20:10,480 --> 5:20:12,798
my printer it's going to print this page

8867
5:20:12,798 --> 5:20:17,280
right out

8868
5:20:17,280 --> 5:20:19,520
and we can see sure enough it says this

8869
5:20:19,520 --> 5:20:22,320
is a test so it'll do text just like

8870
5:20:22,320 --> 5:20:24,160
that now we don't have to do line by

8871
5:20:24,160 --> 5:20:26,638
line we can also do something like in my

8872
5:20:26,638 --> 5:20:28,718
folder here i have a full file called my

8873
5:20:28,718 --> 5:20:31,120
document so if we look at my document

8874
5:20:31,120 --> 5:20:33,520
you can see it's just a string of text

8875
5:20:33,520 --> 5:20:35,200
things and we can say

8876
5:20:35,200 --> 5:20:38,400
lpr and then the name of the text file

8877
5:20:38,400 --> 5:20:40,400
my document we'll print that and as it

8878
5:20:40,400 --> 5:20:43,440
prints out on the page if we look at lpq

8879
5:20:43,440 --> 5:20:45,200
we're going to see we have a job right

8880
5:20:45,200 --> 5:20:47,280
here job number 10 is that we could use

8881
5:20:47,280 --> 5:20:49,280
lprm if we're quick enough and get rid

8882
5:20:49,280 --> 5:20:51,520
of job10 oh it's already completed but

8883
5:20:51,520 --> 5:20:53,600
that is how we would delete a job that

8884
5:20:53,600 --> 5:20:54,878
we had already sent so if there's a

8885
5:20:54,878 --> 5:20:56,240
whole bunch of things queued up and

8886
5:20:56,240 --> 5:20:59,040
something's wrong we can use lprm in

8887
5:20:59,040 --> 5:21:01,200
order to fix it and if we come back over

8888
5:21:01,200 --> 5:21:02,240
here we're going to see sure enough it

8889
5:21:02,240 --> 5:21:04,320
printed out that entire file for us

8890
5:21:04,320 --> 5:21:06,400
right there on the page so it's really

8891
5:21:06,400 --> 5:21:08,878
easy to print using the command line

8892
5:21:08,878 --> 5:21:11,280
once it's set up with cups and

8893
5:21:11,280 --> 5:21:13,200
thankfully cups is really easy to set up

8894
5:21:13,200 --> 5:21:16,080
too because it's all web-based and that

8895
5:21:16,080 --> 5:21:18,240
web interface honestly is very powerful

8896
5:21:18,240 --> 5:21:20,878
we can use it to queue up jobs to stop

8897
5:21:20,878 --> 5:21:23,920
jobs do test pages we can use cups for

8898
5:21:23,920 --> 5:21:26,240
gui environment printing but the most

8899
5:21:26,240 --> 5:21:28,080
important thing to realize is that we

8900
5:21:28,080 --> 5:21:30,400
have access to the cup system by using

8901
5:21:30,400 --> 5:21:32,240
the command line tools that are

8902
5:21:32,240 --> 5:21:35,040
installed on our system

8903
5:21:35,040 --> 5:21:38,638
udev is the userspace device manager

8904
5:21:38,638 --> 5:21:41,760
that has replaced dev fs and older linux

8905
5:21:41,760 --> 5:21
systems now what's really cool is it

8906
5:21 --> 5:21:46,718
uses sysfs which is a virtual file

8907
5:21:46,718 --> 5:21:48,798
system that has information about the

8908
5:21:48,798 --> 5:21:51,520
hardware and then it follows rules in

8909
5:21:51,520 --> 5:21:54,240
order to keep devices with consistent

8910
5:21:54,240 --> 5:21:56,320
names now what i mean by that is if

8911
5:21:56,320 --> 5:21:58,240
you've ever had a linux system with

8912
5:21:58,240 --> 5:22:00,480
multiple anything but we'll say hard

8913
5:22:00,480 --> 5:22:02,558
drives the order that you used to put

8914
5:22:02,558 --> 5:22:05,120
them in the system depended on the name

8915
5:22:05,120 --> 5:22:06,558
they would get so the first one the

8916
5:22:06,558 --> 5:22:10,240
system recognized would be sda then sdb

8917
5:22:10,240 --> 5:22:13,040
and then sdc but on the next boot if

8918
5:22:13,040 --> 5:22:15,280
they came up in like a different order

8919
5:22:15,280 --> 5:22:17,280
while all of a sudden this one might be

8920
5:22:17,280 --> 5:22:20,878
sda and this one would be sdb and this

8921
5:22:20,878 --> 5:22:22,958
one might still be sdc and those are

8922
5:22:22,958 --> 5:22:25,600
real pain in the butt so what udev does

8923
5:22:25,600 --> 5:22:29,280
is it creates devices based on specifics

8924
5:22:29,280 --> 5:22:31,520
with the hardware so it'll take its like

8925
5:22:31,520 --> 5:22:34,958
uuid and it will create a solid

8926
5:22:34,958 --> 5:22:36,798
consistent device that that's always

8927
5:22:36,798 --> 5:22:38,480
going to be so if you put them in a

8928
5:22:38,480 --> 5:22:40,558
different order or the buses come alive

8929
5:22:40,558 --> 5:22:42,160
in a different order on boot they're

8930
5:22:42,160 --> 5:22:44,638
still going to be the same devices which

8931
5:22:44,638 --> 5:22:46,400
makes things a lot simpler when it comes

8932
5:22:46,400 --> 5:22:48,160
to mounting drives and things like that

8933
5:22:48,160 --> 5:22:50,320
now it also allows us to do some other

8934
5:22:50,320 --> 5:22:53,200
things like create rules so first of all

8935
5:22:53,200 --> 5:22:54,240
i want to show you some of the things

8936
5:22:54,240 --> 5:22:56,480
you can do if you're root you have more

8937
5:22:56,480 --> 5:22:58,080
access to do this so we're going to say

8938
5:22:58,080 --> 5:23:01,440
u dev adm this is the administrator

8939
5:23:01,440 --> 5:23:03,520
command that allows us to do some things

8940
5:23:03,520 --> 5:23:05,680
with the udev system so the first thing

8941
5:23:05,680 --> 5:23:08,958
i want to do is say udev info

8942
5:23:08,958 --> 5:23:12,360
let's actually look at dev

8943
5:23:12,360 --> 5:23:16,240
sr0 which is actually our dvd drive and

8944
5:23:16,240 --> 5:23:18,400
it gives us all sorts of information

8945
5:23:18,400 --> 5:23:20,958
specific to this drive so we'll see a

8946
5:23:20,958 --> 5:23:22,798
couple things like let's scroll up we

8947
5:23:22,798 --> 5:23:25,520
see this is n means the name so this is

8948
5:23:25,520 --> 5:23:27,920
the name that it has assigned it this is

8949
5:23:27,920 --> 5:23:29,840
the place in the pci device where it

8950
5:23:29,840 --> 5:23:31,520
exists this is all the specific

8951
5:23:31,520 --> 5:23:35,200
information about it and if we look

8952
5:23:35,200 --> 5:23:37,440
lsdev

8953
5:23:37,440 --> 5:23
grep sr0 we're going to see sure enough

8954
5:23 --> 5:23:42,718
it's right in the dev folder sr0 it's

8955
5:23:42,718 --> 5:23:45,280
dynamically created when it detects it

8956
5:23:45,280 --> 5:23:48,718
and puts it in now sr0 is not terribly

8957
5:23:48,718 --> 5:23:51,120
useful at least for me to recognize a

8958
5:23:51,120 --> 5:23:53,680
hard drive or a dvd drive when it's in

8959
5:23:53,680 --> 5:23:55,200
the system i can see it mounted right

8960
5:23:55,200 --> 5:23:57,360
here but that doesn't help me sr0

8961
5:23:57,360 --> 5:23:59,680
doesn't mean dvd to me so we could do

8962
5:23:59,680 --> 5:24:01,840
something like make a rule that creates

8963
5:24:01,840 --> 5:24:04,480
a shortcut to it every time it

8964
5:24:04,480 --> 5:24:06,240
recognizes it in the system so we're

8965
5:24:06,240 --> 5:24:10,080
going to go into the etc udev rules.d

8966
5:24:10,080 --> 5:24:12,160
folder and in here let's see what there

8967
5:24:12,160 --> 5:24:14,480
is there's one called snap core rules

8968
5:24:14,480 --> 5:24:15,920
but i'm going to create a new one i'm

8969
5:24:15,920 --> 5:24:17,600
going to say vi

8970
5:24:17,600 --> 5:24
we'll say number 10 so it loads it first

8971
5:24 --> 5:24:21,520
sean dot

8972
5:24:21,520 --> 5:24:24,558
rules sean rules nice anyway it has to

8973
5:24:24,558 --> 5:24:26,320
end in dot rules and then we're going to

8974
5:24:26,320 --> 5:24:28,798
create our own rule now the format here

8975
5:24:28,798 --> 5:24
is something that you just kind of have

8976
5:24 --> 5:24:32,638
to get the hang of but the kernel is

8977
5:24:32,638 --> 5:24:33,920
equal to

8978
5:24:33,920 --> 5:24:36,160
sr0 meaning this is what the kernel

8979
5:24:36,160 --> 5:24:38,400
knows the device as

8980
5:24:38,400 --> 5:24:39,680
it's in the

8981
5:24:39,680 --> 5:24:41,600
sub system

8982
5:24:41,600 --> 5:24:43,600
is equal to

8983
5:24:43,600 --> 5:24:45,440
block which it actually showed us when

8984
5:24:45,440 --> 5:24:47,360
we did that command and then what i want

8985
5:24:47,360 --> 5:24:50,160
to do is create a sim link and i want to

8986
5:24:50,160 --> 5:24:54,400
call that sim link my underscore dvd

8987
5:24:54,400 --> 5:24
okay so what we've done is created this

8988
5:24 --> 5:24:58,878
rule anytime it has a device called sr0

8989
5:24:58,878 --> 5:25:00,718
in the block subsystem meaning like a

8990
5:25:00,718 --> 5:25:02,080
block device like a hard drive or a

8991
5:25:02,080 --> 5:25:04,400
cd-rom i wanted to create a sim link

8992
5:25:04,400 --> 5:25:06,638
called my dvd in the dev folder so i can

8993
5:25:06,638 --> 5:25:08,320
reference it there instead of

8994
5:25:08,320 --> 5:25:12,480
remembering sr0 so let's save this

8995
5:25:12,480 --> 5:25:14,240
now we could reboot the computer or we

8996
5:25:14,240 --> 5:25:17,760
could just do udev adm

8997
5:25:17,760 --> 5:25:18,798
trigger

8998
5:25:18,798 --> 5:25:20,798
okay and now if we go into the dev

8999
5:25:20,798 --> 5:25:21,840
folder

9000
5:25:21,840 --> 5:25:23,600
and we do an ls

9001
5:25:23,600 --> 5:25:25,680
we should see in here

9002
5:25:25,680 --> 5:25:28,400
look at that my dvd it's created that

9003
5:25:28,400 --> 5:25:30,958
sim link to well in fact let's do ls

9004
5:25:30,958 --> 5:25:33,760
minus l grab dvd

9005
5:25:33,760 --> 5:25:36,958
my dvd is a link to sr0 it looks like

9006
5:25:36,958 --> 5:25:40,480
there already was a dvd shortcut to sr0

9007
5:25:40,480 --> 5:25:42,958
but we created a new one by making our

9008
5:25:42,958 --> 5:25:45,280
own udev rule called my dvd and that's

9009
5:25:45,280 --> 5:25:48,320
pointing to sr0 and we can use this when

9010
5:25:48,320 --> 5:25:50,080
we're referencing the device in anything

9011
5:25:50,080 --> 5:25:51,920
that we want like mounting and that sort

9012
5:25:51,920 --> 5:25:53,600
of a thing and the cool part is this

9013
5:25:53,600 --> 5:25:55,360
isn't just a sim link sitting on our

9014
5:25:55,360 --> 5:25:56,878
system this is something that's going to

9015
5:25:56,878 --> 5:25:59,520
be created every time the dvd is

9016
5:25:59,520 --> 5:26:00,400
recognized

9017
5:26:00,400 --> 5:26:03,360
and set up by the system so on boot even

9018
5:26:03,360 --> 5:26:05,440
though the dev file system is a virtual

9019
5:26:05,440 --> 5:26:07,200
file system it's always going to have

9020
5:26:07,200 --> 5:26:10,798
that sim link my dvd pointing to sr0 now

9021
5:26:10,798 --> 5:26:12,638
we just graze the surface of the things

9022
5:26:12,638 --> 5:26:14,958
we can do with udev rules we can

9023
5:26:14,958 --> 5:26:16,798
actually make things happen when certain

9024
5:26:16,798 --> 5:26:19,040
usb drives are plugged in that sort of a

9025
5:26:19,040 --> 5:26:20,638
thing but one of the key things i want

9026
5:26:20,638 --> 5:26:22,240
you to take away is that it's really

9027
5:26:22,240 --> 5:26:26,480
smart and it uses sysfs in order to know

9028
5:26:26,480 --> 5:26:28,718
information about the drivers and

9029
5:26:28,718 --> 5:26:30,160
everything else how it interacts with

9030
5:26:30,160 --> 5:26:32,638
the kernel it uses the information in

9031
5:26:32,638 --> 5:26:36,080
sysfs to create the entries in the dev

9032
5:26:36,080 --> 5:26:37,920
folder i hope this has been informative

9033
5:26:37,920 --> 5:26:39,360
for you and i'd like to thank you for

9034
5:26:39,360 --> 5:26:45,360
viewing

9035
5:26:45,360 --> 5:26:47,440
you

